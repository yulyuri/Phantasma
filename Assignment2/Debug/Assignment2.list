
Assignment2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e88  0800a848  0800a848  0000b848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6d0  0800c6d0  0000e410  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6d0  0800c6d0  0000d6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d8  0800c6d8  0000e410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d8  0800c6d8  0000d6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6dc  0800c6dc  0000d6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800c6e0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000410  0800caf0  0000e410  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800caf0  0000e790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e998  00000000  00000000  0000e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298f  00000000  00000000  0001cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3e  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029191  00000000  00000000  00020f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129d0  00000000  00000000  0004a0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5b3a  00000000  00000000  0005ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001525d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e28  00000000  00000000  00152614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0015743c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a82c 	.word	0x0800a82c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	0800a82c 	.word	0x0800a82c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <GET_TEMP>:
	static void UART1_Init(void);
	UART_HandleTypeDef huart1;

	extern void initialise_monitor_handles(void);	// for semi-hosting support (printf)

	float GET_TEMP(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
		float temp_data;
		temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8000f3e:	f002 fb75 	bl	800362c <BSP_TSENSOR_ReadTemp>
 8000f42:	ed87 0a01 	vstr	s0, [r7, #4]
		return temp_data;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ee07 3a90 	vmov	s15, r3
	}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <GET_HUMID>:

	float GET_HUMID(){
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
		float humidity_data;
		humidity_data = BSP_HSENSOR_ReadHumidity();
 8000f5c:	f002 faca 	bl	80034f4 <BSP_HSENSOR_ReadHumidity>
 8000f60:	ed87 0a01 	vstr	s0, [r7, #4]
		return humidity_data;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	ee07 3a90 	vmov	s15, r3
	}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <GET_PRES>:

	float GET_PRES(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
		float pressure_data;
		pressure_data = BSP_PSENSOR_ReadPressure();
 8000f7a:	f002 fb2d 	bl	80035d8 <BSP_PSENSOR_ReadPressure>
 8000f7e:	ed87 0a01 	vstr	s0, [r7, #4]
		return pressure_data;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	ee07 3a90 	vmov	s15, r3
	}
 8000f88:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <GET_MAG>:

	float GET_MAG(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
		float magneto_data[3];
		int16_t magneto_data_i16[3] = { 0 };
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	809a      	strh	r2, [r3, #4]
		BSP_MAGNETO_GetXYZ(magneto_data_i16);
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fadf 	bl	8003568 <BSP_MAGNETO_GetXYZ>
		magneto_data[0] = (float)magneto_data_i16[0] - mag_offset_X;
 8000faa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb6:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <GET_MAG+0xc4>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc0:	edc7 7a02 	vstr	s15, [r7, #8]
		magneto_data[1] = (float)magneto_data_i16[1] - mag_offset_Y;
 8000fc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd0:	4b22      	ldr	r3, [pc, #136]	@ (800105c <GET_MAG+0xc8>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	edc7 7a03 	vstr	s15, [r7, #12]
		magneto_data[2] = (float)magneto_data_i16[2] - mag_offset_Z;
 8000fde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <GET_MAG+0xcc>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	edc7 7a04 	vstr	s15, [r7, #16]
		float mag_result = sqrt(magneto_data[0]*magneto_data[0]+magneto_data[1]*magneto_data[1]+magneto_data[2]*magneto_data[2]);
 8000ff8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ffc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001004:	edd7 6a03 	vldr	s13, [r7, #12]
 8001008:	edd7 7a03 	vldr	s15, [r7, #12]
 800100c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001014:	edd7 6a04 	vldr	s13, [r7, #16]
 8001018:	edd7 7a04 	vldr	s15, [r7, #16]
 800101c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	ee17 0a90 	vmov	r0, s15
 8001028:	f7ff fa8e 	bl	8000548 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	ec43 2b10 	vmov	d0, r2, r3
 8001034:	f008 fa76 	bl	8009524 <sqrt>
 8001038:	ec53 2b10 	vmov	r2, r3, d0
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdb2 	bl	8000ba8 <__aeabi_d2f>
 8001044:	4603      	mov	r3, r0
 8001046:	617b      	str	r3, [r7, #20]
		return mag_result;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	ee07 3a90 	vmov	s15, r3
	}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000458 	.word	0x20000458
 800105c:	2000045c 	.word	0x2000045c
 8001060:	20000460 	.word	0x20000460

08001064 <GET_MAG_DATA>:
	void GET_MAG_DATA(float* mag_x, float* mag_y, float* mag_z, float* mag_magnitude) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
	    int16_t magneto_data_i16[3] = { 0 };
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	809a      	strh	r2, [r3, #4]
	    BSP_MAGNETO_GetXYZ(magneto_data_i16);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fa71 	bl	8003568 <BSP_MAGNETO_GetXYZ>

	    // Apply the offsets to get calibrated magnetic data
	    *mag_x = (float)magneto_data_i16[0] - mag_offset_X;
 8001086:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <GET_MAG_DATA+0xdc>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	edc3 7a00 	vstr	s15, [r3]
	    *mag_y = (float)magneto_data_i16[1] - mag_offset_Y;
 80010a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <GET_MAG_DATA+0xe0>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	    *mag_z = (float)magneto_data_i16[2] - mag_offset_Z;
 80010be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <GET_MAG_DATA+0xe4>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edc3 7a00 	vstr	s15, [r3]

	    // Calculate the magnitude of the magnetic field (magnitude of the 3D vector)
	    *mag_magnitude = sqrt((*mag_x) * (*mag_x) + (*mag_y) * (*mag_y) + (*mag_z) * (*mag_z));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	ed93 7a00 	vldr	s14, [r3]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	edd3 6a00 	vldr	s13, [r3]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 6a00 	vldr	s13, [r3]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	ee17 0a90 	vmov	r0, s15
 8001116:	f7ff fa17 	bl	8000548 <__aeabi_f2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	ec43 2b10 	vmov	d0, r2, r3
 8001122:	f008 f9ff 	bl	8009524 <sqrt>
 8001126:	ec53 2b10 	vmov	r2, r3, d0
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd3b 	bl	8000ba8 <__aeabi_d2f>
 8001132:	4602      	mov	r2, r0
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]
	}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000458 	.word	0x20000458
 8001144:	2000045c 	.word	0x2000045c
 8001148:	20000460 	.word	0x20000460

0800114c <MAG_CALIBRATE>:


	void MAG_CALIBRATE(){
 800114c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001150:	b0d6      	sub	sp, #344	@ 0x158
 8001152:	af04      	add	r7, sp, #16
		char message1[] = "Calibrating...\n";       // Fixed message
 8001154:	4b65      	ldr	r3, [pc, #404]	@ (80012ec <MAG_CALIBRATE+0x1a0>)
 8001156:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		char message_print1[32];        // UART transmit buffer. See the comment in the line above.
		sprintf(message_print1, "%s\r", message1);
 8001160:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001164:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001168:	4961      	ldr	r1, [pc, #388]	@ (80012f0 <MAG_CALIBRATE+0x1a4>)
 800116a:	4618      	mov	r0, r3
 800116c:	f006 f83c 	bl	80071e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print1, strlen(message_print1),0xFFFF); //Sending in normal mode
 8001170:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f87b 	bl	8000270 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001182:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001186:	485b      	ldr	r0, [pc, #364]	@ (80012f4 <MAG_CALIBRATE+0x1a8>)
 8001188:	f004 faeb 	bl	8005762 <HAL_UART_Transmit>

		int16_t magneto_data_i16[3] = { 0 };
 800118c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	809a      	strh	r2, [r3, #4]
		BSP_MAGNETO_GetXYZ(magneto_data_i16);
 8001196:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800119a:	4618      	mov	r0, r3
 800119c:	f002 f9e4 	bl	8003568 <BSP_MAGNETO_GetXYZ>
		mag_offset_X = (float)magneto_data_i16[0];
 80011a0:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	4b52      	ldr	r3, [pc, #328]	@ (80012f8 <MAG_CALIBRATE+0x1ac>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]
		mag_offset_Y = (float)magneto_data_i16[1];
 80011b2:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	@ 0x112
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011be:	4b4f      	ldr	r3, [pc, #316]	@ (80012fc <MAG_CALIBRATE+0x1b0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
		mag_offset_Z = (float)magneto_data_i16[2];
 80011c4:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	@ 0x114
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <MAG_CALIBRATE+0x1b4>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
		char message_print2[128];        // UART transmit buffer. See the comment in the line above.
		sprintf(message_print2, "Before Calibration: Mag X : %.2f; Mag Y : %.2f; Mag Z : %.2f\r\n", mag_offset_X, mag_offset_Y, mag_offset_Z);
 80011d6:	4b48      	ldr	r3, [pc, #288]	@ (80012f8 <MAG_CALIBRATE+0x1ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	4680      	mov	r8, r0
 80011e2:	4689      	mov	r9, r1
 80011e4:	4b45      	ldr	r3, [pc, #276]	@ (80012fc <MAG_CALIBRATE+0x1b0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9ad 	bl	8000548 <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <MAG_CALIBRATE+0x1b4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9a6 	bl	8000548 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001208:	e9cd 4500 	strd	r4, r5, [sp]
 800120c:	4642      	mov	r2, r8
 800120e:	464b      	mov	r3, r9
 8001210:	493c      	ldr	r1, [pc, #240]	@ (8001304 <MAG_CALIBRATE+0x1b8>)
 8001212:	f005 ffe9 	bl	80071e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print2, strlen(message_print2),0xFFFF); //Sending in normal mode
 8001216:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f828 	bl	8000270 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29a      	uxth	r2, r3
 8001224:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800122c:	4831      	ldr	r0, [pc, #196]	@ (80012f4 <MAG_CALIBRATE+0x1a8>)
 800122e:	f004 fa98 	bl	8005762 <HAL_UART_Transmit>

		float magneto_data[3];
		BSP_MAGNETO_GetXYZ(magneto_data_i16);
 8001232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f996 	bl	8003568 <BSP_MAGNETO_GetXYZ>
		magneto_data[0] = (float)magneto_data_i16[0] - mag_offset_X;
 800123c:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <MAG_CALIBRATE+0x1ac>)
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001252:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		magneto_data[1] = (float)magneto_data_i16[1] - mag_offset_Y;
 8001256:	f9b7 3112 	ldrsh.w	r3, [r7, #274]	@ 0x112
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <MAG_CALIBRATE+0x1b0>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		magneto_data[2] = (float)magneto_data_i16[2] - mag_offset_Z;
 8001270:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	@ 0x114
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MAG_CALIBRATE+0x1b4>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001286:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		char message_print3[128];        // UART transmit buffer. See the comment in the line above.
		sprintf(message_print3, "After Calibration: Mag X : %.2f; Mag Y : %.2f; Mag Z : %.2f\r\n", magneto_data[0], magneto_data[1], magneto_data[2]);
 800128a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f95a 	bl	8000548 <__aeabi_f2d>
 8001294:	4680      	mov	r8, r0
 8001296:	4689      	mov	r9, r1
 8001298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f953 	bl	8000548 <__aeabi_f2d>
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f94c 	bl	8000548 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	1d38      	adds	r0, r7, #4
 80012b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ba:	e9cd 4500 	strd	r4, r5, [sp]
 80012be:	4642      	mov	r2, r8
 80012c0:	464b      	mov	r3, r9
 80012c2:	4911      	ldr	r1, [pc, #68]	@ (8001308 <MAG_CALIBRATE+0x1bc>)
 80012c4:	f005 ff90 	bl	80071e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print3, strlen(message_print3),0xFFFF); //Sending in normal mode
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7fe ffd0 	bl	8000270 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MAG_CALIBRATE+0x1a8>)
 80012dc:	f004 fa41 	bl	8005762 <HAL_UART_Transmit>
	}
 80012e0:	bf00      	nop
 80012e2:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80012e6:	46bd      	mov	sp, r7
 80012e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ec:	0800a8cc 	.word	0x0800a8cc
 80012f0:	0800a848 	.word	0x0800a848
 80012f4:	200004ac 	.word	0x200004ac
 80012f8:	20000458 	.word	0x20000458
 80012fc:	2000045c 	.word	0x2000045c
 8001300:	20000460 	.word	0x20000460
 8001304:	0800a84c 	.word	0x0800a84c
 8001308:	0800a88c 	.word	0x0800a88c

0800130c <detect_ghost_direction>:
	void detect_ghost_direction(float mag_x, float mag_y, float mag_z) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b0c0      	sub	sp, #256	@ 0x100
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0a03 	vstr	s0, [r7, #12]
 8001316:	edc7 0a02 	vstr	s1, [r7, #8]
 800131a:	ed87 1a01 	vstr	s2, [r7, #4]
	    char direction[64] = "";           // To hold horizontal direction
 800131e:	2300      	movs	r3, #0
 8001320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001324:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001328:	223c      	movs	r2, #60	@ 0x3c
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f006 f853 	bl	80073d8 <memset>
	    char vertical_direction[32] = "";  // To hold vertical direction
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001338:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

	    // Thresholds for detecting direction
	    const float THRESHOLD_X = 300.0;
 800134c:	4b85      	ldr	r3, [pc, #532]	@ (8001564 <detect_ghost_direction+0x258>)
 800134e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	    const float THRESHOLD_Y = 400.0;
 8001352:	4b85      	ldr	r3, [pc, #532]	@ (8001568 <detect_ghost_direction+0x25c>)
 8001354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	    const float THRESHOLD_Z = 1000.0;
 8001358:	4b84      	ldr	r3, [pc, #528]	@ (800156c <detect_ghost_direction+0x260>)
 800135a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

	    // Determine horizontal direction (East/West/North/South)
	    if (fabs(mag_x) > THRESHOLD_X) {
 800135e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001362:	eef0 7ae7 	vabs.f32	s15, s15
 8001366:	ed97 7a3f 	vldr	s14, [r7, #252]	@ 0xfc
 800136a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	d525      	bpl.n	80013c0 <detect_ghost_direction+0xb4>
	        if (mag_x > 0) {
 8001374:	edd7 7a03 	vldr	s15, [r7, #12]
 8001378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd0f      	ble.n	80013a2 <detect_ghost_direction+0x96>
	            strcat(direction, "East");
 8001382:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff72 	bl	8000270 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001394:	4413      	add	r3, r2
 8001396:	4a76      	ldr	r2, [pc, #472]	@ (8001570 <detect_ghost_direction+0x264>)
 8001398:	6810      	ldr	r0, [r2, #0]
 800139a:	6018      	str	r0, [r3, #0]
 800139c:	7912      	ldrb	r2, [r2, #4]
 800139e:	711a      	strb	r2, [r3, #4]
 80013a0:	e00e      	b.n	80013c0 <detect_ghost_direction+0xb4>
	        } else {
	            strcat(direction, "West");
 80013a2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff62 	bl	8000270 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013b4:	4413      	add	r3, r2
 80013b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001574 <detect_ghost_direction+0x268>)
 80013b8:	6810      	ldr	r0, [r2, #0]
 80013ba:	6018      	str	r0, [r3, #0]
 80013bc:	7912      	ldrb	r2, [r2, #4]
 80013be:	711a      	strb	r2, [r3, #4]
	        }
	    }

	    if (fabs(mag_y) > THRESHOLD_Y) {
 80013c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013c4:	eef0 7ae7 	vabs.f32	s15, s15
 80013c8:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 80013cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d4:	d553      	bpl.n	800147e <detect_ghost_direction+0x172>
	        if (mag_y > 0) {
 80013d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	dd26      	ble.n	8001432 <detect_ghost_direction+0x126>
	            if (strlen(direction) > 0) {
 80013e4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d011      	beq.n	8001412 <detect_ghost_direction+0x106>
	                strcat(direction, " North");
 80013ee:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe ff3c 	bl	8000270 <strlen>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001400:	4413      	add	r3, r2
 8001402:	4a5d      	ldr	r2, [pc, #372]	@ (8001578 <detect_ghost_direction+0x26c>)
 8001404:	6810      	ldr	r0, [r2, #0]
 8001406:	6018      	str	r0, [r3, #0]
 8001408:	8891      	ldrh	r1, [r2, #4]
 800140a:	7992      	ldrb	r2, [r2, #6]
 800140c:	8099      	strh	r1, [r3, #4]
 800140e:	719a      	strb	r2, [r3, #6]
 8001410:	e035      	b.n	800147e <detect_ghost_direction+0x172>
	            } else {
	                strcat(direction, "North");
 8001412:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe ff2a 	bl	8000270 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001424:	4413      	add	r3, r2
 8001426:	4a55      	ldr	r2, [pc, #340]	@ (800157c <detect_ghost_direction+0x270>)
 8001428:	6810      	ldr	r0, [r2, #0]
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	8892      	ldrh	r2, [r2, #4]
 800142e:	809a      	strh	r2, [r3, #4]
 8001430:	e025      	b.n	800147e <detect_ghost_direction+0x172>
	            }
	        } else {
	            if (strlen(direction) > 0) {
 8001432:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d011      	beq.n	8001460 <detect_ghost_direction+0x154>
	                strcat(direction, " South");
 800143c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe ff15 	bl	8000270 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800144e:	4413      	add	r3, r2
 8001450:	4a4b      	ldr	r2, [pc, #300]	@ (8001580 <detect_ghost_direction+0x274>)
 8001452:	6810      	ldr	r0, [r2, #0]
 8001454:	6018      	str	r0, [r3, #0]
 8001456:	8891      	ldrh	r1, [r2, #4]
 8001458:	7992      	ldrb	r2, [r2, #6]
 800145a:	8099      	strh	r1, [r3, #4]
 800145c:	719a      	strb	r2, [r3, #6]
 800145e:	e00e      	b.n	800147e <detect_ghost_direction+0x172>
	            } else {
	                strcat(direction, "South");
 8001460:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ff03 	bl	8000270 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001472:	4413      	add	r3, r2
 8001474:	4a43      	ldr	r2, [pc, #268]	@ (8001584 <detect_ghost_direction+0x278>)
 8001476:	6810      	ldr	r0, [r2, #0]
 8001478:	6018      	str	r0, [r3, #0]
 800147a:	8892      	ldrh	r2, [r2, #4]
 800147c:	809a      	strh	r2, [r3, #4]
	            }
	        }
	    }

	    // Determine vertical direction (Above/Below)
	    if (fabs(mag_z) > THRESHOLD_Z) {
 800147e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001482:	eef0 7ae7 	vabs.f32	s15, s15
 8001486:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 800148a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d517      	bpl.n	80014c4 <detect_ghost_direction+0x1b8>
	        if (mag_z > 0) {
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	dd08      	ble.n	80014b4 <detect_ghost_direction+0x1a8>
	            strcpy(vertical_direction, "Below");
 80014a2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014a6:	4a38      	ldr	r2, [pc, #224]	@ (8001588 <detect_ghost_direction+0x27c>)
 80014a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ac:	6018      	str	r0, [r3, #0]
 80014ae:	3304      	adds	r3, #4
 80014b0:	8019      	strh	r1, [r3, #0]
 80014b2:	e007      	b.n	80014c4 <detect_ghost_direction+0x1b8>
	        } else {
	            strcpy(vertical_direction, "Above");
 80014b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014b8:	4a34      	ldr	r2, [pc, #208]	@ (800158c <detect_ghost_direction+0x280>)
 80014ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014be:	6018      	str	r0, [r3, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	8019      	strh	r1, [r3, #0]
	        }
	    }

	    // Create the message conditionally based on whether direction or vertical_direction is not empty
	    char message[128] = "";
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	227c      	movs	r2, #124	@ 0x7c
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 ff81 	bl	80073d8 <memset>
	    if (strlen(direction) > 0 && strlen(vertical_direction) > 0) {
 80014d6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00e      	beq.n	80014fe <detect_ghost_direction+0x1f2>
 80014e0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <detect_ghost_direction+0x1f2>
	        // Both horizontal and vertical directions detected
	        sprintf(message, "Horizontal: %s Vertical: %s\r\n", direction, vertical_direction);
 80014ea:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014ee:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80014f2:	f107 0014 	add.w	r0, r7, #20
 80014f6:	4926      	ldr	r1, [pc, #152]	@ (8001590 <detect_ghost_direction+0x284>)
 80014f8:	f005 fe76 	bl	80071e8 <siprintf>
 80014fc:	e01a      	b.n	8001534 <detect_ghost_direction+0x228>
	    } else if (strlen(direction) > 0) {
 80014fe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <detect_ghost_direction+0x20e>
	        // Only horizontal direction detected
	        sprintf(message, "Horizontal: %s\r\n", direction);
 8001508:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4920      	ldr	r1, [pc, #128]	@ (8001594 <detect_ghost_direction+0x288>)
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fe68 	bl	80071e8 <siprintf>
 8001518:	e00c      	b.n	8001534 <detect_ghost_direction+0x228>
	    } else if (strlen(vertical_direction) > 0) {
 800151a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <detect_ghost_direction+0x228>
	        // Only vertical direction detected
	        sprintf(message, "Vertical: %s\r\n", vertical_direction);
 8001524:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	491a      	ldr	r1, [pc, #104]	@ (8001598 <detect_ghost_direction+0x28c>)
 800152e:	4618      	mov	r0, r3
 8001530:	f005 fe5a 	bl	80071e8 <siprintf>
	    }

	    // If there's a valid message, print and transmit it
	    if (strlen(message) > 0) {
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <detect_ghost_direction+0x24e>
	        HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe94 	bl	8000270 <strlen>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	f107 0114 	add.w	r1, r7, #20
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	4811      	ldr	r0, [pc, #68]	@ (800159c <detect_ghost_direction+0x290>)
 8001556:	f004 f904 	bl	8005762 <HAL_UART_Transmit>
	    }
	}
 800155a:	bf00      	nop
 800155c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	43960000 	.word	0x43960000
 8001568:	43c80000 	.word	0x43c80000
 800156c:	447a0000 	.word	0x447a0000
 8001570:	0800a8dc 	.word	0x0800a8dc
 8001574:	0800a8e4 	.word	0x0800a8e4
 8001578:	0800a8ec 	.word	0x0800a8ec
 800157c:	0800a8f4 	.word	0x0800a8f4
 8001580:	0800a8fc 	.word	0x0800a8fc
 8001584:	0800a904 	.word	0x0800a904
 8001588:	0800a90c 	.word	0x0800a90c
 800158c:	0800a914 	.word	0x0800a914
 8001590:	0800a91c 	.word	0x0800a91c
 8001594:	0800a93c 	.word	0x0800a93c
 8001598:	0800a950 	.word	0x0800a950
 800159c:	200004ac 	.word	0x200004ac

080015a0 <IMU_CALIBRATE>:




	void IMU_CALIBRATE(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
		BSP_GYRO_GetXYZ(gyro_data);
 80015a6:	483a      	ldr	r0, [pc, #232]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015a8:	f001 ff6c 	bl	8003484 <BSP_GYRO_GetXYZ>
		gyro_data[0] = gyro_data[0];
 80015ac:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a37      	ldr	r2, [pc, #220]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015b2:	6013      	str	r3, [r2, #0]
		gyro_data[1] = gyro_data[1];
 80015b4:	4b36      	ldr	r3, [pc, #216]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a35      	ldr	r2, [pc, #212]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015ba:	6053      	str	r3, [r2, #4]
		gyro_data[2] = gyro_data[2];
 80015bc:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a33      	ldr	r2, [pc, #204]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015c2:	6093      	str	r3, [r2, #8]
		gyro_offset_X = gyro_data[0];
 80015c4:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a32      	ldr	r2, [pc, #200]	@ (8001694 <IMU_CALIBRATE+0xf4>)
 80015ca:	6013      	str	r3, [r2, #0]
		gyro_offset_Y = gyro_data[1];
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a31      	ldr	r2, [pc, #196]	@ (8001698 <IMU_CALIBRATE+0xf8>)
 80015d2:	6013      	str	r3, [r2, #0]
		gyro_offset_Z = gyro_data[2];
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <IMU_CALIBRATE+0xf0>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	4a30      	ldr	r2, [pc, #192]	@ (800169c <IMU_CALIBRATE+0xfc>)
 80015da:	6013      	str	r3, [r2, #0]
		int16_t accel_data_i16[3] = { 0 };
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	809a      	strh	r2, [r3, #4]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fef2 	bl	80033d0 <BSP_ACCELERO_AccGetXYZ>
		accel_offset_X = (float)accel_data_i16[0] * (9.8/1000.0f);
 80015ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee17 0a90 	vmov	r0, s15
 80015fc:	f7fe ffa4 	bl	8000548 <__aeabi_f2d>
 8001600:	a321      	add	r3, pc, #132	@ (adr r3, 8001688 <IMU_CALIBRATE+0xe8>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fac9 	bl	8000ba8 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <IMU_CALIBRATE+0x100>)
 800161a:	6013      	str	r3, [r2, #0]
		accel_offset_Y = (float)accel_data_i16[1] * (9.8/1000.0f);
 800161c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_f2d>
 8001630:	a315      	add	r3, pc, #84	@ (adr r3, 8001688 <IMU_CALIBRATE+0xe8>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffdf 	bl	80005f8 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fab1 	bl	8000ba8 <__aeabi_d2f>
 8001646:	4603      	mov	r3, r0
 8001648:	4a16      	ldr	r2, [pc, #88]	@ (80016a4 <IMU_CALIBRATE+0x104>)
 800164a:	6013      	str	r3, [r2, #0]
		accel_offset_Z = (float)accel_data_i16[2] * (9.8/1000.0f);
 800164c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001658:	ee17 0a90 	vmov	r0, s15
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	a309      	add	r3, pc, #36	@ (adr r3, 8001688 <IMU_CALIBRATE+0xe8>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fa99 	bl	8000ba8 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <IMU_CALIBRATE+0x108>)
 800167a:	6013      	str	r3, [r2, #0]
	}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	bc01a36f 	.word	0xbc01a36f
 800168c:	3f841205 	.word	0x3f841205
 8001690:	20000438 	.word	0x20000438
 8001694:	20000464 	.word	0x20000464
 8001698:	20000468 	.word	0x20000468
 800169c:	2000046c 	.word	0x2000046c
 80016a0:	20000470 	.word	0x20000470
 80016a4:	20000474 	.word	0x20000474
 80016a8:	20000478 	.word	0x20000478
 80016ac:	00000000 	.word	0x00000000

080016b0 <GET_ACC>:

	float GET_ACC(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
		float accel_data[3];
		int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	809a      	strh	r2, [r3, #4]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fe85 	bl	80033d0 <BSP_ACCELERO_AccGetXYZ>
		accel_data[2] = (float)accel_data_i16[2] * (9.8/1000.0f);
 80016c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ee17 0a90 	vmov	r0, s15
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	a30b      	add	r3, pc, #44	@ (adr r3, 8001708 <GET_ACC+0x58>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa5c 	bl	8000ba8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	617b      	str	r3, [r7, #20]
		return accel_data[2];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	ee07 3a90 	vmov	s15, r3
	}
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	bc01a36f 	.word	0xbc01a36f
 800170c:	3f841205 	.word	0x3f841205

08001710 <GhostBustingModeStartupBeep>:

	void GhostBustingModeStartupBeep() {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
	    // Start time of the beep sequence
	    int start_time = HAL_GetTick();
 8001716:	f002 fd6b 	bl	80041f0 <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]
	    int beep_duration = 100; // Duration for each beep in milliseconds
 800171e:	2364      	movs	r3, #100	@ 0x64
 8001720:	60bb      	str	r3, [r7, #8]

	    while (HAL_GetTick() - start_time < beep_duration * 2) {
 8001722:	e020      	b.n	8001766 <GhostBustingModeStartupBeep+0x56>
	        int current_time = HAL_GetTick();
 8001724:	f002 fd64 	bl	80041f0 <HAL_GetTick>
 8001728:	4603      	mov	r3, r0
 800172a:	607b      	str	r3, [r7, #4]

	        // Toggle at intervals to create the fast beep effect
	        if ((current_time - start_time) % beep_duration < beep_duration / 2) {
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	fb93 f2f2 	sdiv	r2, r3, r2
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	fb01 f202 	mul.w	r2, r1, r2
 800173e:	1a9a      	subs	r2, r3, r2
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0fd9      	lsrs	r1, r3, #31
 8001744:	440b      	add	r3, r1
 8001746:	105b      	asrs	r3, r3, #1
 8001748:	429a      	cmp	r2, r3
 800174a:	da06      	bge.n	800175a <GhostBustingModeStartupBeep+0x4a>
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);  // Turn on buzzer
 800174c:	2201      	movs	r2, #1
 800174e:	2108      	movs	r1, #8
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f003 f920 	bl	8004998 <HAL_GPIO_WritePin>
 8001758:	e005      	b.n	8001766 <GhostBustingModeStartupBeep+0x56>
	        } else {
	            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); // Turn off buzzer
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001762:	f003 f919 	bl	8004998 <HAL_GPIO_WritePin>
	    while (HAL_GetTick() - start_time < beep_duration * 2) {
 8001766:	f002 fd43 	bl	80041f0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	0052      	lsls	r2, r2, #1
 8001774:	4293      	cmp	r3, r2
 8001776:	d3d5      	bcc.n	8001724 <GhostBustingModeStartupBeep+0x14>
	        }
	    }
	}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <Self_Destruct_Sequence>:
	    "                          (     //|/l|)|\\\\ \\     )              ",
	    "                        (/ / //  /|//||||\\\\  \\ \\  \\ _)            ",
	    "        !!! BOOM !!!                SYSTEM FAILURE                "
	};

	void Self_Destruct_Sequence(void) {
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b0a2      	sub	sp, #136	@ 0x88
 8001788:	af00      	add	r7, sp, #0
	    char message[] = "GHOST IS HERE! ABORT ABORT ABORT!\r\n";
 800178a:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <Self_Destruct_Sequence+0x228>)
 800178c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001790:	461d      	mov	r5, r3
 8001792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800179a:	682b      	ldr	r3, [r5, #0]
 800179c:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800179e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fd64 	bl	8000270 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
 80017b4:	487e      	ldr	r0, [pc, #504]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 80017b6:	f003 ffd4 	bl	8005762 <HAL_UART_Transmit>

	    // Countdown from 3 to 1 using ASCII art
	    const char** countdown_ascii[] = {countdown_ascii_3, countdown_ascii_2, countdown_ascii_1};
 80017ba:	4a7e      	ldr	r2, [pc, #504]	@ (80019b4 <Self_Destruct_Sequence+0x230>)
 80017bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	    // Display the "ABORT" ASCII art
	        for (int line = 0; line < sizeof(abort_ascii) / sizeof(abort_ascii[0]); line++) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80017cc:	e020      	b.n	8001810 <Self_Destruct_Sequence+0x8c>
	            HAL_UART_Transmit(&huart1, (uint8_t*)abort_ascii[line], strlen(abort_ascii[line]), HAL_MAX_DELAY);
 80017ce:	4a7a      	ldr	r2, [pc, #488]	@ (80019b8 <Self_Destruct_Sequence+0x234>)
 80017d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80017d8:	4a77      	ldr	r2, [pc, #476]	@ (80019b8 <Self_Destruct_Sequence+0x234>)
 80017da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fd44 	bl	8000270 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	4621      	mov	r1, r4
 80017f2:	486f      	ldr	r0, [pc, #444]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 80017f4:	f003 ffb5 	bl	8005762 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	2202      	movs	r2, #2
 80017fe:	496f      	ldr	r1, [pc, #444]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 8001800:	486b      	ldr	r0, [pc, #428]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001802:	f003 ffae 	bl	8005762 <HAL_UART_Transmit>
	        for (int line = 0; line < sizeof(abort_ascii) / sizeof(abort_ascii[0]); line++) {
 8001806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800180a:	3301      	adds	r3, #1
 800180c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d9da      	bls.n	80017ce <Self_Destruct_Sequence+0x4a>
	        }

	        // Add spacing after "ABORT" ASCII art
	        for (int i = 0; i < 5; i++) {
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800181e:	e00b      	b.n	8001838 <Self_Destruct_Sequence+0xb4>
	            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	2202      	movs	r2, #2
 8001826:	4965      	ldr	r1, [pc, #404]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 8001828:	4861      	ldr	r0, [pc, #388]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 800182a:	f003 ff9a 	bl	8005762 <HAL_UART_Transmit>
	        for (int i = 0; i < 5; i++) {
 800182e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001832:	3301      	adds	r3, #1
 8001834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800183c:	2b04      	cmp	r3, #4
 800183e:	ddef      	ble.n	8001820 <Self_Destruct_Sequence+0x9c>
	        }

	    for (int i = 0; i < 3; i++) {
 8001840:	2300      	movs	r3, #0
 8001842:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001844:	e05a      	b.n	80018fc <Self_Destruct_Sequence+0x178>
	        for (int line = 0; line < 16; line++) {
 8001846:	2300      	movs	r3, #0
 8001848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800184a:	e028      	b.n	800189e <Self_Destruct_Sequence+0x11a>
	            HAL_UART_Transmit(&huart1, (uint8_t*)countdown_ascii[i][line], strlen(countdown_ascii[i][line]), HAL_MAX_DELAY);
 800184c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	3388      	adds	r3, #136	@ 0x88
 8001852:	443b      	add	r3, r7
 8001854:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8001858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	681c      	ldr	r4, [r3, #0]
 8001860:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	3388      	adds	r3, #136	@ 0x88
 8001866:	443b      	add	r3, r7
 8001868:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800186c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fcfb 	bl	8000270 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	4621      	mov	r1, r4
 8001884:	484a      	ldr	r0, [pc, #296]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001886:	f003 ff6c 	bl	8005762 <HAL_UART_Transmit>
	            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	2202      	movs	r2, #2
 8001890:	494a      	ldr	r1, [pc, #296]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 8001892:	4847      	ldr	r0, [pc, #284]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001894:	f003 ff65 	bl	8005762 <HAL_UART_Transmit>
	        for (int line = 0; line < 16; line++) {
 8001898:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800189a:	3301      	adds	r3, #1
 800189c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800189e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	ddd3      	ble.n	800184c <Self_Destruct_Sequence+0xc8>
	        }

	        // Add extra newlines for spacing between numbers
	        for (int gap = 0; gap < 3; gap++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80018a8:	e009      	b.n	80018be <Self_Destruct_Sequence+0x13a>
	            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	2202      	movs	r2, #2
 80018b0:	4942      	ldr	r1, [pc, #264]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 80018b2:	483f      	ldr	r0, [pc, #252]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 80018b4:	f003 ff55 	bl	8005762 <HAL_UART_Transmit>
	        for (int gap = 0; gap < 3; gap++) {
 80018b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ba:	3301      	adds	r3, #1
 80018bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80018be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	ddf2      	ble.n	80018aa <Self_Destruct_Sequence+0x126>
	        }

	        // Rapid buzzer pulses for each countdown number
	        for (int j = 0; j < 10; j++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80018c8:	e012      	b.n	80018f0 <Self_Destruct_Sequence+0x16c>
	            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3); // Toggle buzzer
 80018ca:	2108      	movs	r1, #8
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d0:	f003 f87a 	bl	80049c8 <HAL_GPIO_TogglePin>
	            for (volatile int k = 0; k < PULSE_DELAY; k++);  // Delay without HAL_Delay
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	e002      	b.n	80018e0 <Self_Destruct_Sequence+0x15c>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80018e6:	4293      	cmp	r3, r2
 80018e8:	ddf7      	ble.n	80018da <Self_Destruct_Sequence+0x156>
	        for (int j = 0; j < 10; j++) {
 80018ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018ec:	3301      	adds	r3, #1
 80018ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80018f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	dde9      	ble.n	80018ca <Self_Destruct_Sequence+0x146>
	    for (int i = 0; i < 3; i++) {
 80018f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018f8:	3301      	adds	r3, #1
 80018fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018fe:	2b02      	cmp	r3, #2
 8001900:	dda1      	ble.n	8001846 <Self_Destruct_Sequence+0xc2>
	        }
	    }

	    // Clear screen for explosion art
	    for (int i = 0; i < 10; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001906:	e009      	b.n	800191c <Self_Destruct_Sequence+0x198>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	2202      	movs	r2, #2
 800190e:	492b      	ldr	r1, [pc, #172]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 8001910:	4827      	ldr	r0, [pc, #156]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001912:	f003 ff26 	bl	8005762 <HAL_UART_Transmit>
	    for (int i = 0; i < 10; i++) {
 8001916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001918:	3301      	adds	r3, #1
 800191a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800191c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800191e:	2b09      	cmp	r3, #9
 8001920:	ddf2      	ble.n	8001908 <Self_Destruct_Sequence+0x184>
	    }

	    // Display ASCII explosion art
	    for (int line = 0; line < sizeof(explosion_ascii) / sizeof(explosion_ascii[0]); line++) {
 8001922:	2300      	movs	r3, #0
 8001924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001926:	e01c      	b.n	8001962 <Self_Destruct_Sequence+0x1de>
	        HAL_UART_Transmit(&huart1, (uint8_t*)explosion_ascii[line], strlen(explosion_ascii[line]), HAL_MAX_DELAY);
 8001928:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <Self_Destruct_Sequence+0x23c>)
 800192a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800192c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001930:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <Self_Destruct_Sequence+0x23c>)
 8001932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc99 	bl	8000270 <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	4621      	mov	r1, r4
 8001948:	4819      	ldr	r0, [pc, #100]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 800194a:	f003 ff0a 	bl	8005762 <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	2202      	movs	r2, #2
 8001954:	4919      	ldr	r1, [pc, #100]	@ (80019bc <Self_Destruct_Sequence+0x238>)
 8001956:	4816      	ldr	r0, [pc, #88]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001958:	f003 ff03 	bl	8005762 <HAL_UART_Transmit>
	    for (int line = 0; line < sizeof(explosion_ascii) / sizeof(explosion_ascii[0]); line++) {
 800195c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800195e:	3301      	adds	r3, #1
 8001960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001962:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001964:	2b14      	cmp	r3, #20
 8001966:	d9df      	bls.n	8001928 <Self_Destruct_Sequence+0x1a4>
	    }

	    // Final message before shutting down UART
	    char final_message[] = "SELF-DESTRUCT INITIATED! COMMUNICATION TERMINATED.\n";
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <Self_Destruct_Sequence+0x240>)
 800196a:	1d3c      	adds	r4, r7, #4
 800196c:	461d      	mov	r5, r3
 800196e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	682b      	ldr	r3, [r5, #0]
 800197c:	6023      	str	r3, [r4, #0]
	    if (HAL_UART_Transmit(&huart1, (uint8_t*)final_message, strlen(final_message), HAL_MAX_DELAY) != HAL_OK) {
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc75 	bl	8000270 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	1d39      	adds	r1, r7, #4
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 8001992:	f003 fee6 	bl	8005762 <HAL_UART_Transmit>
	    }
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2108      	movs	r1, #8
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f002 fffb 	bl	8004998 <HAL_GPIO_WritePin>

	    // Disable UART to simulate communication cut-off
	    HAL_UART_DeInit(&huart1);
 80019a2:	4803      	ldr	r0, [pc, #12]	@ (80019b0 <Self_Destruct_Sequence+0x22c>)
 80019a4:	f003 fea8 	bl	80056f8 <HAL_UART_DeInit>


	    // Infinite loop to halt the system after self-destruct
	    while (1);
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Self_Destruct_Sequence+0x224>
 80019ac:	0800be00 	.word	0x0800be00
 80019b0:	200004ac 	.word	0x200004ac
 80019b4:	0800be24 	.word	0x0800be24
 80019b8:	20000004 	.word	0x20000004
 80019bc:	0800bdfc 	.word	0x0800bdfc
 80019c0:	20000104 	.word	0x20000104
 80019c4:	0800be30 	.word	0x0800be30

080019c8 <HAL_GPIO_EXTI_Callback>:
	}
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b0b0      	sub	sp, #192	@ 0xc0
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
		if(GPIO_Pin == BUTTON_EXTI13_Pin){
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019d8:	f040 8136 	bne.w	8001c48 <HAL_GPIO_EXTI_Callback+0x280>
			// Get the current system time (in milliseconds)
			int current_time = HAL_GetTick();
 80019dc:	f002 fc08 	bl	80041f0 <HAL_GetTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);  // Ensure buzzer is off initially
 80019e6:	2200      	movs	r2, #0
 80019e8:	2108      	movs	r1, #8
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f002 ffd3 	bl	8004998 <HAL_GPIO_WritePin>
			// Check if the second press occurred within 1 second in Normal Mode
			if (mode == 0) {
 80019f2:	4b97      	ldr	r3, [pc, #604]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d135      	bne.n	8001a66 <HAL_GPIO_EXTI_Callback+0x9e>
				if ((current_time - last_press_time_0) <= 1000) {
 80019fa:	4b96      	ldr	r3, [pc, #600]	@ (8001c54 <HAL_GPIO_EXTI_Callback+0x28c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a08:	dc26      	bgt.n	8001a58 <HAL_GPIO_EXTI_Callback+0x90>
					char message1[] = "\t Entering Ghost_Busting_Mode... \r\n";       // Fixed message
 8001a0a:	4b93      	ldr	r3, [pc, #588]	@ (8001c58 <HAL_GPIO_EXTI_Callback+0x290>)
 8001a0c:	f107 040c 	add.w	r4, r7, #12
 8001a10:	461d      	mov	r5, r3
 8001a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1a:	682b      	ldr	r3, [r5, #0]
 8001a1c:	6023      	str	r3, [r4, #0]
					char message_print1[64];        // UART transmit buffer. See the comment in the line above.
					sprintf(message_print1, "%s", message1);
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a26:	498d      	ldr	r1, [pc, #564]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0x294>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fbdd 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print1, strlen(message_print1),0xFFFF); //Sending in normal mode
 8001a2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fc1c 	bl	8000270 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a44:	4886      	ldr	r0, [pc, #536]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001a46:	f003 fe8c 	bl	8005762 <HAL_UART_Transmit>

					MAG_CALIBRATE();
 8001a4a:	f7ff fb7f 	bl	800114c <MAG_CALIBRATE>
					mode = 1;
 8001a4e:	4b80      	ldr	r3, [pc, #512]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
					GhostBustingModeStartupBeep();
 8001a54:	f7ff fe5c 	bl	8001710 <GhostBustingModeStartupBeep>
//					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
//					BSP_LED_Off(LED2);
				}
				last_press_time_0 = HAL_GetTick();
 8001a58:	f002 fbca 	bl	80041f0 <HAL_GetTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b7c      	ldr	r3, [pc, #496]	@ (8001c54 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001a62:	601a      	str	r2, [r3, #0]

			}
			// Update the last press time

		}
	}
 8001a64:	e0f0      	b.n	8001c48 <HAL_GPIO_EXTI_Callback+0x280>
			else if (mode == 1) {
 8001a66:	4b7a      	ldr	r3, [pc, #488]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d17a      	bne.n	8001b64 <HAL_GPIO_EXTI_Callback+0x19c>
				if ((current_time - last_press_time_1) <= 1000){
 8001a6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a7c:	dc3c      	bgt.n	8001af8 <HAL_GPIO_EXTI_Callback+0x130>
					char message2[] = "\t Entering Normal_Mode...\r\n";       // Fixed message
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001a80:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001a84:	461d      	mov	r5, r3
 8001a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					sprintf(message_print2, "%s", message2);
 8001a92:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0x294>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f005 fba3 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print2, strlen(message_print2),0xFFFF); //Sending in normal mode
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fbe2 	bl	8000270 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f107 010c 	add.w	r1, r7, #12
 8001ab4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ab8:	4869      	ldr	r0, [pc, #420]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001aba:	f003 fe52 	bl	8005762 <HAL_UART_Transmit>
					mode = 0;
 8001abe:	4b64      	ldr	r3, [pc, #400]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
					sprintf(message_print3, "Total ghosts captured: %d\r\n", ghost_capture_count);
 8001ac4:	4b69      	ldr	r3, [pc, #420]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001acc:	4968      	ldr	r1, [pc, #416]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f005 fb8a 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print3, strlen(message_print3),0xFFFF); //Sending in normal mode
 8001ad4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fbc9 	bl	8000270 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001ae6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aea:	485d      	ldr	r0, [pc, #372]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001aec:	f003 fe39 	bl	8005762 <HAL_UART_Transmit>
					ghost_capture_count = 0;
 8001af0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e02e      	b.n	8001b56 <HAL_GPIO_EXTI_Callback+0x18e>
					char message4[] = "Ghost Captured! \r\n";       // Fixed message
 8001af8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001afa:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001afe:	461d      	mov	r5, r3
 8001b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b04:	682b      	ldr	r3, [r5, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	8022      	strh	r2, [r4, #0]
 8001b0a:	3402      	adds	r4, #2
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	7023      	strb	r3, [r4, #0]
					sprintf(message_print4, "%s", message4);
 8001b10:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001b14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b18:	4950      	ldr	r1, [pc, #320]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0x294>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f005 fb64 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print4, strlen(message_print4),0xFFFF); //Sending in normal mode
 8001b20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fba3 	bl	8000270 <strlen>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b36:	484a      	ldr	r0, [pc, #296]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001b38:	f003 fe13 	bl	8005762 <HAL_UART_Transmit>
					mode = 2;
 8001b3c:	4b44      	ldr	r3, [pc, #272]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b3e:	2202      	movs	r2, #2
 8001b40:	601a      	str	r2, [r3, #0]
					IMU_CALIBRATE();
 8001b42:	f7ff fd2d 	bl	80015a0 <IMU_CALIBRATE>
					BSP_LED_Off(LED2);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f001 fa32 	bl	8002fb0 <BSP_LED_Off>
					ghost_capture_count++;
 8001b4c:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a46      	ldr	r2, [pc, #280]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001b54:	6013      	str	r3, [r2, #0]
				last_press_time_1 = HAL_GetTick();
 8001b56:	f002 fb4b 	bl	80041f0 <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001b60:	601a      	str	r2, [r3, #0]
	}
 8001b62:	e071      	b.n	8001c48 <HAL_GPIO_EXTI_Callback+0x280>
			else if (mode == 2){
 8001b64:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d16d      	bne.n	8001c48 <HAL_GPIO_EXTI_Callback+0x280>
				if ((current_time - last_press_time_1) <= 1000){
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b7a:	dc3c      	bgt.n	8001bf6 <HAL_GPIO_EXTI_Callback+0x22e>
					char message5[] = "\t Entering Normal_Mode...\r\n";       // Fixed message
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001b7e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001b82:	461d      	mov	r5, r3
 8001b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					sprintf(message_print5, "%s", message5);
 8001b90:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	4930      	ldr	r1, [pc, #192]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0x294>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 fb24 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print5, strlen(message_print5),0xFFFF); //Sending in normal mode
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb63 	bl	8000270 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	f107 010c 	add.w	r1, r7, #12
 8001bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bb6:	482a      	ldr	r0, [pc, #168]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001bb8:	f003 fdd3 	bl	8005762 <HAL_UART_Transmit>
					mode = 0;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
					sprintf(message_print6, "Total ghosts captured: %d\r\n", ghost_capture_count);
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bca:	4929      	ldr	r1, [pc, #164]	@ (8001c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fb0b 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print6, strlen(message_print6),0xFFFF); //Sending in normal mode
 8001bd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fb4a 	bl	8000270 <strlen>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001be8:	481d      	ldr	r0, [pc, #116]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001bea:	f003 fdba 	bl	8005762 <HAL_UART_Transmit>
					ghost_capture_count = 0;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e022      	b.n	8001c3c <HAL_GPIO_EXTI_Callback+0x274>
					char message7[] = "\t Entering Ghost_Busting_Mode... \r\n";       // Fixed message
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_GPIO_EXTI_Callback+0x290>)
 8001bf8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	6023      	str	r3, [r4, #0]
					sprintf(message_print7, "%s", message7);
 8001c0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4912      	ldr	r1, [pc, #72]	@ (8001c5c <HAL_GPIO_EXTI_Callback+0x294>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f005 fae7 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print7, strlen(message_print7),0xFFFF); //Sending in normal mode
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fb26 	bl	8000270 <strlen>
 8001c24:	4603      	mov	r3, r0
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f107 010c 	add.w	r1, r7, #12
 8001c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c30:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <HAL_GPIO_EXTI_Callback+0x298>)
 8001c32:	f003 fd96 	bl	8005762 <HAL_UART_Transmit>
					mode = 1;
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_GPIO_EXTI_Callback+0x288>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
				last_press_time_1 = HAL_GetTick();
 8001c3c:	f002 fad8 	bl	80041f0 <HAL_GetTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001c46:	601a      	str	r2, [r3, #0]
	}
 8001c48:	bf00      	nop
 8001c4a:	37c0      	adds	r7, #192	@ 0xc0
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	20000434 	.word	0x20000434
 8001c54:	2000042c 	.word	0x2000042c
 8001c58:	0800be84 	.word	0x0800be84
 8001c5c:	0800be64 	.word	0x0800be64
 8001c60:	200004ac 	.word	0x200004ac
 8001c64:	20000430 	.word	0x20000430
 8001c68:	0800bea8 	.word	0x0800bea8
 8001c6c:	200004a8 	.word	0x200004a8
 8001c70:	0800be68 	.word	0x0800be68
 8001c74:	0800bec4 	.word	0x0800bec4

08001c78 <main>:
	//	char message_print1[32];        // UART transmit buffer. See the comment in the line above.
	//	sprintf(message_print1, "%s", message1);
	//	HAL_UART_Transmit(&huart1, (uint8_t*)message_print1, strlen(message_print1),0xFFFF); //Sending in normal mode

	int main(void)
	{
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c7c:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8001c80:	af0e      	add	r7, sp, #56	@ 0x38
		initialise_monitor_handles(); // for semi-hosting support (printf)
 8001c82:	f004 fd1b 	bl	80066bc <initialise_monitor_handles>
		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 8001c86:	f002 fa4f 	bl	8004128 <HAL_Init>
		/* UART initialization  */
		UART1_Init();
 8001c8a:	f000 fef3 	bl	8002a74 <UART1_Init>
		//HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);

		MX_GPIO_Init();
 8001c8e:	f000 fe93 	bl	80029b8 <MX_GPIO_Init>

		/* Peripheral initializations using BSP functions */
		BSP_ACCELERO_Init();
 8001c92:	f001 fb5f 	bl	8003354 <BSP_ACCELERO_Init>
		BSP_TSENSOR_Init();
 8001c96:	f001 fcad 	bl	80035f4 <BSP_TSENSOR_Init>
		BSP_LED_Init(LED2);
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f001 f958 	bl	8002f50 <BSP_LED_Init>
		BSP_HSENSOR_Init();
 8001ca0:	f001 fc08 	bl	80034b4 <BSP_HSENSOR_Init>
		BSP_MAGNETO_Init();
 8001ca4:	f001 fc34 	bl	8003510 <BSP_MAGNETO_Init>
		BSP_GYRO_Init();
 8001ca8:	f001 fbaa 	bl	8003400 <BSP_GYRO_Init>
		BSP_PSENSOR_Init();
 8001cac:	f001 fc74 	bl	8003598 <BSP_PSENSOR_Init>

		/* Get Start Tick*/
		int tickstart;
		tickstart = HAL_GetTick();
 8001cb0:	f002 fa9e 	bl	80041f0 <HAL_GetTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
		int tickstart1;
		tickstart1 = HAL_GetTick();
 8001cba:	f002 fa99 	bl	80041f0 <HAL_GetTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
		//Startup message
		char message1[] = "\t Entering Normal_Mode...\r\n";       // Fixed message
 8001cc4:	4b71      	ldr	r3, [pc, #452]	@ (8001e8c <main+0x214>)
 8001cc6:	f507 7406 	add.w	r4, r7, #536	@ 0x218
 8001cca:	461d      	mov	r5, r3
 8001ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		char message_print1[32];        // UART transmit buffer. See the comment in the line above.
		sprintf(message_print1, "%s", message1);
 8001cd8:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001cdc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001ce0:	496b      	ldr	r1, [pc, #428]	@ (8001e90 <main+0x218>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f005 fa80 	bl	80071e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print1, strlen(message_print1),0xFFFF); //Sending in normal mode
 8001ce8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fabf 	bl	8000270 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 8001cfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cfe:	4865      	ldr	r0, [pc, #404]	@ (8001e94 <main+0x21c>)
 8001d00:	f003 fd2f 	bl	8005762 <HAL_UART_Transmit>
		HAL_GPIO_EXTI_Callback(GPIOC);
 8001d04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d08:	f7ff fe5e 	bl	80019c8 <HAL_GPIO_EXTI_Callback>

		while(1){
			while (mode == 0){
 8001d0c:	e0b7      	b.n	8001e7e <main+0x206>
				int t1 = HAL_GetTick();
 8001d0e:	f002 fa6f 	bl	80041f0 <HAL_GetTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234

				if((t1 - tickstart)>= 1000){
 8001d18:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8001d1c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d26:	f2c0 80aa 	blt.w	8001e7e <main+0x206>
					BSP_GYRO_GetXYZ(gyro_data);
 8001d2a:	485b      	ldr	r0, [pc, #364]	@ (8001e98 <main+0x220>)
 8001d2c:	f001 fbaa 	bl	8003484 <BSP_GYRO_GetXYZ>
					gyro_data[0] = gyro_data[0]/1000;
 8001d30:	4b59      	ldr	r3, [pc, #356]	@ (8001e98 <main+0x220>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8001e9c <main+0x224>
 8001d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3e:	4b56      	ldr	r3, [pc, #344]	@ (8001e98 <main+0x220>)
 8001d40:	edc3 7a00 	vstr	s15, [r3]
					gyro_data[1] = gyro_data[1]/1000;
 8001d44:	4b54      	ldr	r3, [pc, #336]	@ (8001e98 <main+0x220>)
 8001d46:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d4a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001e9c <main+0x224>
 8001d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d52:	4b51      	ldr	r3, [pc, #324]	@ (8001e98 <main+0x220>)
 8001d54:	edc3 7a01 	vstr	s15, [r3, #4]
					gyro_data[2] = gyro_data[2]/1000;
 8001d58:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <main+0x220>)
 8001d5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001e9c <main+0x224>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	4b4c      	ldr	r3, [pc, #304]	@ (8001e98 <main+0x220>)
 8001d68:	edc3 7a02 	vstr	s15, [r3, #8]
					temp_data = GET_TEMP();
 8001d6c:	f7ff f8e4 	bl	8000f38 <GET_TEMP>
 8001d70:	eef0 7a40 	vmov.f32	s15, s0
 8001d74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea0 <main+0x228>)
 8001d76:	edc3 7a00 	vstr	s15, [r3]
					pres_data = GET_PRES();
 8001d7a:	f7ff f8fb 	bl	8000f74 <GET_PRES>
 8001d7e:	eef0 7a40 	vmov.f32	s15, s0
 8001d82:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <main+0x22c>)
 8001d84:	edc3 7a00 	vstr	s15, [r3]
					humid_data = GET_HUMID();
 8001d88:	f7ff f8e5 	bl	8000f56 <GET_HUMID>
 8001d8c:	eef0 7a40 	vmov.f32	s15, s0
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <main+0x230>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]
					accel_data = GET_ACC();
 8001d96:	f7ff fc8b 	bl	80016b0 <GET_ACC>
 8001d9a:	eef0 7a40 	vmov.f32	s15, s0
 8001d9e:	4b43      	ldr	r3, [pc, #268]	@ (8001eac <main+0x234>)
 8001da0:	edc3 7a00 	vstr	s15, [r3]
					mag_data = GET_MAG();
 8001da4:	f7ff f8f6 	bl	8000f94 <GET_MAG>
 8001da8:	eef0 7a40 	vmov.f32	s15, s0
 8001dac:	4b40      	ldr	r3, [pc, #256]	@ (8001eb0 <main+0x238>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]
					//UART MSG
					char message_print2[128];        // UART transmit buffer. See the comment in the line above.
					sprintf(message_print2, "T: %.2f °C, P: %.2f hPa, H: %.2f %%rH, A(z-axis): %.2f m/s^2, Gx : %.2f dps; Gy : %.2f dps; Gz : %.2f dps, M: %.2f gauss\r\n", temp_data, pres_data, humid_data, accel_data, gyro_data[0], gyro_data[1], gyro_data[2], mag_data);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <main+0x228>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbc6 	bl	8000548 <__aeabi_f2d>
 8001dbc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001dc0:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <main+0x22c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbbf 	bl	8000548 <__aeabi_f2d>
 8001dca:	4682      	mov	sl, r0
 8001dcc:	468b      	mov	fp, r1
 8001dce:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <main+0x230>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fbb8 	bl	8000548 <__aeabi_f2d>
 8001dd8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ddc:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <main+0x234>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbb1 	bl	8000548 <__aeabi_f2d>
 8001de6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dea:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <main+0x220>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	e9c7 0100 	strd	r0, r1, [r7]
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <main+0x220>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fba3 	bl	8000548 <__aeabi_f2d>
 8001e02:	4680      	mov	r8, r0
 8001e04:	4689      	mov	r9, r1
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <main+0x220>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb9c 	bl	8000548 <__aeabi_f2d>
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <main+0x238>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb95 	bl	8000548 <__aeabi_f2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001e26:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001e2a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 8001e2e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001e32:	ed97 7b00 	vldr	d7, [r7]
 8001e36:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e3a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e42:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e4a:	e9cd ab00 	strd	sl, fp, [sp]
 8001e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e52:	4918      	ldr	r1, [pc, #96]	@ (8001eb4 <main+0x23c>)
 8001e54:	f005 f9c8 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print2, strlen(message_print2),0xFFFF); //Sending in normal mode
 8001e58:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fa07 	bl	8000270 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001e6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e6e:	4809      	ldr	r0, [pc, #36]	@ (8001e94 <main+0x21c>)
 8001e70:	f003 fc77 	bl	8005762 <HAL_UART_Transmit>
					tickstart = HAL_GetTick();
 8001e74:	f002 f9bc 	bl	80041f0 <HAL_GetTick>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
			while (mode == 0){
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <main+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f43f af43 	beq.w	8001d0e <main+0x96>
			//               sprintf(message_print, "%d: %s", seconds_count, message1);
			//               HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF); //Sending in normal mode
				}
			}

			while (mode == 1) {
 8001e88:	e33d      	b.n	8002506 <main+0x88e>
 8001e8a:	bf00      	nop
 8001e8c:	0800bea8 	.word	0x0800bea8
 8001e90:	0800be64 	.word	0x0800be64
 8001e94:	200004ac 	.word	0x200004ac
 8001e98:	20000438 	.word	0x20000438
 8001e9c:	447a0000 	.word	0x447a0000
 8001ea0:	20000444 	.word	0x20000444
 8001ea4:	20000448 	.word	0x20000448
 8001ea8:	2000044c 	.word	0x2000044c
 8001eac:	20000450 	.word	0x20000450
 8001eb0:	20000454 	.word	0x20000454
 8001eb4:	0800bed8 	.word	0x0800bed8
 8001eb8:	20000434 	.word	0x20000434
			    int t2 = HAL_GetTick();
 8001ebc:	f002 f998 	bl	80041f0 <HAL_GetTick>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250

			    // Check infrared sensor state for imminent danger
			    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	48dd      	ldr	r0, [pc, #884]	@ (8002240 <main+0x5c8>)
 8001eca:	f002 fd4d 	bl	8004968 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			    if (sensor_state == GPIO_PIN_RESET) {
 8001ed4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d11a      	bne.n	8001f12 <main+0x29a>
			        char infrared_message[] = "Infrared sensor detected a close object! Initiating self-destruct!\r\n";
 8001edc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ee0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ee4:	4ad7      	ldr	r2, [pc, #860]	@ (8002244 <main+0x5cc>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4611      	mov	r1, r2
 8001eea:	2345      	movs	r3, #69	@ 0x45
 8001eec:	461a      	mov	r2, r3
 8001eee:	f005 faf2 	bl	80074d6 <memcpy>
			        HAL_UART_Transmit(&huart1, (uint8_t*)infrared_message, strlen(infrared_message), 0xFFFF);
 8001ef2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f9ba 	bl	8000270 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f08:	48cf      	ldr	r0, [pc, #828]	@ (8002248 <main+0x5d0>)
 8001f0a:	f003 fc2a 	bl	8005762 <HAL_UART_Transmit>
			        Self_Destruct_Sequence(); // Trigger self-destruct if the infrared sensor detects an object
 8001f0e:	f7ff fc39 	bl	8001784 <Self_Destruct_Sequence>
			    }

			    // Proceed with the regular ghost activity checks
			    if ((t2 - tickstart) >= 1000) {
 8001f12:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8001f16:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f20:	f2c0 82d7 	blt.w	80024d2 <main+0x85a>
			        float temp_data_check = GET_TEMP();
 8001f24:	f7ff f808 	bl	8000f38 <GET_TEMP>
 8001f28:	ed87 0a92 	vstr	s0, [r7, #584]	@ 0x248
			        if (temp_data_check < temp_data - 2) {
 8001f2c:	4bc7      	ldr	r3, [pc, #796]	@ (800224c <main+0x5d4>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f3a:	ed97 7a92 	vldr	s14, [r7, #584]	@ 0x248
 8001f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d530      	bpl.n	8001faa <main+0x332>
			            char message_print3[128];
			            sprintf(message_print3, "Phantasm manifestation detected! Sudden temperature drop detected! Latest reading: %.2f °C. Possible ghost nearby!\r\n", temp_data_check);
 8001f48:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001f58:	49bd      	ldr	r1, [pc, #756]	@ (8002250 <main+0x5d8>)
 8001f5a:	f005 f945 	bl	80071e8 <siprintf>
			            HAL_UART_Transmit(&huart1, (uint8_t*)message_print3, strlen(message_print3), 0xFFFF);
 8001f5e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f984 	bl	8000270 <strlen>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001f70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f74:	48b4      	ldr	r0, [pc, #720]	@ (8002248 <main+0x5d0>)
 8001f76:	f003 fbf4 	bl	8005762 <HAL_UART_Transmit>
						// Call to detect ghost direction based on magnetometer readings
    					float mag_x, mag_y, mag_z, mag_magnitude;
    					GET_MAG_DATA(&mag_x, &mag_y, &mag_z, &mag_magnitude);
 8001f7a:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 8001f7e:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001f82:	f507 71f2 	add.w	r1, r7, #484	@ 0x1e4
 8001f86:	f507 70f4 	add.w	r0, r7, #488	@ 0x1e8
 8001f8a:	f7ff f86b 	bl	8001064 <GET_MAG_DATA>
    					detect_ghost_direction(mag_x, mag_y, mag_z);
 8001f8e:	edd7 7a7a 	vldr	s15, [r7, #488]	@ 0x1e8
 8001f92:	ed97 7a79 	vldr	s14, [r7, #484]	@ 0x1e4
 8001f96:	edd7 6a78 	vldr	s13, [r7, #480]	@ 0x1e0
 8001f9a:	eeb0 1a66 	vmov.f32	s2, s13
 8001f9e:	eef0 0a47 	vmov.f32	s1, s14
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	f7ff f9b1 	bl	800130c <detect_ghost_direction>
			        }
			        float humid_data_check = GET_HUMID();
 8001faa:	f7fe ffd4 	bl	8000f56 <GET_HUMID>
 8001fae:	ed87 0a91 	vstr	s0, [r7, #580]	@ 0x244
			        if ((humid_data_check < humid_data - 5) || (humid_data_check > humid_data + 5)) {
 8001fb2:	4ba8      	ldr	r3, [pc, #672]	@ (8002254 <main+0x5dc>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fc0:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8001fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	d40d      	bmi.n	8001fea <main+0x372>
 8001fce:	4ba1      	ldr	r3, [pc, #644]	@ (8002254 <main+0x5dc>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fdc:	ed97 7a91 	vldr	s14, [r7, #580]	@ 0x244
 8001fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd30      	ble.n	800204c <main+0x3d4>
			            char message_print4[128];
			            sprintf(message_print4, "Phantasm manifestation detected! Atmospheric change detected! Latest reading: %.2f %%rH. Possible ghostly presence!\r\n", humid_data_check);
 8001fea:	f8d7 0244 	ldr.w	r0, [r7, #580]	@ 0x244
 8001fee:	f7fe faab 	bl	8000548 <__aeabi_f2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001ffa:	4997      	ldr	r1, [pc, #604]	@ (8002258 <main+0x5e0>)
 8001ffc:	f005 f8f4 	bl	80071e8 <siprintf>
			            HAL_UART_Transmit(&huart1, (uint8_t*)message_print4, strlen(message_print4), 0xFFFF);
 8002000:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe f933 	bl	8000270 <strlen>
 800200a:	4603      	mov	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002016:	488c      	ldr	r0, [pc, #560]	@ (8002248 <main+0x5d0>)
 8002018:	f003 fba3 	bl	8005762 <HAL_UART_Transmit>
						float mag_x, mag_y, mag_z, mag_magnitude;
    					GET_MAG_DATA(&mag_x, &mag_y, &mag_z, &mag_magnitude);
 800201c:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8002020:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8002024:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8002028:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 800202c:	f7ff f81a 	bl	8001064 <GET_MAG_DATA>
    					detect_ghost_direction(mag_x, mag_y, mag_z);
 8002030:	edd7 7a76 	vldr	s15, [r7, #472]	@ 0x1d8
 8002034:	ed97 7a75 	vldr	s14, [r7, #468]	@ 0x1d4
 8002038:	edd7 6a74 	vldr	s13, [r7, #464]	@ 0x1d0
 800203c:	eeb0 1a66 	vmov.f32	s2, s13
 8002040:	eef0 0a47 	vmov.f32	s1, s14
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f7ff f960 	bl	800130c <detect_ghost_direction>
			        }
			        float pres_data_check = GET_PRES();
 800204c:	f7fe ff92 	bl	8000f74 <GET_PRES>
 8002050:	ed87 0a90 	vstr	s0, [r7, #576]	@ 0x240
			        if ((pres_data_check < pres_data - 5) || (pres_data_check > pres_data + 5)) {
 8002054:	4b81      	ldr	r3, [pc, #516]	@ (800225c <main+0x5e4>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800205e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002062:	ed97 7a90 	vldr	s14, [r7, #576]	@ 0x240
 8002066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	d40d      	bmi.n	800208c <main+0x414>
 8002070:	4b7a      	ldr	r3, [pc, #488]	@ (800225c <main+0x5e4>)
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800207a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800207e:	ed97 7a90 	vldr	s14, [r7, #576]	@ 0x240
 8002082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	dd30      	ble.n	80020ee <main+0x476>
			            char message_print5[128];
			            sprintf(message_print5, "Spectre activity detected! Pressure anomaly detected! Latest reading: %.2f hPa. Ghost activity suspected.\r\n", pres_data_check);
 800208c:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8002090:	f7fe fa5a 	bl	8000548 <__aeabi_f2d>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800209c:	4970      	ldr	r1, [pc, #448]	@ (8002260 <main+0x5e8>)
 800209e:	f005 f8a3 	bl	80071e8 <siprintf>
			            HAL_UART_Transmit(&huart1, (uint8_t*)message_print5, strlen(message_print5), 0xFFFF);
 80020a2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f8e2 	bl	8000270 <strlen>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80020b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020b8:	4863      	ldr	r0, [pc, #396]	@ (8002248 <main+0x5d0>)
 80020ba:	f003 fb52 	bl	8005762 <HAL_UART_Transmit>
						float mag_x, mag_y, mag_z, mag_magnitude;
    					GET_MAG_DATA(&mag_x, &mag_y, &mag_z, &mag_magnitude);
 80020be:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80020c2:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80020c6:	f507 71e2 	add.w	r1, r7, #452	@ 0x1c4
 80020ca:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 80020ce:	f7fe ffc9 	bl	8001064 <GET_MAG_DATA>
    					detect_ghost_direction(mag_x, mag_y, mag_z);
 80020d2:	edd7 7a72 	vldr	s15, [r7, #456]	@ 0x1c8
 80020d6:	ed97 7a71 	vldr	s14, [r7, #452]	@ 0x1c4
 80020da:	edd7 6a70 	vldr	s13, [r7, #448]	@ 0x1c0
 80020de:	eeb0 1a66 	vmov.f32	s2, s13
 80020e2:	eef0 0a47 	vmov.f32	s1, s14
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f7ff f90f 	bl	800130c <detect_ghost_direction>
			        }
			        float accel_data_check = GET_ACC();
 80020ee:	f7ff fadf 	bl	80016b0 <GET_ACC>
 80020f2:	ed87 0a8f 	vstr	s0, [r7, #572]	@ 0x23c
			        float gyro_data_check[3];
			        BSP_GYRO_GetXYZ(gyro_data_check);
 80020f6:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 f9c2 	bl	8003484 <BSP_GYRO_GetXYZ>
			        gyro_data_check[0] = gyro_data_check[0] / 1000;
 8002100:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 8002104:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8002264 <main+0x5ec>
 8002108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210c:	edc7 7a7b 	vstr	s15, [r7, #492]	@ 0x1ec
			        gyro_data_check[1] = gyro_data_check[1] / 1000;
 8002110:	ed97 7a7c 	vldr	s14, [r7, #496]	@ 0x1f0
 8002114:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8002264 <main+0x5ec>
 8002118:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800211c:	edc7 7a7c 	vstr	s15, [r7, #496]	@ 0x1f0
			        gyro_data_check[2] = gyro_data_check[2] / 1000;
 8002120:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8002124:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002264 <main+0x5ec>
 8002128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800212c:	edc7 7a7d 	vstr	s15, [r7, #500]	@ 0x1f4
			        if ((accel_data_check < accel_data - 0.5) || (accel_data_check > accel_data + 0.5) ||
 8002130:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8002134:	f7fe fa08 	bl	8000548 <__aeabi_f2d>
 8002138:	4604      	mov	r4, r0
 800213a:	460d      	mov	r5, r1
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <main+0x5f0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa01 	bl	8000548 <__aeabi_f2d>
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b48      	ldr	r3, [pc, #288]	@ (800226c <main+0x5f4>)
 800214c:	f7fe f89c 	bl	8000288 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe fcc0 	bl	8000adc <__aeabi_dcmplt>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 8088 	bne.w	8002274 <main+0x5fc>
 8002164:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8002168:	f7fe f9ee 	bl	8000548 <__aeabi_f2d>
 800216c:	4604      	mov	r4, r0
 800216e:	460d      	mov	r5, r1
 8002170:	4b3d      	ldr	r3, [pc, #244]	@ (8002268 <main+0x5f0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f9e7 	bl	8000548 <__aeabi_f2d>
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <main+0x5f4>)
 8002180:	f7fe f884 	bl	800028c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe fcc4 	bl	8000b18 <__aeabi_dcmpgt>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d16e      	bne.n	8002274 <main+0x5fc>
			            (gyro_data_check[0] < gyro_data[0] - 5) || (gyro_data_check[0] > gyro_data[0] + 5) ||
 8002196:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 800219a:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <main+0x5f8>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80021a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
			        if ((accel_data_check < accel_data - 0.5) || (accel_data_check > accel_data + 0.5) ||
 80021a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	d460      	bmi.n	8002274 <main+0x5fc>
			            (gyro_data_check[0] < gyro_data[0] - 5) || (gyro_data_check[0] > gyro_data[0] + 5) ||
 80021b2:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 80021b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <main+0x5f8>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80021c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	dc52      	bgt.n	8002274 <main+0x5fc>
			            (gyro_data_check[1] < gyro_data[1] - 5) || (gyro_data_check[1] > gyro_data[1] + 5) ||
 80021ce:	ed97 7a7c 	vldr	s14, [r7, #496]	@ 0x1f0
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <main+0x5f8>)
 80021d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021d8:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80021dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
			            (gyro_data_check[0] < gyro_data[0] - 5) || (gyro_data_check[0] > gyro_data[0] + 5) ||
 80021e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d444      	bmi.n	8002274 <main+0x5fc>
			            (gyro_data_check[1] < gyro_data[1] - 5) || (gyro_data_check[1] > gyro_data[1] + 5) ||
 80021ea:	ed97 7a7c 	vldr	s14, [r7, #496]	@ 0x1f0
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <main+0x5f8>)
 80021f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80021f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	dc36      	bgt.n	8002274 <main+0x5fc>
			            (gyro_data_check[2] < gyro_data[2] - 5) || (gyro_data_check[2] > gyro_data[2] + 5))
 8002206:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <main+0x5f8>)
 800220c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002210:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002214:	ee77 7ae6 	vsub.f32	s15, s15, s13
			            (gyro_data_check[1] < gyro_data[1] - 5) || (gyro_data_check[1] > gyro_data[1] + 5) ||
 8002218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002220:	d428      	bmi.n	8002274 <main+0x5fc>
			            (gyro_data_check[2] < gyro_data[2] - 5) || (gyro_data_check[2] > gyro_data[2] + 5))
 8002222:	ed97 7a7d 	vldr	s14, [r7, #500]	@ 0x1f4
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <main+0x5f8>)
 8002228:	edd3 7a02 	vldr	s15, [r3, #8]
 800222c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	dd68      	ble.n	8002310 <main+0x698>
 800223e:	e019      	b.n	8002274 <main+0x5fc>
 8002240:	48000400 	.word	0x48000400
 8002244:	0800c1b8 	.word	0x0800c1b8
 8002248:	200004ac 	.word	0x200004ac
 800224c:	20000444 	.word	0x20000444
 8002250:	0800bf54 	.word	0x0800bf54
 8002254:	2000044c 	.word	0x2000044c
 8002258:	0800bfcc 	.word	0x0800bfcc
 800225c:	20000448 	.word	0x20000448
 8002260:	0800c044 	.word	0x0800c044
 8002264:	447a0000 	.word	0x447a0000
 8002268:	20000450 	.word	0x20000450
 800226c:	3fe00000 	.word	0x3fe00000
 8002270:	20000438 	.word	0x20000438
						{
			            char message_print6[256];
			            sprintf(message_print6, "Poltergeist detected! Device orientation compromised! Latest reading: A: %.2f m/s^2 / Gx : %.2f dps; Gy : %.2f dps; Gz : %.2f dps. Possible ghost interaction!\r\n", accel_data_check, gyro_data_check[0], gyro_data_check[1], gyro_data_check[2]);
 8002274:	f8d7 023c 	ldr.w	r0, [r7, #572]	@ 0x23c
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	4682      	mov	sl, r0
 800227e:	468b      	mov	fp, r1
 8002280:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	4604      	mov	r4, r0
 800228c:	460d      	mov	r5, r1
 800228e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	4680      	mov	r8, r0
 800229a:	4689      	mov	r9, r1
 800229c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80022ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022b6:	e9cd 4500 	strd	r4, r5, [sp]
 80022ba:	4652      	mov	r2, sl
 80022bc:	465b      	mov	r3, fp
 80022be:	4995      	ldr	r1, [pc, #596]	@ (8002514 <main+0x89c>)
 80022c0:	f004 ff92 	bl	80071e8 <siprintf>
			            HAL_UART_Transmit(&huart1, (uint8_t*)message_print6, strlen(message_print6), 0xFFFF);
 80022c4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fd ffd1 	bl	8000270 <strlen>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80022d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022da:	488f      	ldr	r0, [pc, #572]	@ (8002518 <main+0x8a0>)
 80022dc:	f003 fa41 	bl	8005762 <HAL_UART_Transmit>
						float mag_x, mag_y, mag_z, mag_magnitude;
    					GET_MAG_DATA(&mag_x, &mag_y, &mag_z, &mag_magnitude);
 80022e0:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 80022e4:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 80022e8:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80022ec:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80022f0:	f7fe feb8 	bl	8001064 <GET_MAG_DATA>
    					detect_ghost_direction(mag_x, mag_y, mag_z);
 80022f4:	edd7 7a6e 	vldr	s15, [r7, #440]	@ 0x1b8
 80022f8:	ed97 7a6d 	vldr	s14, [r7, #436]	@ 0x1b4
 80022fc:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 8002300:	eeb0 1a66 	vmov.f32	s2, s13
 8002304:	eef0 0a47 	vmov.f32	s1, s14
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	f7fe fffe 	bl	800130c <detect_ghost_direction>
			        }

			        // Check for magnetic field anomalies
			        float mag_data_check = GET_MAG();
 8002310:	f7fe fe40 	bl	8000f94 <GET_MAG>
 8002314:	ed87 0a8e 	vstr	s0, [r7, #568]	@ 0x238
			                if(mag_data_check < 300){
 8002318:	edd7 7a8e 	vldr	s15, [r7, #568]	@ 0x238
 800231c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800251c <main+0x8a4>
 8002320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	d503      	bpl.n	8002332 <main+0x6ba>
			                  blink_freq = 2;
 800232a:	4b7d      	ldr	r3, [pc, #500]	@ (8002520 <main+0x8a8>)
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e084      	b.n	800243c <main+0x7c4>
			                }
			                else{
			                  if(mag_data_check > 5000){
 8002332:	edd7 7a8e 	vldr	s15, [r7, #568]	@ 0x238
 8002336:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8002524 <main+0x8ac>
 800233a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	dd03      	ble.n	800234c <main+0x6d4>
			                    blink_freq = 16;
 8002344:	4b76      	ldr	r3, [pc, #472]	@ (8002520 <main+0x8a8>)
 8002346:	2210      	movs	r2, #16
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e002      	b.n	8002352 <main+0x6da>
			                  }
			                  else{
			                    blink_freq = 8;
 800234c:	4b74      	ldr	r3, [pc, #464]	@ (8002520 <main+0x8a8>)
 800234e:	2208      	movs	r2, #8
 8002350:	601a      	str	r2, [r3, #0]
			                  }
			                  char message7[] = "Ghost detected in! Prepare to bust!\r\n";
 8002352:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002356:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800235a:	4a73      	ldr	r2, [pc, #460]	@ (8002528 <main+0x8b0>)
 800235c:	461c      	mov	r4, r3
 800235e:	4615      	mov	r5, r2
 8002360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002368:	e895 0003 	ldmia.w	r5, {r0, r1}
 800236c:	6020      	str	r0, [r4, #0]
 800236e:	3404      	adds	r4, #4
 8002370:	8021      	strh	r1, [r4, #0]
			                  char message_print7[64];  // UART transmit buffer for the fixed message
			                  sprintf(message_print7, "%s", message7);
 8002372:	f107 0220 	add.w	r2, r7, #32
 8002376:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800237a:	496c      	ldr	r1, [pc, #432]	@ (800252c <main+0x8b4>)
 800237c:	4618      	mov	r0, r3
 800237e:	f004 ff33 	bl	80071e8 <siprintf>
			                  HAL_UART_Transmit(&huart1, (uint8_t*)message_print7, strlen(message_print7), 0xFFFF);  // Send the "Ghost detected" message
 8002382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ff72 	bl	8000270 <strlen>
 800238c:	4603      	mov	r3, r0
 800238e:	b29a      	uxth	r2, r3
 8002390:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002398:	485f      	ldr	r0, [pc, #380]	@ (8002518 <main+0x8a0>)
 800239a:	f003 f9e2 	bl	8005762 <HAL_UART_Transmit>

			                  // Get detailed magnetometer data to detect direction
			                  float mag_x, mag_y, mag_z, mag_magnitude;
			                  GET_MAG_DATA(&mag_x, &mag_y, &mag_z, &mag_magnitude);
 800239e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80023a2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80023a6:	f507 71d2 	add.w	r1, r7, #420	@ 0x1a4
 80023aa:	f507 70d4 	add.w	r0, r7, #424	@ 0x1a8
 80023ae:	f7fe fe59 	bl	8001064 <GET_MAG_DATA>

			                  // Transmit the latest magnetometer readings
			                  char message_magneto[128];  // UART transmit buffer for the magnetometer readings
			                  sprintf(message_magneto, "Magnetometer readings: Mag X: %.2f, Mag Y: %.2f, Mag Z: %.2f, Magnitude: %.2f\r\n", mag_x, mag_y, mag_z, mag_magnitude);
 80023b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	4682      	mov	sl, r0
 80023be:	468b      	mov	fp, r1
 80023c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
 80023ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8b8 	bl	8000548 <__aeabi_f2d>
 80023d8:	4680      	mov	r8, r0
 80023da:	4689      	mov	r9, r1
 80023dc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8b1 	bl	8000548 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80023ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023f6:	e9cd 4500 	strd	r4, r5, [sp]
 80023fa:	4652      	mov	r2, sl
 80023fc:	465b      	mov	r3, fp
 80023fe:	494c      	ldr	r1, [pc, #304]	@ (8002530 <main+0x8b8>)
 8002400:	f004 fef2 	bl	80071e8 <siprintf>
			                  HAL_UART_Transmit(&huart1, (uint8_t*)message_magneto, strlen(message_magneto), 0xFFFF);
 8002404:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002408:	4618      	mov	r0, r3
 800240a:	f7fd ff31 	bl	8000270 <strlen>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800241a:	483f      	ldr	r0, [pc, #252]	@ (8002518 <main+0x8a0>)
 800241c:	f003 f9a1 	bl	8005762 <HAL_UART_Transmit>

			                  // Detect direction based on magnetometer data
			                  detect_ghost_direction(mag_x, mag_y, mag_z);
 8002420:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002424:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8002428:	edd7 6a68 	vldr	s13, [r7, #416]	@ 0x1a0
 800242c:	eeb0 1a66 	vmov.f32	s2, s13
 8002430:	eef0 0a47 	vmov.f32	s1, s14
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	f7fe ff68 	bl	800130c <detect_ghost_direction>
			                }



			        // Self-destruct if ghost activity is extreme
			        if (mag_data_check > 5000 || pres_data_check > (pres_data + 5) || temp_data_check < (temp_data - 5)) {
 800243c:	edd7 7a8e 	vldr	s15, [r7, #568]	@ 0x238
 8002440:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8002524 <main+0x8ac>
 8002444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	dc1b      	bgt.n	8002486 <main+0x80e>
 800244e:	4b39      	ldr	r3, [pc, #228]	@ (8002534 <main+0x8bc>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245c:	ed97 7a90 	vldr	s14, [r7, #576]	@ 0x240
 8002460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dc0d      	bgt.n	8002486 <main+0x80e>
 800246a:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <main+0x8c0>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002478:	ed97 7a92 	vldr	s14, [r7, #584]	@ 0x248
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d520      	bpl.n	80024c8 <main+0x850>
			            char extreme_message[] = "EXTREME GHOST ACTIVITY DETECTED! INITIATING SELF-DESTRUCT!\r\n";
 8002486:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800248a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800248e:	4a2b      	ldr	r2, [pc, #172]	@ (800253c <main+0x8c4>)
 8002490:	461c      	mov	r4, r3
 8002492:	4615      	mov	r5, r2
 8002494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800249c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800249e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024a4:	c407      	stmia	r4!, {r0, r1, r2}
 80024a6:	7023      	strb	r3, [r4, #0]
			            HAL_UART_Transmit(&huart1, (uint8_t*)extreme_message, strlen(extreme_message), 0xFFFF);
 80024a8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd fedf 	bl	8000270 <strlen>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80024ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024be:	4816      	ldr	r0, [pc, #88]	@ (8002518 <main+0x8a0>)
 80024c0:	f003 f94f 	bl	8005762 <HAL_UART_Transmit>
			            // Initiating Self-Destruct Sequence
			            Self_Destruct_Sequence();
 80024c4:	f7ff f95e 	bl	8001784 <Self_Destruct_Sequence>
			        }

			        tickstart = HAL_GetTick();
 80024c8:	f001 fe92 	bl	80041f0 <HAL_GetTick>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
			    }

			    // LED and buzzer toggling
			    if ((t2 - tickstart1) >= (1000 / blink_freq)) {
 80024d2:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80024d6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <main+0x8a8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024e4:	fb91 f3f3 	sdiv	r3, r1, r3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	db0c      	blt.n	8002506 <main+0x88e>
			        BSP_LED_Toggle(LED2);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f000 fd75 	bl	8002fdc <BSP_LED_Toggle>
			        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);  // Toggle buzzer
 80024f2:	2108      	movs	r1, #8
 80024f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024f8:	f002 fa66 	bl	80049c8 <HAL_GPIO_TogglePin>
			        tickstart1 = HAL_GetTick();
 80024fc:	f001 fe78 	bl	80041f0 <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
 8002502:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
			while (mode == 1) {
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <main+0x8c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f43f acd6 	beq.w	8001ebc <main+0x244>
			    }
			}

			while (mode == 2){
 8002510:	e238      	b.n	8002984 <main+0xd0c>
 8002512:	bf00      	nop
 8002514:	0800c0b0 	.word	0x0800c0b0
 8002518:	200004ac 	.word	0x200004ac
 800251c:	43960000 	.word	0x43960000
 8002520:	20000000 	.word	0x20000000
 8002524:	459c4000 	.word	0x459c4000
 8002528:	0800c200 	.word	0x0800c200
 800252c:	0800be64 	.word	0x0800be64
 8002530:	0800c154 	.word	0x0800c154
 8002534:	20000448 	.word	0x20000448
 8002538:	20000444 	.word	0x20000444
 800253c:	0800c228 	.word	0x0800c228
 8002540:	20000434 	.word	0x20000434
				int t3 = HAL_GetTick();
 8002544:	f001 fe54 	bl	80041f0 <HAL_GetTick>
 8002548:	4603      	mov	r3, r0
 800254a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
	//
	//			if((t3 - tickstart)>= 1000){
				if((t3 - tickstart)>= 1/IMU_FREQ){
 800254e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8002552:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f2c0 8213 	blt.w	8002984 <main+0xd0c>
					int16_t accel_data_i16[3] = { 0 };
 800255e:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	809a      	strh	r2, [r3, #4]
					float accel_data[3];
					BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8002568:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 800256c:	4618      	mov	r0, r3
 800256e:	f000 ff2f 	bl	80033d0 <BSP_ACCELERO_AccGetXYZ>
					accel_data[0] = ((float)accel_data_i16[0] - accel_offset_X) * (9.8/1000.0f);
 8002572:	f9b7 3194 	ldrsh.w	r3, [r7, #404]	@ 0x194
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257e:	4bd8      	ldr	r3, [pc, #864]	@ (80028e0 <main+0xc68>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002588:	ee17 0a90 	vmov	r0, s15
 800258c:	f7fd ffdc 	bl	8000548 <__aeabi_f2d>
 8002590:	a3c9      	add	r3, pc, #804	@ (adr r3, 80028b8 <main+0xc40>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f82f 	bl	80005f8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fb01 	bl	8000ba8 <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
					accel_data[1] = ((float)accel_data_i16[1] - accel_offset_Y) * (9.8/1000.0f);
 80025ac:	f9b7 3196 	ldrsh.w	r3, [r7, #406]	@ 0x196
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b8:	4bca      	ldr	r3, [pc, #808]	@ (80028e4 <main+0xc6c>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	ee17 0a90 	vmov	r0, s15
 80025c6:	f7fd ffbf 	bl	8000548 <__aeabi_f2d>
 80025ca:	a3bb      	add	r3, pc, #748	@ (adr r3, 80028b8 <main+0xc40>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f812 	bl	80005f8 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fae4 	bl	8000ba8 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
					accel_data[2] = ((float)accel_data_i16[2] - accel_offset_X) * (9.8/1000.0f);
 80025e6:	f9b7 3198 	ldrsh.w	r3, [r7, #408]	@ 0x198
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f2:	4bbb      	ldr	r3, [pc, #748]	@ (80028e0 <main+0xc68>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	ee17 0a90 	vmov	r0, s15
 8002600:	f7fd ffa2 	bl	8000548 <__aeabi_f2d>
 8002604:	a3ac      	add	r3, pc, #688	@ (adr r3, 80028b8 <main+0xc40>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fd fff5 	bl	80005f8 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fe fac7 	bl	8000ba8 <__aeabi_d2f>
 800261a:	4603      	mov	r3, r0
 800261c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
					BSP_GYRO_GetXYZ(gyro_data);
 8002620:	48b1      	ldr	r0, [pc, #708]	@ (80028e8 <main+0xc70>)
 8002622:	f000 ff2f 	bl	8003484 <BSP_GYRO_GetXYZ>
					gyro_data[0] = (gyro_data[0] - gyro_offset_X)/1000;
 8002626:	4bb0      	ldr	r3, [pc, #704]	@ (80028e8 <main+0xc70>)
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	4baf      	ldr	r3, [pc, #700]	@ (80028ec <main+0xc74>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002636:	eddf 6aae 	vldr	s13, [pc, #696]	@ 80028f0 <main+0xc78>
 800263a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800263e:	4baa      	ldr	r3, [pc, #680]	@ (80028e8 <main+0xc70>)
 8002640:	edc3 7a00 	vstr	s15, [r3]
					gyro_data[1] = (gyro_data[1] - gyro_offset_Y)/1000;
 8002644:	4ba8      	ldr	r3, [pc, #672]	@ (80028e8 <main+0xc70>)
 8002646:	ed93 7a01 	vldr	s14, [r3, #4]
 800264a:	4baa      	ldr	r3, [pc, #680]	@ (80028f4 <main+0xc7c>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002654:	eddf 6aa6 	vldr	s13, [pc, #664]	@ 80028f0 <main+0xc78>
 8002658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265c:	4ba2      	ldr	r3, [pc, #648]	@ (80028e8 <main+0xc70>)
 800265e:	edc3 7a01 	vstr	s15, [r3, #4]
					gyro_data[2] = (gyro_data[2] - gyro_offset_Z)/1000;
 8002662:	4ba1      	ldr	r3, [pc, #644]	@ (80028e8 <main+0xc70>)
 8002664:	ed93 7a02 	vldr	s14, [r3, #8]
 8002668:	4ba3      	ldr	r3, [pc, #652]	@ (80028f8 <main+0xc80>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002672:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 80028f0 <main+0xc78>
 8002676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267a:	4b9b      	ldr	r3, [pc, #620]	@ (80028e8 <main+0xc70>)
 800267c:	edc3 7a02 	vstr	s15, [r3, #8]

					// angles based on accelerometer
					ay = atan2(accel_data[0], sqrt( pow(accel_data[1], 2) + pow(accel_data[2], 2))) * 180 / M_PI;
 8002680:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff5f 	bl	8000548 <__aeabi_f2d>
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff58 	bl	8000548 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	ed9f 1b88 	vldr	d1, [pc, #544]	@ 80028c0 <main+0xc48>
 80026a0:	ec43 2b10 	vmov	d0, r2, r3
 80026a4:	f006 fece 	bl	8009444 <pow>
 80026a8:	ec59 8b10 	vmov	r8, r9, d0
 80026ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff49 	bl	8000548 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	ed9f 1b81 	vldr	d1, [pc, #516]	@ 80028c0 <main+0xc48>
 80026be:	ec43 2b10 	vmov	d0, r2, r3
 80026c2:	f006 febf 	bl	8009444 <pow>
 80026c6:	ec53 2b10 	vmov	r2, r3, d0
 80026ca:	4640      	mov	r0, r8
 80026cc:	4649      	mov	r1, r9
 80026ce:	f7fd fddd 	bl	800028c <__adddf3>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	ec43 2b17 	vmov	d7, r2, r3
 80026da:	eeb0 0a47 	vmov.f32	s0, s14
 80026de:	eef0 0a67 	vmov.f32	s1, s15
 80026e2:	f006 ff1f 	bl	8009524 <sqrt>
 80026e6:	eeb0 7a40 	vmov.f32	s14, s0
 80026ea:	eef0 7a60 	vmov.f32	s15, s1
 80026ee:	eeb0 1a47 	vmov.f32	s2, s14
 80026f2:	eef0 1a67 	vmov.f32	s3, s15
 80026f6:	ec45 4b10 	vmov	d0, r4, r5
 80026fa:	f006 fea1 	bl	8009440 <atan2>
 80026fe:	ec51 0b10 	vmov	r0, r1, d0
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b7d      	ldr	r3, [pc, #500]	@ (80028fc <main+0xc84>)
 8002708:	f7fd ff76 	bl	80005f8 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	a36c      	add	r3, pc, #432	@ (adr r3, 80028c8 <main+0xc50>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fe f897 	bl	800084c <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4977      	ldr	r1, [pc, #476]	@ (8002900 <main+0xc88>)
 8002724:	e9c1 2300 	strd	r2, r3, [r1]
					ax = atan2(accel_data[1], sqrt( pow(accel_data[0], 2) + pow(accel_data[2], 2))) * 180 / M_PI;
 8002728:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff0b 	bl	8000548 <__aeabi_f2d>
 8002732:	4604      	mov	r4, r0
 8002734:	460d      	mov	r5, r1
 8002736:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd ff04 	bl	8000548 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80028c0 <main+0xc48>
 8002748:	ec43 2b10 	vmov	d0, r2, r3
 800274c:	f006 fe7a 	bl	8009444 <pow>
 8002750:	ec59 8b10 	vmov	r8, r9, d0
 8002754:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd fef5 	bl	8000548 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	ed9f 1b57 	vldr	d1, [pc, #348]	@ 80028c0 <main+0xc48>
 8002766:	ec43 2b10 	vmov	d0, r2, r3
 800276a:	f006 fe6b 	bl	8009444 <pow>
 800276e:	ec53 2b10 	vmov	r2, r3, d0
 8002772:	4640      	mov	r0, r8
 8002774:	4649      	mov	r1, r9
 8002776:	f7fd fd89 	bl	800028c <__adddf3>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	ec43 2b17 	vmov	d7, r2, r3
 8002782:	eeb0 0a47 	vmov.f32	s0, s14
 8002786:	eef0 0a67 	vmov.f32	s1, s15
 800278a:	f006 fecb 	bl	8009524 <sqrt>
 800278e:	eeb0 7a40 	vmov.f32	s14, s0
 8002792:	eef0 7a60 	vmov.f32	s15, s1
 8002796:	eeb0 1a47 	vmov.f32	s2, s14
 800279a:	eef0 1a67 	vmov.f32	s3, s15
 800279e:	ec45 4b10 	vmov	d0, r4, r5
 80027a2:	f006 fe4d 	bl	8009440 <atan2>
 80027a6:	ec51 0b10 	vmov	r0, r1, d0
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b53      	ldr	r3, [pc, #332]	@ (80028fc <main+0xc84>)
 80027b0:	f7fd ff22 	bl	80005f8 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	a342      	add	r3, pc, #264	@ (adr r3, 80028c8 <main+0xc50>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f7fe f843 	bl	800084c <__aeabi_ddiv>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	494e      	ldr	r1, [pc, #312]	@ (8002904 <main+0xc8c>)
 80027cc:	e9c1 2300 	strd	r2, r3, [r1]

					gx = gx + gyro_data[0]/IMU_FREQ;
 80027d0:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <main+0xc70>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80027da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027de:	ee16 0a90 	vmov	r0, s13
 80027e2:	f7fd feb1 	bl	8000548 <__aeabi_f2d>
 80027e6:	4b48      	ldr	r3, [pc, #288]	@ (8002908 <main+0xc90>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fd4e 	bl	800028c <__adddf3>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4944      	ldr	r1, [pc, #272]	@ (8002908 <main+0xc90>)
 80027f6:	e9c1 2300 	strd	r2, r3, [r1]
					gy = gy - gyro_data[1]/IMU_FREQ;
 80027fa:	4b44      	ldr	r3, [pc, #272]	@ (800290c <main+0xc94>)
 80027fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002800:	4b39      	ldr	r3, [pc, #228]	@ (80028e8 <main+0xc70>)
 8002802:	edd3 7a01 	vldr	s15, [r3, #4]
 8002806:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800280a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800280e:	ee16 0a90 	vmov	r0, s13
 8002812:	f7fd fe99 	bl	8000548 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd fd33 	bl	8000288 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4939      	ldr	r1, [pc, #228]	@ (800290c <main+0xc94>)
 8002828:	e9c1 2300 	strd	r2, r3, [r1]
					gz = gz + gyro_data[2]/IMU_FREQ;
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <main+0xc70>)
 800282e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002832:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8002836:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800283a:	ee16 0a90 	vmov	r0, s13
 800283e:	f7fd fe83 	bl	8000548 <__aeabi_f2d>
 8002842:	4b33      	ldr	r3, [pc, #204]	@ (8002910 <main+0xc98>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fd20 	bl	800028c <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	492f      	ldr	r1, [pc, #188]	@ (8002910 <main+0xc98>)
 8002852:	e9c1 2300 	strd	r2, r3, [r1]
					// complementary filter
					// tau = DT*(A)/(1-A)
					// = 0.48sec
					gx = gx * 0.96 + ax * 0.04;
 8002856:	4b2c      	ldr	r3, [pc, #176]	@ (8002908 <main+0xc90>)
 8002858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800285c:	a31c      	add	r3, pc, #112	@ (adr r3, 80028d0 <main+0xc58>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd fec9 	bl	80005f8 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4614      	mov	r4, r2
 800286c:	461d      	mov	r5, r3
 800286e:	4b25      	ldr	r3, [pc, #148]	@ (8002904 <main+0xc8c>)
 8002870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002874:	a318      	add	r3, pc, #96	@ (adr r3, 80028d8 <main+0xc60>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	f7fd febd 	bl	80005f8 <__aeabi_dmul>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4620      	mov	r0, r4
 8002884:	4629      	mov	r1, r5
 8002886:	f7fd fd01 	bl	800028c <__adddf3>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	491e      	ldr	r1, [pc, #120]	@ (8002908 <main+0xc90>)
 8002890:	e9c1 2300 	strd	r2, r3, [r1]
					gy = gy * 0.96 + ay * 0.04;
 8002894:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <main+0xc94>)
 8002896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289a:	a30d      	add	r3, pc, #52	@ (adr r3, 80028d0 <main+0xc58>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd feaa 	bl	80005f8 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	461d      	mov	r5, r3
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <main+0xc88>)
 80028ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b2:	e02f      	b.n	8002914 <main+0xc9c>
 80028b4:	f3af 8000 	nop.w
 80028b8:	bc01a36f 	.word	0xbc01a36f
 80028bc:	3f841205 	.word	0x3f841205
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40000000 	.word	0x40000000
 80028c8:	54442d18 	.word	0x54442d18
 80028cc:	400921fb 	.word	0x400921fb
 80028d0:	eb851eb8 	.word	0xeb851eb8
 80028d4:	3feeb851 	.word	0x3feeb851
 80028d8:	47ae147b 	.word	0x47ae147b
 80028dc:	3fa47ae1 	.word	0x3fa47ae1
 80028e0:	20000470 	.word	0x20000470
 80028e4:	20000474 	.word	0x20000474
 80028e8:	20000438 	.word	0x20000438
 80028ec:	20000464 	.word	0x20000464
 80028f0:	447a0000 	.word	0x447a0000
 80028f4:	20000468 	.word	0x20000468
 80028f8:	2000046c 	.word	0x2000046c
 80028fc:	40668000 	.word	0x40668000
 8002900:	20000488 	.word	0x20000488
 8002904:	20000480 	.word	0x20000480
 8002908:	20000490 	.word	0x20000490
 800290c:	20000498 	.word	0x20000498
 8002910:	200004a0 	.word	0x200004a0
 8002914:	a326      	add	r3, pc, #152	@ (adr r3, 80029b0 <main+0xd38>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fe6d 	bl	80005f8 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd fcb1 	bl	800028c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	491a      	ldr	r1, [pc, #104]	@ (8002998 <main+0xd20>)
 8002930:	e9c1 2300 	strd	r2, r3, [r1]
		//			gx = gx * 0.85 + ax * 0.15;
		//			gy = gy * 0.85 + ay * 0.15;

					//UART MSG
					char message_print[128];        // UART transmit buffer. See the comment in the line above.
					sprintf(message_print, "%.4f, %.4f, %.4f\r\n", gx, gy, gz);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <main+0xd24>)
 8002936:	e9d3 4500 	ldrd	r4, r5, [r3]
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <main+0xd20>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	4917      	ldr	r1, [pc, #92]	@ (80029a0 <main+0xd28>)
 8002942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002946:	f107 0688 	add.w	r6, r7, #136	@ 0x88
 800294a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800294e:	e9cd 2300 	strd	r2, r3, [sp]
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	4913      	ldr	r1, [pc, #76]	@ (80029a4 <main+0xd2c>)
 8002958:	4630      	mov	r0, r6
 800295a:	f004 fc45 	bl	80071e8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print),0xFFFF); //Sending in normal mode
 800295e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fc84 	bl	8000270 <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	b29a      	uxth	r2, r3
 800296c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002970:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002974:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <main+0xd30>)
 8002976:	f002 fef4 	bl	8005762 <HAL_UART_Transmit>
					tickstart = HAL_GetTick();
 800297a:	f001 fc39 	bl	80041f0 <HAL_GetTick>
 800297e:	4603      	mov	r3, r0
 8002980:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
			while (mode == 2){
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <main+0xd34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	f43f addb 	beq.w	8002544 <main+0x8cc>
			while (mode == 0){
 800298e:	f7ff ba76 	b.w	8001e7e <main+0x206>
 8002992:	bf00      	nop
 8002994:	f3af 8000 	nop.w
 8002998:	20000498 	.word	0x20000498
 800299c:	20000490 	.word	0x20000490
 80029a0:	200004a0 	.word	0x200004a0
 80029a4:	0800c1a4 	.word	0x0800c1a4
 80029a8:	200004ac 	.word	0x200004ac
 80029ac:	20000434 	.word	0x20000434
 80029b0:	47ae147b 	.word	0x47ae147b
 80029b4:	3fa47ae1 	.word	0x3fa47ae1

080029b8 <MX_GPIO_Init>:
			}
		}
	}

	static void MX_GPIO_Init(void)
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
		__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 80029be:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a28      	ldr	r2, [pc, #160]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOA_CLK_ENABLE(); // Enable GPIOA for buzzer
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <MX_GPIO_Init+0xac>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]

		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]

		// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
		GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80029fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a02:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a04:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <MX_GPIO_Init+0xb0>)
 8002a06:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	4619      	mov	r1, r3
 8002a12:	4816      	ldr	r0, [pc, #88]	@ (8002a6c <MX_GPIO_Init+0xb4>)
 8002a14:	f001 fd0a 	bl	800442c <HAL_GPIO_Init>

		BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 faf4 	bl	8003008 <BSP_PB_Init>
		// Configure buzzer on PA3
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a20:	2308      	movs	r3, #8
 8002a22:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3a:	f001 fcf7 	bl	800442c <HAL_GPIO_Init>

		//infrared sensor PB2:)
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4807      	ldr	r0, [pc, #28]	@ (8002a70 <MX_GPIO_Init+0xb8>)
 8002a52:	f001 fceb 	bl	800442c <HAL_GPIO_Init>

		// Enable NVIC EXTI line 13
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a56:	2028      	movs	r0, #40	@ 0x28
 8002a58:	f001 fccd 	bl	80043f6 <HAL_NVIC_EnableIRQ>
	}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40021000 	.word	0x40021000
 8002a68:	10210000 	.word	0x10210000
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000400 	.word	0x48000400

08002a74 <UART1_Init>:

	static void UART1_Init(void)
	{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
			/* Pin configuration for UART. BSP_COM_Init() can do this automatically */
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <UART1_Init+0xa0>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <UART1_Init+0xa0>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a86:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <UART1_Init+0xa0>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
			GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
			GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002aa4:	23c0      	movs	r3, #192	@ 0xc0
 8002aa6:	607b      	str	r3, [r7, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; 	//ownself discover
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	60bb      	str	r3, [r7, #8]
			GPIO_InitStruct.Pull = GPIO_NOPULL;			//ownself dicsover
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4817      	ldr	r0, [pc, #92]	@ (8002b18 <UART1_Init+0xa4>)
 8002aba:	f001 fcb7 	bl	800442c <HAL_GPIO_Init>

			/* Configuring UART1 */
			huart1.Instance = USART1;
 8002abe:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <UART1_Init+0xa8>)
 8002ac0:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <UART1_Init+0xac>)
 8002ac2:	601a      	str	r2, [r3, #0]
			huart1.Init.BaudRate = 115200;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <UART1_Init+0xa8>)
 8002ac6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aca:	605a      	str	r2, [r3, #4]
			huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <UART1_Init+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
			huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <UART1_Init+0xa8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
			huart1.Init.Parity = UART_PARITY_NONE;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <UART1_Init+0xa8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
			huart1.Init.Mode = UART_MODE_TX_RX;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <UART1_Init+0xa8>)
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	615a      	str	r2, [r3, #20]
			huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <UART1_Init+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
			huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aea:	4b0c      	ldr	r3, [pc, #48]	@ (8002b1c <UART1_Init+0xa8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
			huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <UART1_Init+0xa8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
			huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <UART1_Init+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24
			if (HAL_UART_Init(&huart1) != HAL_OK)
 8002afc:	4807      	ldr	r0, [pc, #28]	@ (8002b1c <UART1_Init+0xa8>)
 8002afe:	f002 fdad 	bl	800565c <HAL_UART_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <UART1_Init+0x98>
			{
			while(1);
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <UART1_Init+0x94>
			}

	}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	200004ac 	.word	0x200004ac
 8002b20:	40013800 	.word	0x40013800

08002b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b36:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b46:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_MspInit+0x44>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a17      	ldr	r2, [pc, #92]	@ (8002be8 <HAL_I2C_MspInit+0x7c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d128      	bne.n	8002be0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	4a16      	ldr	r2, [pc, #88]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002ba6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bac:	2312      	movs	r3, #18
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480b      	ldr	r0, [pc, #44]	@ (8002bf0 <HAL_I2C_MspInit+0x84>)
 8002bc4:	f001 fc32 	bl	800442c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bc8:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	4a07      	ldr	r2, [pc, #28]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002bce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd4:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_I2C_MspInit+0x80>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002be0:	bf00      	nop
 8002be2:	3728      	adds	r7, #40	@ 0x28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40005800 	.word	0x40005800
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	48000400 	.word	0x48000400

08002bf4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_I2C_MspDeInit+0x30>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10a      	bne.n	8002c1c <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_I2C_MspDeInit+0x34>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_I2C_MspDeInit+0x34>)
 8002c0c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002c10:	6593      	str	r3, [r2, #88]	@ 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8002c12:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002c16:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <HAL_I2C_MspDeInit+0x38>)
 8002c18:	f001 fdb2 	bl	8004780 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40005800 	.word	0x40005800
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	48000400 	.word	0x48000400

08002c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	@ 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d08 <HAL_UART_MspInit+0xd8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d128      	bne.n	8002ca4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c52:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	4a2d      	ldr	r2, [pc, #180]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b28      	ldr	r3, [pc, #160]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4a27      	ldr	r2, [pc, #156]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c76:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002c82:	23c0      	movs	r3, #192	@ 0xc0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c92:	2307      	movs	r3, #7
 8002c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481c      	ldr	r0, [pc, #112]	@ (8002d10 <HAL_UART_MspInit+0xe0>)
 8002c9e:	f001 fbc5 	bl	800442c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ca2:	e02d      	b.n	8002d00 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <HAL_UART_MspInit+0xe4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d128      	bne.n	8002d00 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cae:	4b17      	ldr	r3, [pc, #92]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb2:	4a16      	ldr	r2, [pc, #88]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cba:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc6:	4b11      	ldr	r3, [pc, #68]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	4a10      	ldr	r2, [pc, #64]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d0c <HAL_UART_MspInit+0xdc>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cec:	2303      	movs	r3, #3
 8002cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cf0:	2307      	movs	r3, #7
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <HAL_UART_MspInit+0xe8>)
 8002cfc:	f001 fb96 	bl	800442c <HAL_GPIO_Init>
}
 8002d00:	bf00      	nop
 8002d02:	3730      	adds	r7, #48	@ 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	48000400 	.word	0x48000400
 8002d14:	40004800 	.word	0x40004800
 8002d18:	48000c00 	.word	0x48000c00

08002d1c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a10      	ldr	r2, [pc, #64]	@ (8002d6c <HAL_UART_MspDeInit+0x50>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10a      	bne.n	8002d44 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <HAL_UART_MspDeInit+0x54>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	4a0f      	ldr	r2, [pc, #60]	@ (8002d70 <HAL_UART_MspDeInit+0x54>)
 8002d34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d38:	6613      	str	r3, [r2, #96]	@ 0x60
  
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOB, ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin);
 8002d3a:	21c0      	movs	r1, #192	@ 0xc0
 8002d3c:	480d      	ldr	r0, [pc, #52]	@ (8002d74 <HAL_UART_MspDeInit+0x58>)
 8002d3e:	f001 fd1f 	bl	8004780 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002d42:	e00f      	b.n	8002d64 <HAL_UART_MspDeInit+0x48>
  else if(huart->Instance==USART3)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0b      	ldr	r2, [pc, #44]	@ (8002d78 <HAL_UART_MspDeInit+0x5c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10a      	bne.n	8002d64 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002d4e:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <HAL_UART_MspDeInit+0x54>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	4a07      	ldr	r2, [pc, #28]	@ (8002d70 <HAL_UART_MspDeInit+0x54>)
 8002d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d58:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOD, INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin);
 8002d5a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002d5e:	4807      	ldr	r0, [pc, #28]	@ (8002d7c <HAL_UART_MspDeInit+0x60>)
 8002d60:	f001 fd0e 	bl	8004780 <HAL_GPIO_DeInit>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	40004800 	.word	0x40004800
 8002d7c:	48000c00 	.word	0x48000c00

08002d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d92:	bf00      	nop
 8002d94:	e7fd      	b.n	8002d92 <HardFault_Handler+0x4>

08002d96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <MemManage_Handler+0x4>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <BusFault_Handler+0x4>

08002da6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <UsageFault_Handler+0x4>

08002dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ddc:	f001 f9f6 	bl	80041cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002de8:	2020      	movs	r0, #32
 8002dea:	f001 fe07 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002dee:	2040      	movs	r0, #64	@ 0x40
 8002df0:	f001 fe04 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002df4:	2080      	movs	r0, #128	@ 0x80
 8002df6:	f001 fe01 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002dfa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002dfe:	f001 fdfd 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002e0a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e0e:	f001 fdf5 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002e12:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002e16:	f001 fdf1 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e1a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e1e:	f001 fded 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002e22:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e26:	f001 fde9 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002e2a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002e2e:	f001 fde5 	bl	80049fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <_sbrk+0x50>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <_sbrk+0x16>
		heap_end = &end;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <_sbrk+0x50>)
 8002e4a:	4a10      	ldr	r2, [pc, #64]	@ (8002e8c <_sbrk+0x54>)
 8002e4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <_sbrk+0x50>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <_sbrk+0x50>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	466a      	mov	r2, sp
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d907      	bls.n	8002e72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e62:	f004 fb0b 	bl	800747c <__errno>
 8002e66:	4603      	mov	r3, r0
 8002e68:	220c      	movs	r2, #12
 8002e6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	e006      	b.n	8002e80 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <_sbrk+0x50>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a03      	ldr	r2, [pc, #12]	@ (8002e88 <_sbrk+0x50>)
 8002e7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2000052c 	.word	0x2000052c
 8002e8c:	20000790 	.word	0x20000790

08002e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <SystemInit+0x64>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <SystemInit+0x64>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ea4:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <SystemInit+0x68>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <SystemInit+0x68>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <SystemInit+0x68>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <SystemInit+0x68>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef8 <SystemInit+0x68>)
 8002ebc:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002ec0:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <SystemInit+0x68>)
 8002ec8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <SystemInit+0x68>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <SystemInit+0x68>)
 8002ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <SystemInit+0x68>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <SystemInit+0x64>)
 8002ee2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	40021000 	.word	0x40021000

08002efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f02:	e003      	b.n	8002f0c <LoopCopyDataInit>

08002f04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f0a:	3104      	adds	r1, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f0c:	480b      	ldr	r0, [pc, #44]	@ (8002f3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f14:	d3f6      	bcc.n	8002f04 <CopyDataInit>
	ldr	r2, =_sbss
 8002f16:	4a0b      	ldr	r2, [pc, #44]	@ (8002f44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f18:	e002      	b.n	8002f20 <LoopFillZerobss>

08002f1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f1c:	f842 3b04 	str.w	r3, [r2], #4

08002f20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f20:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <LoopForever+0x16>)
	cmp	r2, r3
 8002f22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f24:	d3f9      	bcc.n	8002f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f26:	f7ff ffb3 	bl	8002e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f004 faad 	bl	8007488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f2e:	f7fe fea3 	bl	8001c78 <main>

08002f32 <LoopForever>:

LoopForever:
    b LoopForever
 8002f32:	e7fe      	b.n	8002f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f34:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f38:	0800c6e0 	.word	0x0800c6e0
	ldr	r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f40:	20000410 	.word	0x20000410
	ldr	r2, =_sbss
 8002f44:	20000410 	.word	0x20000410
	ldr	r3, = _ebss
 8002f48:	20000790 	.word	0x20000790

08002f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <BSP_LED_Init>:
  * @param  Led: LED to be configured. 
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <BSP_LED_Init+0x28>
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <BSP_LED_Init+0x58>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	4a10      	ldr	r2, [pc, #64]	@ (8002fa8 <BSP_LED_Init+0x58>)
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <BSP_LED_Init+0x58>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f7c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <BSP_LED_Init+0x5c>)
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	f107 020c 	add.w	r2, r7, #12
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fa47 	bl	800442c <HAL_GPIO_Init>
}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	2000015c 	.word	0x2000015c

08002fb0 <BSP_LED_Off>:
  * @param  Led: LED to be set off
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <BSP_LED_Off+0x28>)
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fc6:	b291      	uxth	r1, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 fce4 	bl	8004998 <HAL_GPIO_WritePin>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	2000015c 	.word	0x2000015c

08002fdc <BSP_LED_Toggle>:
  * @param  Led: LED to be toggled
  *          This parameter can be one of the following values:
  *            @arg  LED2
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	4a06      	ldr	r2, [pc, #24]	@ (8003004 <BSP_LED_Toggle+0x28>)
 8002fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fce6 	bl	80049c8 <HAL_GPIO_TogglePin>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000015c 	.word	0x2000015c

08003008 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	460a      	mov	r2, r1
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	4613      	mov	r3, r2
 8003016:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003018:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <BSP_PB_Init+0xa0>)
 800301a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301c:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <BSP_PB_Init+0xa0>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003024:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <BSP_PB_Init+0xa0>)
 8003026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003030:	79bb      	ldrb	r3, [r7, #6]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d112      	bne.n	800305c <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003036:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800303a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003040:	2301      	movs	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003044:	2302      	movs	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <BSP_PB_Init+0xa4>)
 800304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003050:	f107 020c 	add.w	r2, r7, #12
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f001 f9e8 	bl	800442c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800305c:	79bb      	ldrb	r3, [r7, #6]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d11e      	bne.n	80030a0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003066:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003070:	4b0f      	ldr	r3, [pc, #60]	@ (80030b0 <BSP_PB_Init+0xa8>)
 8003072:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <BSP_PB_Init+0xa4>)
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f9d2 	bl	800442c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003088:	2328      	movs	r3, #40	@ 0x28
 800308a:	b25b      	sxtb	r3, r3
 800308c:	2200      	movs	r2, #0
 800308e:	210f      	movs	r1, #15
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f994 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003096:	2328      	movs	r3, #40	@ 0x28
 8003098:	b25b      	sxtb	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f9ab 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  }
}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	20000160 	.word	0x20000160
 80030b0:	10110000 	.word	0x10110000

080030b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	@ 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <I2Cx_MspInit+0xa8>)
 80030be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c0:	4a26      	ldr	r2, [pc, #152]	@ (800315c <I2Cx_MspInit+0xa8>)
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c8:	4b24      	ldr	r3, [pc, #144]	@ (800315c <I2Cx_MspInit+0xa8>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80030d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80030da:	2312      	movs	r3, #18
 80030dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80030de:	2301      	movs	r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80030e6:	2304      	movs	r3, #4
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	481b      	ldr	r0, [pc, #108]	@ (8003160 <I2Cx_MspInit+0xac>)
 80030f2:	f001 f99b 	bl	800442c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4818      	ldr	r0, [pc, #96]	@ (8003160 <I2Cx_MspInit+0xac>)
 80030fe:	f001 f995 	bl	800442c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <I2Cx_MspInit+0xa8>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	4a15      	ldr	r2, [pc, #84]	@ (800315c <I2Cx_MspInit+0xa8>)
 8003108:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310c:	6593      	str	r3, [r2, #88]	@ 0x58
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <I2Cx_MspInit+0xa8>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <I2Cx_MspInit+0xa8>)
 800311c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311e:	4a0f      	ldr	r2, [pc, #60]	@ (800315c <I2Cx_MspInit+0xa8>)
 8003120:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003124:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <I2Cx_MspInit+0xa8>)
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	4a0c      	ldr	r2, [pc, #48]	@ (800315c <I2Cx_MspInit+0xa8>)
 800312c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003130:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	210f      	movs	r1, #15
 8003136:	2021      	movs	r0, #33	@ 0x21
 8003138:	f001 f941 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800313c:	2021      	movs	r0, #33	@ 0x21
 800313e:	f001 f95a 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	210f      	movs	r1, #15
 8003146:	2022      	movs	r0, #34	@ 0x22
 8003148:	f001 f939 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800314c:	2022      	movs	r0, #34	@ 0x22
 800314e:	f001 f952 	bl	80043f6 <HAL_NVIC_EnableIRQ>
}
 8003152:	bf00      	nop
 8003154:	3728      	adds	r7, #40	@ 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	48000400 	.word	0x48000400

08003164 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <I2Cx_Init+0x54>)
 8003170:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <I2Cx_Init+0x58>)
 8003176:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff89 	bl	80030b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 fc42 	bl	8004a2c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80031a8:	2100      	movs	r1, #0
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f002 f946 	bl	800543c <HAL_I2CEx_ConfigAnalogFilter>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40005800 	.word	0x40005800
 80031bc:	00702681 	.word	0x00702681

080031c0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af04      	add	r7, sp, #16
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	72fb      	strb	r3, [r7, #11]
 80031d2:	460b      	mov	r3, r1
 80031d4:	813b      	strh	r3, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	b299      	uxth	r1, r3
 80031e2:	88f8      	ldrh	r0, [r7, #6]
 80031e4:	893a      	ldrh	r2, [r7, #8]
 80031e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	4603      	mov	r3, r0
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f001 fdea 	bl	8004dd0 <HAL_I2C_Mem_Read>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	4619      	mov	r1, r3
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f832 	bl	8003274 <I2Cx_Error>
  }
  return status;
 8003210:	7dfb      	ldrb	r3, [r7, #23]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	@ 0x28
 800321e:	af04      	add	r7, sp, #16
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	4608      	mov	r0, r1
 8003224:	4611      	mov	r1, r2
 8003226:	461a      	mov	r2, r3
 8003228:	4603      	mov	r3, r0
 800322a:	72fb      	strb	r3, [r7, #11]
 800322c:	460b      	mov	r3, r1
 800322e:	813b      	strh	r3, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003238:	7afb      	ldrb	r3, [r7, #11]
 800323a:	b299      	uxth	r1, r3
 800323c:	88f8      	ldrh	r0, [r7, #6]
 800323e:	893a      	ldrh	r2, [r7, #8]
 8003240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4603      	mov	r3, r0
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f001 fca9 	bl	8004ba8 <HAL_I2C_Mem_Write>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	4619      	mov	r1, r3
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f805 	bl	8003274 <I2Cx_Error>
  }
  return status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f001 fc62 	bl	8004b4a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff6c 	bl	8003164 <I2Cx_Init>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003298:	4802      	ldr	r0, [pc, #8]	@ (80032a4 <SENSOR_IO_Init+0x10>)
 800329a:	f7ff ff63 	bl	8003164 <I2Cx_Init>
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000530 	.word	0x20000530

080032a8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
 80032b2:	460b      	mov	r3, r1
 80032b4:	71bb      	strb	r3, [r7, #6]
 80032b6:	4613      	mov	r3, r2
 80032b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	79f9      	ldrb	r1, [r7, #7]
 80032c0:	2301      	movs	r3, #1
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	1d7b      	adds	r3, r7, #5
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	4803      	ldr	r0, [pc, #12]	@ (80032d8 <SENSOR_IO_Write+0x30>)
 80032cc:	f7ff ffa5 	bl	800321a <I2Cx_WriteMultiple>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000530 	.word	0x20000530

080032dc <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	4603      	mov	r3, r0
 80032e4:	460a      	mov	r2, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80032f0:	79bb      	ldrb	r3, [r7, #6]
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	79f9      	ldrb	r1, [r7, #7]
 80032f6:	2301      	movs	r3, #1
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	f107 030f 	add.w	r3, r7, #15
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	4804      	ldr	r0, [pc, #16]	@ (8003314 <SENSOR_IO_Read+0x38>)
 8003304:	f7ff ff5c 	bl	80031c0 <I2Cx_ReadMultiple>

  return read_value;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000530 	.word	0x20000530

08003318 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af02      	add	r7, sp, #8
 800331e:	603a      	str	r2, [r7, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
 8003326:	460b      	mov	r3, r1
 8003328:	71bb      	strb	r3, [r7, #6]
 800332a:	4613      	mov	r3, r2
 800332c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800332e:	79bb      	ldrb	r3, [r7, #6]
 8003330:	b29a      	uxth	r2, r3
 8003332:	79f9      	ldrb	r1, [r7, #7]
 8003334:	88bb      	ldrh	r3, [r7, #4]
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2301      	movs	r3, #1
 800333e:	4804      	ldr	r0, [pc, #16]	@ (8003350 <SENSOR_IO_ReadMultiple+0x38>)
 8003340:	f7ff ff3e 	bl	80031c0 <I2Cx_ReadMultiple>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000530 	.word	0x20000530

08003354 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800335e:	2300      	movs	r3, #0
 8003360:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003362:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <BSP_ACCELERO_Init+0x74>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4798      	blx	r3
 8003368:	4603      	mov	r3, r0
 800336a:	2b6a      	cmp	r3, #106	@ 0x6a
 800336c:	d002      	beq.n	8003374 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e024      	b.n	80033be <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003374:	4b15      	ldr	r3, [pc, #84]	@ (80033cc <BSP_ACCELERO_Init+0x78>)
 8003376:	4a14      	ldr	r2, [pc, #80]	@ (80033c8 <BSP_ACCELERO_Init+0x74>)
 8003378:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800337a:	2330      	movs	r3, #48	@ 0x30
 800337c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003382:	2300      	movs	r3, #0
 8003384:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003386:	2340      	movs	r3, #64	@ 0x40
 8003388:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003392:	797a      	ldrb	r2, [r7, #5]
 8003394:	7abb      	ldrb	r3, [r7, #10]
 8003396:	4313      	orrs	r3, r2
 8003398:	b2db      	uxtb	r3, r3
 800339a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800339c:	7a3b      	ldrb	r3, [r7, #8]
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	b21a      	sxth	r2, r3
 80033a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <BSP_ACCELERO_Init+0x78>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	89ba      	ldrh	r2, [r7, #12]
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
  }  

  return ret;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200001c0 	.word	0x200001c0
 80033cc:	2000057c 	.word	0x2000057c

080033d0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80033d8:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80033ea:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000057c 	.word	0x2000057c

08003400 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800340a:	2300      	movs	r3, #0
 800340c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800340e:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <BSP_GYRO_Init+0x7c>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4798      	blx	r3
 8003414:	4603      	mov	r3, r0
 8003416:	2b6a      	cmp	r3, #106	@ 0x6a
 8003418:	d002      	beq.n	8003420 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e028      	b.n	8003472 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003420:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <BSP_GYRO_Init+0x80>)
 8003422:	4a16      	ldr	r2, [pc, #88]	@ (800347c <BSP_GYRO_Init+0x7c>)
 8003424:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800342a:	2330      	movs	r3, #48	@ 0x30
 800342c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003436:	2340      	movs	r3, #64	@ 0x40
 8003438:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800343e:	230c      	movs	r3, #12
 8003440:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8003442:	7aba      	ldrb	r2, [r7, #10]
 8003444:	797b      	ldrb	r3, [r7, #5]
 8003446:	4313      	orrs	r3, r2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800344c:	7a3b      	ldrb	r3, [r7, #8]
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	b2db      	uxtb	r3, r3
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	b21a      	sxth	r2, r3
 8003458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	b21b      	sxth	r3, r3
 8003460:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003462:	4b07      	ldr	r3, [pc, #28]	@ (8003480 <BSP_GYRO_Init+0x80>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	89ba      	ldrh	r2, [r7, #12]
 800346a:	4610      	mov	r0, r2
 800346c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200001f4 	.word	0x200001f4
 8003480:	20000580 	.word	0x20000580

08003484 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800348c:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <BSP_GYRO_GetXYZ+0x2c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <BSP_GYRO_GetXYZ+0x2c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <BSP_GYRO_GetXYZ+0x2c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000580 	.word	0x20000580

080034b4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <BSP_HSENSOR_Init+0x38>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	20be      	movs	r0, #190	@ 0xbe
 80034c0:	4798      	blx	r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	2bbc      	cmp	r3, #188	@ 0xbc
 80034c6:	d002      	beq.n	80034ce <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e009      	b.n	80034e2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <BSP_HSENSOR_Init+0x3c>)
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <BSP_HSENSOR_Init+0x38>)
 80034d2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <BSP_HSENSOR_Init+0x3c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	20be      	movs	r0, #190	@ 0xbe
 80034dc:	4798      	blx	r3
    ret = HSENSOR_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80034e2:	687b      	ldr	r3, [r7, #4]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000164 	.word	0x20000164
 80034f0:	20000584 	.word	0x20000584

080034f4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <BSP_HSENSOR_ReadHumidity+0x18>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	20be      	movs	r0, #190	@ 0xbe
 8003500:	4798      	blx	r3
 8003502:	eef0 7a40 	vmov.f32	s15, s0
}
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000584 	.word	0x20000584

08003510 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800351a:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <BSP_MAGNETO_Init+0x50>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4798      	blx	r3
 8003520:	4603      	mov	r3, r0
 8003522:	2b3d      	cmp	r3, #61	@ 0x3d
 8003524:	d002      	beq.n	800352c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	e013      	b.n	8003554 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800352c:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <BSP_MAGNETO_Init+0x54>)
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <BSP_MAGNETO_Init+0x50>)
 8003530:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003532:	2358      	movs	r3, #88	@ 0x58
 8003534:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003536:	2300      	movs	r3, #0
 8003538:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800353a:	2300      	movs	r3, #0
 800353c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800353e:	2308      	movs	r3, #8
 8003540:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003542:	2340      	movs	r3, #64	@ 0x40
 8003544:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003546:	4b07      	ldr	r3, [pc, #28]	@ (8003564 <BSP_MAGNETO_Init+0x54>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	463a      	mov	r2, r7
 800354e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003552:	4798      	blx	r3
  } 

  return ret;  
 8003554:	79fb      	ldrb	r3, [r7, #7]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000180 	.word	0x20000180
 8003564:	20000588 	.word	0x20000588

08003568 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003570:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <BSP_MAGNETO_GetXYZ+0x2c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
    }
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000588 	.word	0x20000588

08003598 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <BSP_PSENSOR_Init+0x38>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	20ba      	movs	r0, #186	@ 0xba
 80035a4:	4798      	blx	r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	2bb1      	cmp	r3, #177	@ 0xb1
 80035aa:	d002      	beq.n	80035b2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e009      	b.n	80035c6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80035b2:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <BSP_PSENSOR_Init+0x3c>)
 80035b4:	4a06      	ldr	r2, [pc, #24]	@ (80035d0 <BSP_PSENSOR_Init+0x38>)
 80035b6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <BSP_PSENSOR_Init+0x3c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	20ba      	movs	r0, #186	@ 0xba
 80035c0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80035c6:	687b      	ldr	r3, [r7, #4]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	200001b4 	.word	0x200001b4
 80035d4:	2000058c 	.word	0x2000058c

080035d8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80035dc:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <BSP_PSENSOR_ReadPressure+0x18>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	20ba      	movs	r0, #186	@ 0xba
 80035e4:	4798      	blx	r3
 80035e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80035ea:	eeb0 0a67 	vmov.f32	s0, s15
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	2000058c 	.word	0x2000058c

080035f4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <BSP_TSENSOR_Init+0x30>)
 8003600:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <BSP_TSENSOR_Init+0x34>)
 8003602:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003604:	f7ff fe46 	bl	8003294 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003608:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <BSP_TSENSOR_Init+0x30>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	20be      	movs	r0, #190	@ 0xbe
 8003612:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003618:	79fb      	ldrb	r3, [r7, #7]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000590 	.word	0x20000590
 8003628:	20000170 	.word	0x20000170

0800362c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <BSP_TSENSOR_ReadTemp+0x18>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	20be      	movs	r0, #190	@ 0xbe
 8003638:	4798      	blx	r3
 800363a:	eef0 7a40 	vmov.f32	s15, s0
}
 800363e:	eeb0 0a67 	vmov.f32	s0, s15
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000590 	.word	0x20000590

08003648 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2120      	movs	r1, #32
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fe3f 	bl	80032dc <SENSOR_IO_Read>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	f023 0303 	bic.w	r3, r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003688:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	2120      	movs	r1, #32
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe08 	bl	80032a8 <SENSOR_IO_Write>
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80036ae:	f7ff fdf1 	bl	8003294 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	210f      	movs	r1, #15
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fe0f 	bl	80032dc <SENSOR_IO_Read>
 80036be:	4603      	mov	r3, r0
 80036c0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	b2d8      	uxtb	r0, r3
 80036da:	f107 020c 	add.w	r2, r7, #12
 80036de:	2302      	movs	r3, #2
 80036e0:	21b0      	movs	r1, #176	@ 0xb0
 80036e2:	f7ff fe19 	bl	8003318 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80036e6:	7b3b      	ldrb	r3, [r7, #12]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80036ee:	7b7b      	ldrb	r3, [r7, #13]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	b2d8      	uxtb	r0, r3
 80036fa:	f107 020c 	add.w	r2, r7, #12
 80036fe:	2302      	movs	r3, #2
 8003700:	21b6      	movs	r1, #182	@ 0xb6
 8003702:	f7ff fe09 	bl	8003318 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003706:	7b7b      	ldrb	r3, [r7, #13]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	b21a      	sxth	r2, r3
 800370c:	7b3b      	ldrb	r3, [r7, #12]
 800370e:	b21b      	sxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	b2d8      	uxtb	r0, r3
 8003718:	f107 020c 	add.w	r2, r7, #12
 800371c:	2302      	movs	r3, #2
 800371e:	21ba      	movs	r1, #186	@ 0xba
 8003720:	f7ff fdfa 	bl	8003318 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003724:	7b7b      	ldrb	r3, [r7, #13]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	b21a      	sxth	r2, r3
 800372a:	7b3b      	ldrb	r3, [r7, #12]
 800372c:	b21b      	sxth	r3, r3
 800372e:	4313      	orrs	r3, r2
 8003730:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	b2d8      	uxtb	r0, r3
 8003736:	f107 020c 	add.w	r2, r7, #12
 800373a:	2302      	movs	r3, #2
 800373c:	21a8      	movs	r1, #168	@ 0xa8
 800373e:	f7ff fdeb 	bl	8003318 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003742:	7b7b      	ldrb	r3, [r7, #13]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	b21a      	sxth	r2, r3
 8003748:	7b3b      	ldrb	r3, [r7, #12]
 800374a:	b21b      	sxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003750:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003754:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003762:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	ee07 3a90 	vmov	s15, r3
 8003770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003774:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003778:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800377c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800379a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80037a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80037b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80037fc <HTS221_H_ReadHumidity+0x130>
 80037ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c2:	dd01      	ble.n	80037c8 <HTS221_H_ReadHumidity+0xfc>
 80037c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HTS221_H_ReadHumidity+0x134>)
 80037c6:	e00a      	b.n	80037de <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80037c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80037cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d502      	bpl.n	80037dc <HTS221_H_ReadHumidity+0x110>
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e000      	b.n	80037de <HTS221_H_ReadHumidity+0x112>
 80037dc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80037de:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80037e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80037e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80037f0:	eeb0 0a67 	vmov.f32	s0, s15
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	447a0000 	.word	0x447a0000
 8003800:	447a0000 	.word	0x447a0000

08003804 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2120      	movs	r1, #32
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fd60 	bl	80032dc <SENSOR_IO_Read>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003846:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	2120      	movs	r1, #32
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fd29 	bl	80032a8 <SENSOR_IO_Write>
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b088      	sub	sp, #32
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	b2d8      	uxtb	r0, r3
 800386c:	f107 0208 	add.w	r2, r7, #8
 8003870:	2302      	movs	r3, #2
 8003872:	21b2      	movs	r1, #178	@ 0xb2
 8003874:	f7ff fd50 	bl	8003318 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2135      	movs	r1, #53	@ 0x35
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fd2c 	bl	80032dc <SENSOR_IO_Read>
 8003884:	4603      	mov	r3, r0
 8003886:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	b21b      	sxth	r3, r3
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	b21a      	sxth	r2, r3
 8003894:	7a3b      	ldrb	r3, [r7, #8]
 8003896:	b21b      	sxth	r3, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800389c:	7ffb      	ldrb	r3, [r7, #31]
 800389e:	019b      	lsls	r3, r3, #6
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038a6:	b21a      	sxth	r2, r3
 80038a8:	7a7b      	ldrb	r3, [r7, #9]
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	4313      	orrs	r3, r2
 80038ae:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80038b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038b4:	10db      	asrs	r3, r3, #3
 80038b6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80038b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038bc:	10db      	asrs	r3, r3, #3
 80038be:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	b2d8      	uxtb	r0, r3
 80038c4:	f107 0208 	add.w	r2, r7, #8
 80038c8:	2304      	movs	r3, #4
 80038ca:	21bc      	movs	r1, #188	@ 0xbc
 80038cc:	f7ff fd24 	bl	8003318 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038d0:	7a7b      	ldrb	r3, [r7, #9]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b21a      	sxth	r2, r3
 80038d6:	7a3b      	ldrb	r3, [r7, #8]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	b21a      	sxth	r2, r3
 80038e4:	7abb      	ldrb	r3, [r7, #10]
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	f107 0208 	add.w	r2, r7, #8
 80038f4:	2302      	movs	r3, #2
 80038f6:	21aa      	movs	r1, #170	@ 0xaa
 80038f8:	f7ff fd0e 	bl	8003318 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038fc:	7a7b      	ldrb	r3, [r7, #9]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	b21a      	sxth	r2, r3
 8003902:	7a3b      	ldrb	r3, [r7, #8]
 8003904:	b21b      	sxth	r3, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800390a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800390e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800391c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003920:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800392e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003932:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003936:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003948:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003958:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	ee07 3a90 	vmov	s15, r3
}
 8003962:	eeb0 0a67 	vmov.f32	s0, s15
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	463b      	mov	r3, r7
 8003974:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003978:	783b      	ldrb	r3, [r7, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	2120      	movs	r1, #32
 800397e:	203c      	movs	r0, #60	@ 0x3c
 8003980:	f7ff fc92 	bl	80032a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8003984:	787b      	ldrb	r3, [r7, #1]
 8003986:	461a      	mov	r2, r3
 8003988:	2121      	movs	r1, #33	@ 0x21
 800398a:	203c      	movs	r0, #60	@ 0x3c
 800398c:	f7ff fc8c 	bl	80032a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003990:	78bb      	ldrb	r3, [r7, #2]
 8003992:	461a      	mov	r2, r3
 8003994:	2122      	movs	r1, #34	@ 0x22
 8003996:	203c      	movs	r0, #60	@ 0x3c
 8003998:	f7ff fc86 	bl	80032a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	461a      	mov	r2, r3
 80039a0:	2123      	movs	r1, #35	@ 0x23
 80039a2:	203c      	movs	r0, #60	@ 0x3c
 80039a4:	f7ff fc80 	bl	80032a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80039a8:	793b      	ldrb	r3, [r7, #4]
 80039aa:	461a      	mov	r2, r3
 80039ac:	2124      	movs	r1, #36	@ 0x24
 80039ae:	203c      	movs	r0, #60	@ 0x3c
 80039b0:	f7ff fc7a 	bl	80032a8 <SENSOR_IO_Write>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80039c2:	2300      	movs	r3, #0
 80039c4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80039c6:	2122      	movs	r1, #34	@ 0x22
 80039c8:	203c      	movs	r0, #60	@ 0x3c
 80039ca:	f7ff fc87 	bl	80032dc <SENSOR_IO_Read>
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	f023 0303 	bic.w	r3, r3, #3
 80039d8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f043 0303 	orr.w	r3, r3, #3
 80039e0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	461a      	mov	r2, r3
 80039e6:	2122      	movs	r1, #34	@ 0x22
 80039e8:	203c      	movs	r0, #60	@ 0x3c
 80039ea:	f7ff fc5d 	bl	80032a8 <SENSOR_IO_Write>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80039fa:	f7ff fc4b 	bl	8003294 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80039fe:	210f      	movs	r1, #15
 8003a00:	203c      	movs	r0, #60	@ 0x3c
 8003a02:	f7ff fc6b 	bl	80032dc <SENSOR_IO_Read>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003a1a:	2122      	movs	r1, #34	@ 0x22
 8003a1c:	203c      	movs	r0, #60	@ 0x3c
 8003a1e:	f7ff fc5d 	bl	80032dc <SENSOR_IO_Read>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	f023 0320 	bic.w	r3, r3, #32
 8003a2c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2122      	movs	r1, #34	@ 0x22
 8003a42:	203c      	movs	r0, #60	@ 0x3c
 8003a44:	f7ff fc30 	bl	80032a8 <SENSOR_IO_Write>
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8003a66:	2121      	movs	r1, #33	@ 0x21
 8003a68:	203c      	movs	r0, #60	@ 0x3c
 8003a6a:	f7ff fc37 	bl	80032dc <SENSOR_IO_Read>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8003a72:	f107 0208 	add.w	r2, r7, #8
 8003a76:	2306      	movs	r3, #6
 8003a78:	21a8      	movs	r1, #168	@ 0xa8
 8003a7a:	203c      	movs	r0, #60	@ 0x3c
 8003a7c:	f7ff fc4c 	bl	8003318 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e01a      	b.n	8003abc <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	3320      	adds	r3, #32
 8003a8e:	443b      	add	r3, r7
 8003a90:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	7ffa      	ldrb	r2, [r7, #31]
 8003a9a:	0052      	lsls	r2, r2, #1
 8003a9c:	3220      	adds	r2, #32
 8003a9e:	443a      	add	r2, r7
 8003aa0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
 8003aaa:	b212      	sxth	r2, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	3320      	adds	r3, #32
 8003ab0:	443b      	add	r3, r7
 8003ab2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d9e1      	bls.n	8003a86 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003ac8:	2b60      	cmp	r3, #96	@ 0x60
 8003aca:	d013      	beq.n	8003af4 <LIS3MDL_MagReadXYZ+0xa4>
 8003acc:	2b60      	cmp	r3, #96	@ 0x60
 8003ace:	dc14      	bgt.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d00c      	beq.n	8003aee <LIS3MDL_MagReadXYZ+0x9e>
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	dc10      	bgt.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <LIS3MDL_MagReadXYZ+0x92>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d003      	beq.n	8003ae8 <LIS3MDL_MagReadXYZ+0x98>
 8003ae0:	e00b      	b.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <LIS3MDL_MagReadXYZ+0xf8>)
 8003ae4:	61bb      	str	r3, [r7, #24]
    break;
 8003ae6:	e008      	b.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003ae8:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <LIS3MDL_MagReadXYZ+0xfc>)
 8003aea:	61bb      	str	r3, [r7, #24]
    break;
 8003aec:	e005      	b.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003aee:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <LIS3MDL_MagReadXYZ+0x100>)
 8003af0:	61bb      	str	r3, [r7, #24]
    break;
 8003af2:	e002      	b.n	8003afa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <LIS3MDL_MagReadXYZ+0x104>)
 8003af6:	61bb      	str	r3, [r7, #24]
    break;    
 8003af8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e01a      	b.n	8003b36 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003b00:	7ffb      	ldrb	r3, [r7, #31]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	3320      	adds	r3, #32
 8003b06:	443b      	add	r3, r7
 8003b08:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	7ffb      	ldrb	r3, [r7, #31]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b28:	ee17 2a90 	vmov	r2, s15
 8003b2c:	b212      	sxth	r2, r2
 8003b2e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	3301      	adds	r3, #1
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	7ffb      	ldrb	r3, [r7, #31]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d9e1      	bls.n	8003b00 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	3e0f5c29 	.word	0x3e0f5c29
 8003b4c:	3e947ae1 	.word	0x3e947ae1
 8003b50:	3edc28f6 	.word	0x3edc28f6
 8003b54:	3f147ae1 	.word	0x3f147ae1

08003b58 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f879 	bl	8003c5c <LPS22HB_Init>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003b80:	f7ff fb88 	bl	8003294 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	210f      	movs	r1, #15
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fba6 	bl	80032dc <SENSOR_IO_Read>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	74fb      	strb	r3, [r7, #19]
 8003bb2:	e013      	b.n	8003bdc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	3328      	adds	r3, #40	@ 0x28
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	7cfc      	ldrb	r4, [r7, #19]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f7ff fb8a 	bl	80032dc <SENSOR_IO_Read>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f104 0318 	add.w	r3, r4, #24
 8003bd0:	443b      	add	r3, r7
 8003bd2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003bd6:	7cfb      	ldrb	r3, [r7, #19]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	74fb      	strb	r3, [r7, #19]
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d9e8      	bls.n	8003bb4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	74fb      	strb	r3, [r7, #19]
 8003be6:	e00f      	b.n	8003c08 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	3318      	adds	r3, #24
 8003bec:	443b      	add	r3, r7
 8003bee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	3301      	adds	r3, #1
 8003c06:	74fb      	strb	r3, [r7, #19]
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d9ec      	bls.n	8003be8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c1e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2264      	movs	r2, #100	@ 0x64
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	da01      	bge.n	8003c34 <LPS22HB_P_ReadPressure+0x94>
 8003c30:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003c34:	131b      	asrs	r3, r3, #12
 8003c36:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c42:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003c58 <LPS22HB_P_ReadPressure+0xb8>
 8003c46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd90      	pop	{r4, r7, pc}
 8003c58:	42c80000 	.word	0x42c80000

08003c5c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	211a      	movs	r1, #26
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fb35 	bl	80032dc <SENSOR_IO_Read>
 8003c72:	4603      	mov	r3, r0
 8003c74:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	211a      	movs	r1, #26
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fb0a 	bl	80032a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2110      	movs	r1, #16
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fb1e 	bl	80032dc <SENSOR_IO_Read>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003caa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	f023 0302 	bic.w	r3, r3, #2
 8003cba:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	f043 0302 	orr.w	r3, r3, #2
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	2110      	movs	r1, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff faeb 	bl	80032a8 <SENSOR_IO_Write>
}  
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003ce8:	2110      	movs	r1, #16
 8003cea:	20d4      	movs	r0, #212	@ 0xd4
 8003cec:	f7ff faf6 	bl	80032dc <SENSOR_IO_Read>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003cf8:	7bbb      	ldrb	r3, [r7, #14]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003d00:	7bba      	ldrb	r2, [r7, #14]
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003d08:	7bbb      	ldrb	r3, [r7, #14]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	20d4      	movs	r0, #212	@ 0xd4
 8003d10:	f7ff faca 	bl	80032a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003d14:	2112      	movs	r1, #18
 8003d16:	20d4      	movs	r0, #212	@ 0xd4
 8003d18:	f7ff fae0 	bl	80032dc <SENSOR_IO_Read>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003d28:	7bbb      	ldrb	r3, [r7, #14]
 8003d2a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003d2e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003d30:	7bba      	ldrb	r2, [r7, #14]
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003d38:	7bbb      	ldrb	r3, [r7, #14]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2112      	movs	r1, #18
 8003d3e:	20d4      	movs	r0, #212	@ 0xd4
 8003d40:	f7ff fab2 	bl	80032a8 <SENSOR_IO_Write>
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003d56:	2110      	movs	r1, #16
 8003d58:	20d4      	movs	r0, #212	@ 0xd4
 8003d5a:	f7ff fabf 	bl	80032dc <SENSOR_IO_Read>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2110      	movs	r1, #16
 8003d70:	20d4      	movs	r0, #212	@ 0xd4
 8003d72:	f7ff fa99 	bl	80032a8 <SENSOR_IO_Write>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003d82:	f7ff fa87 	bl	8003294 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003d86:	210f      	movs	r1, #15
 8003d88:	20d4      	movs	r0, #212	@ 0xd4
 8003d8a:	f7ff faa7 	bl	80032dc <SENSOR_IO_Read>
 8003d8e:	4603      	mov	r3, r0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003da2:	2115      	movs	r1, #21
 8003da4:	20d4      	movs	r0, #212	@ 0xd4
 8003da6:	f7ff fa99 	bl	80032dc <SENSOR_IO_Read>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	f043 0310 	orr.w	r3, r3, #16
 8003dc2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2115      	movs	r1, #21
 8003dca:	20d4      	movs	r0, #212	@ 0xd4
 8003dcc:	f7ff fa6c 	bl	80032a8 <SENSOR_IO_Write>
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003dee:	2110      	movs	r1, #16
 8003df0:	20d4      	movs	r0, #212	@ 0xd4
 8003df2:	f7ff fa73 	bl	80032dc <SENSOR_IO_Read>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003dfa:	f107 0208 	add.w	r2, r7, #8
 8003dfe:	2306      	movs	r3, #6
 8003e00:	2128      	movs	r1, #40	@ 0x28
 8003e02:	20d4      	movs	r0, #212	@ 0xd4
 8003e04:	f7ff fa88 	bl	8003318 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e01a      	b.n	8003e44 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003e0e:	7ffb      	ldrb	r3, [r7, #31]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	3301      	adds	r3, #1
 8003e14:	3320      	adds	r3, #32
 8003e16:	443b      	add	r3, r7
 8003e18:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	7ffa      	ldrb	r2, [r7, #31]
 8003e22:	0052      	lsls	r2, r2, #1
 8003e24:	3220      	adds	r2, #32
 8003e26:	443a      	add	r2, r7
 8003e28:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	b212      	sxth	r2, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	3320      	adds	r3, #32
 8003e38:	443b      	add	r3, r7
 8003e3a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	3301      	adds	r3, #1
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	7ffb      	ldrb	r3, [r7, #31]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d9e1      	bls.n	8003e0e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d829      	bhi.n	8003ea8 <LSM6DSL_AccReadXYZ+0xd0>
 8003e54:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <LSM6DSL_AccReadXYZ+0x84>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003ea9 	.word	0x08003ea9
 8003e64:	08003ea9 	.word	0x08003ea9
 8003e68:	08003ea9 	.word	0x08003ea9
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003ea9 	.word	0x08003ea9
 8003e74:	08003ea9 	.word	0x08003ea9
 8003e78:	08003ea9 	.word	0x08003ea9
 8003e7c:	08003e97 	.word	0x08003e97
 8003e80:	08003ea9 	.word	0x08003ea9
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003ea9 	.word	0x08003ea9
 8003e8c:	08003e9d 	.word	0x08003e9d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003e90:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <LSM6DSL_AccReadXYZ+0x11c>)
 8003e92:	61bb      	str	r3, [r7, #24]
    break;
 8003e94:	e008      	b.n	8003ea8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <LSM6DSL_AccReadXYZ+0x120>)
 8003e98:	61bb      	str	r3, [r7, #24]
    break;
 8003e9a:	e005      	b.n	8003ea8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <LSM6DSL_AccReadXYZ+0x124>)
 8003e9e:	61bb      	str	r3, [r7, #24]
    break;
 8003ea0:	e002      	b.n	8003ea8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <LSM6DSL_AccReadXYZ+0x128>)
 8003ea4:	61bb      	str	r3, [r7, #24]
    break;    
 8003ea6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e01a      	b.n	8003ee4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003eae:	7ffb      	ldrb	r3, [r7, #31]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	3320      	adds	r3, #32
 8003eb4:	443b      	add	r3, r7
 8003eb6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed6:	ee17 2a90 	vmov	r2, s15
 8003eda:	b212      	sxth	r2, r2
 8003edc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	7ffb      	ldrb	r3, [r7, #31]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d9e1      	bls.n	8003eae <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	3d79db23 	.word	0x3d79db23
 8003ef8:	3df9db23 	.word	0x3df9db23
 8003efc:	3e79db23 	.word	0x3e79db23
 8003f00:	3ef9db23 	.word	0x3ef9db23

08003f04 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003f12:	2111      	movs	r1, #17
 8003f14:	20d4      	movs	r0, #212	@ 0xd4
 8003f16:	f7ff f9e1 	bl	80032dc <SENSOR_IO_Read>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003f22:	7bbb      	ldrb	r3, [r7, #14]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003f2a:	7bba      	ldrb	r2, [r7, #14]
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003f32:	7bbb      	ldrb	r3, [r7, #14]
 8003f34:	461a      	mov	r2, r3
 8003f36:	2111      	movs	r1, #17
 8003f38:	20d4      	movs	r0, #212	@ 0xd4
 8003f3a:	f7ff f9b5 	bl	80032a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003f3e:	2112      	movs	r1, #18
 8003f40:	20d4      	movs	r0, #212	@ 0xd4
 8003f42:	f7ff f9cb 	bl	80032dc <SENSOR_IO_Read>
 8003f46:	4603      	mov	r3, r0
 8003f48:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003f52:	7bbb      	ldrb	r3, [r7, #14]
 8003f54:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003f58:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003f5a:	7bba      	ldrb	r2, [r7, #14]
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003f62:	7bbb      	ldrb	r3, [r7, #14]
 8003f64:	461a      	mov	r2, r3
 8003f66:	2112      	movs	r1, #18
 8003f68:	20d4      	movs	r0, #212	@ 0xd4
 8003f6a:	f7ff f99d 	bl	80032a8 <SENSOR_IO_Write>
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003f80:	2111      	movs	r1, #17
 8003f82:	20d4      	movs	r0, #212	@ 0xd4
 8003f84:	f7ff f9aa 	bl	80032dc <SENSOR_IO_Read>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	461a      	mov	r2, r3
 8003f98:	2111      	movs	r1, #17
 8003f9a:	20d4      	movs	r0, #212	@ 0xd4
 8003f9c:	f7ff f984 	bl	80032a8 <SENSOR_IO_Write>
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003fac:	f7ff f972 	bl	8003294 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003fb0:	210f      	movs	r1, #15
 8003fb2:	20d4      	movs	r0, #212	@ 0xd4
 8003fb4:	f7ff f992 	bl	80032dc <SENSOR_IO_Read>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003fcc:	2116      	movs	r1, #22
 8003fce:	20d4      	movs	r0, #212	@ 0xd4
 8003fd0:	f7ff f984 	bl	80032dc <SENSOR_IO_Read>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fde:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2116      	movs	r1, #22
 8003ff4:	20d4      	movs	r0, #212	@ 0xd4
 8003ff6:	f7ff f957 	bl	80032a8 <SENSOR_IO_Write>
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800401a:	2111      	movs	r1, #17
 800401c:	20d4      	movs	r0, #212	@ 0xd4
 800401e:	f7ff f95d 	bl	80032dc <SENSOR_IO_Read>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004026:	f107 0208 	add.w	r2, r7, #8
 800402a:	2306      	movs	r3, #6
 800402c:	2122      	movs	r1, #34	@ 0x22
 800402e:	20d4      	movs	r0, #212	@ 0xd4
 8004030:	f7ff f972 	bl	8003318 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e01a      	b.n	8004070 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	3301      	adds	r3, #1
 8004040:	3320      	adds	r3, #32
 8004042:	443b      	add	r3, r7
 8004044:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	b29b      	uxth	r3, r3
 800404c:	7ffa      	ldrb	r2, [r7, #31]
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	3220      	adds	r2, #32
 8004052:	443a      	add	r2, r7
 8004054:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004058:	4413      	add	r3, r2
 800405a:	b29a      	uxth	r2, r3
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	b212      	sxth	r2, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	3320      	adds	r3, #32
 8004064:	443b      	add	r3, r7
 8004066:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	3301      	adds	r3, #1
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d9e1      	bls.n	800403a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b0c      	cmp	r3, #12
 800407e:	d829      	bhi.n	80040d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8004080:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040d5 	.word	0x080040d5
 8004090:	080040d5 	.word	0x080040d5
 8004094:	080040d5 	.word	0x080040d5
 8004098:	080040c3 	.word	0x080040c3
 800409c:	080040d5 	.word	0x080040d5
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040c9 	.word	0x080040c9
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040d5 	.word	0x080040d5
 80040b8:	080040cf 	.word	0x080040cf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80040bc:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 80040be:	61bb      	str	r3, [r7, #24]
    break;
 80040c0:	e008      	b.n	80040d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80040c4:	61bb      	str	r3, [r7, #24]
    break;
 80040c6:	e005      	b.n	80040d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80040c8:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80040ca:	61bb      	str	r3, [r7, #24]
    break;
 80040cc:	e002      	b.n	80040d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80040ce:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80040d0:	61bb      	str	r3, [r7, #24]
    break;    
 80040d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e016      	b.n	8004108 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80040da:	7ffb      	ldrb	r3, [r7, #31]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	3320      	adds	r3, #32
 80040e0:	443b      	add	r3, r7
 80040e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	3301      	adds	r3, #1
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	7ffb      	ldrb	r3, [r7, #31]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d9e5      	bls.n	80040da <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	410c0000 	.word	0x410c0000
 800411c:	418c0000 	.word	0x418c0000
 8004120:	420c0000 	.word	0x420c0000
 8004124:	428c0000 	.word	0x428c0000

08004128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004132:	2003      	movs	r0, #3
 8004134:	f000 f938 	bl	80043a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004138:	2000      	movs	r0, #0
 800413a:	f000 f80d 	bl	8004158 <HAL_InitTick>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	71fb      	strb	r3, [r7, #7]
 8004148:	e001      	b.n	800414e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800414a:	f7fe fceb 	bl	8002b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800414e:	79fb      	ldrb	r3, [r7, #7]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004164:	4b16      	ldr	r3, [pc, #88]	@ (80041c0 <HAL_InitTick+0x68>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d022      	beq.n	80041b2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800416c:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <HAL_InitTick+0x6c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <HAL_InitTick+0x68>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004178:	fbb1 f3f3 	udiv	r3, r1, r3
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f946 	bl	8004412 <HAL_SYSTICK_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10f      	bne.n	80041ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d809      	bhi.n	80041a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004192:	2200      	movs	r2, #0
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
 800419a:	f000 f910 	bl	80043be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <HAL_InitTick+0x70>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e007      	b.n	80041b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e004      	b.n	80041b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e001      	b.n	80041b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	2000022c 	.word	0x2000022c
 80041c4:	20000158 	.word	0x20000158
 80041c8:	20000228 	.word	0x20000228

080041cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_IncTick+0x1c>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_IncTick+0x20>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	4a03      	ldr	r2, [pc, #12]	@ (80041e8 <HAL_IncTick+0x1c>)
 80041dc:	6013      	str	r3, [r2, #0]
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	20000594 	.word	0x20000594
 80041ec:	2000022c 	.word	0x2000022c

080041f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return uwTick;
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_GetTick+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000594 	.word	0x20000594

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423a:	4a04      	ldr	r2, [pc, #16]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	60d3      	str	r3, [r2, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	@ (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	@ (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	@ (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
         );
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	@ 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004374:	d301      	bcc.n	800437a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437a:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <SysTick_Config+0x40>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004382:	210f      	movs	r1, #15
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f7ff ff8e 	bl	80042a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <SysTick_Config+0x40>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <SysTick_Config+0x40>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff29 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d0:	f7ff ff3e 	bl	8004250 <__NVIC_GetPriorityGrouping>
 80043d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff8e 	bl	80042fc <NVIC_EncodePriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff5d 	bl	80042a8 <__NVIC_SetPriority>
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff31 	bl	800426c <__NVIC_EnableIRQ>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffa2 	bl	8004364 <SysTick_Config>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800443a:	e17f      	b.n	800473c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8171 	beq.w	8004736 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00b      	beq.n	8004474 <HAL_GPIO_Init+0x48>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004468:	2b11      	cmp	r3, #17
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b12      	cmp	r3, #18
 8004472:	d130      	bne.n	80044d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044aa:	2201      	movs	r2, #1
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0201 	and.w	r2, r3, #1
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d118      	bne.n	8004514 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80044e8:	2201      	movs	r2, #1
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0201 	and.w	r2, r3, #1
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	2203      	movs	r2, #3
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x128>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b12      	cmp	r3, #18
 8004552:	d123      	bne.n	800459c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	08da      	lsrs	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3208      	adds	r2, #8
 800455c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	220f      	movs	r2, #15
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	08da      	lsrs	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3208      	adds	r2, #8
 8004596:	6939      	ldr	r1, [r7, #16]
 8004598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	2203      	movs	r2, #3
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80ac 	beq.w	8004736 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045de:	4b5f      	ldr	r3, [pc, #380]	@ (800475c <HAL_GPIO_Init+0x330>)
 80045e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e2:	4a5e      	ldr	r2, [pc, #376]	@ (800475c <HAL_GPIO_Init+0x330>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80045ea:	4b5c      	ldr	r3, [pc, #368]	@ (800475c <HAL_GPIO_Init+0x330>)
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004760 <HAL_GPIO_Init+0x334>)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	089b      	lsrs	r3, r3, #2
 80045fc:	3302      	adds	r3, #2
 80045fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004602:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	220f      	movs	r2, #15
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004620:	d025      	beq.n	800466e <HAL_GPIO_Init+0x242>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a4f      	ldr	r2, [pc, #316]	@ (8004764 <HAL_GPIO_Init+0x338>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <HAL_GPIO_Init+0x23e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4e      	ldr	r2, [pc, #312]	@ (8004768 <HAL_GPIO_Init+0x33c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d019      	beq.n	8004666 <HAL_GPIO_Init+0x23a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4d      	ldr	r2, [pc, #308]	@ (800476c <HAL_GPIO_Init+0x340>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d013      	beq.n	8004662 <HAL_GPIO_Init+0x236>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a4c      	ldr	r2, [pc, #304]	@ (8004770 <HAL_GPIO_Init+0x344>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_GPIO_Init+0x232>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4b      	ldr	r2, [pc, #300]	@ (8004774 <HAL_GPIO_Init+0x348>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <HAL_GPIO_Init+0x22e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4a      	ldr	r2, [pc, #296]	@ (8004778 <HAL_GPIO_Init+0x34c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_GPIO_Init+0x22a>
 8004652:	2306      	movs	r3, #6
 8004654:	e00c      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004656:	2307      	movs	r3, #7
 8004658:	e00a      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800465a:	2305      	movs	r3, #5
 800465c:	e008      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800465e:	2304      	movs	r3, #4
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004662:	2303      	movs	r3, #3
 8004664:	e004      	b.n	8004670 <HAL_GPIO_Init+0x244>
 8004666:	2302      	movs	r3, #2
 8004668:	e002      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_GPIO_Init+0x244>
 800466e:	2300      	movs	r3, #0
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	f002 0203 	and.w	r2, r2, #3
 8004676:	0092      	lsls	r2, r2, #2
 8004678:	4093      	lsls	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004680:	4937      	ldr	r1, [pc, #220]	@ (8004760 <HAL_GPIO_Init+0x334>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	3302      	adds	r3, #2
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800468e:	4b3b      	ldr	r3, [pc, #236]	@ (800477c <HAL_GPIO_Init+0x350>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	43db      	mvns	r3, r3
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046b2:	4a32      	ldr	r2, [pc, #200]	@ (800477c <HAL_GPIO_Init+0x350>)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046b8:	4b30      	ldr	r3, [pc, #192]	@ (800477c <HAL_GPIO_Init+0x350>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046dc:	4a27      	ldr	r2, [pc, #156]	@ (800477c <HAL_GPIO_Init+0x350>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046e2:	4b26      	ldr	r3, [pc, #152]	@ (800477c <HAL_GPIO_Init+0x350>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004706:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <HAL_GPIO_Init+0x350>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800470c:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <HAL_GPIO_Init+0x350>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004730:	4a12      	ldr	r2, [pc, #72]	@ (800477c <HAL_GPIO_Init+0x350>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f47f ae78 	bne.w	800443c <HAL_GPIO_Init+0x10>
  }
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	40010000 	.word	0x40010000
 8004764:	48000400 	.word	0x48000400
 8004768:	48000800 	.word	0x48000800
 800476c:	48000c00 	.word	0x48000c00
 8004770:	48001000 	.word	0x48001000
 8004774:	48001400 	.word	0x48001400
 8004778:	48001800 	.word	0x48001800
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800478e:	e0cd      	b.n	800492c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004790:	2201      	movs	r2, #1
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80c0 	beq.w	8004926 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047a6:	4a68      	ldr	r2, [pc, #416]	@ (8004948 <HAL_GPIO_DeInit+0x1c8>)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047ce:	d025      	beq.n	800481c <HAL_GPIO_DeInit+0x9c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a5e      	ldr	r2, [pc, #376]	@ (800494c <HAL_GPIO_DeInit+0x1cc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01f      	beq.n	8004818 <HAL_GPIO_DeInit+0x98>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a5d      	ldr	r2, [pc, #372]	@ (8004950 <HAL_GPIO_DeInit+0x1d0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d019      	beq.n	8004814 <HAL_GPIO_DeInit+0x94>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004954 <HAL_GPIO_DeInit+0x1d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_GPIO_DeInit+0x90>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004958 <HAL_GPIO_DeInit+0x1d8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00d      	beq.n	800480c <HAL_GPIO_DeInit+0x8c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a5a      	ldr	r2, [pc, #360]	@ (800495c <HAL_GPIO_DeInit+0x1dc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <HAL_GPIO_DeInit+0x88>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a59      	ldr	r2, [pc, #356]	@ (8004960 <HAL_GPIO_DeInit+0x1e0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_GPIO_DeInit+0x84>
 8004800:	2306      	movs	r3, #6
 8004802:	e00c      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 8004804:	2307      	movs	r3, #7
 8004806:	e00a      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 8004808:	2305      	movs	r3, #5
 800480a:	e008      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 800480c:	2304      	movs	r3, #4
 800480e:	e006      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 8004810:	2303      	movs	r3, #3
 8004812:	e004      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 8004814:	2302      	movs	r3, #2
 8004816:	e002      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_GPIO_DeInit+0x9e>
 800481c:	2300      	movs	r3, #0
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	f002 0203 	and.w	r2, r2, #3
 8004824:	0092      	lsls	r2, r2, #2
 8004826:	4093      	lsls	r3, r2
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d132      	bne.n	8004894 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800482e:	4b4d      	ldr	r3, [pc, #308]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	494b      	ldr	r1, [pc, #300]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 8004838:	4013      	ands	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800483c:	4b49      	ldr	r3, [pc, #292]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	43db      	mvns	r3, r3
 8004844:	4947      	ldr	r1, [pc, #284]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 8004846:	4013      	ands	r3, r2
 8004848:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800484a:	4b46      	ldr	r3, [pc, #280]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	4944      	ldr	r1, [pc, #272]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 8004854:	4013      	ands	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004858:	4b42      	ldr	r3, [pc, #264]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	43db      	mvns	r3, r3
 8004860:	4940      	ldr	r1, [pc, #256]	@ (8004964 <HAL_GPIO_DeInit+0x1e4>)
 8004862:	4013      	ands	r3, r2
 8004864:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	220f      	movs	r2, #15
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004876:	4a34      	ldr	r2, [pc, #208]	@ (8004948 <HAL_GPIO_DeInit+0x1c8>)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	43da      	mvns	r2, r3
 8004886:	4830      	ldr	r0, [pc, #192]	@ (8004948 <HAL_GPIO_DeInit+0x1c8>)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	400a      	ands	r2, r1
 800488e:	3302      	adds	r3, #2
 8004890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	2103      	movs	r1, #3
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	08da      	lsrs	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3208      	adds	r2, #8
 80048b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	08d2      	lsrs	r2, r2, #3
 80048c8:	4019      	ands	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3208      	adds	r2, #8
 80048ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2103      	movs	r1, #3
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	2101      	movs	r1, #1
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	401a      	ands	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2103      	movs	r1, #3
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	401a      	ands	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	2101      	movs	r1, #1
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	401a      	ands	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	f47f af2b 	bne.w	8004790 <HAL_GPIO_DeInit+0x10>
  }
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40010000 	.word	0x40010000
 800494c:	48000400 	.word	0x48000400
 8004950:	48000800 	.word	0x48000800
 8004954:	48000c00 	.word	0x48000c00
 8004958:	48001000 	.word	0x48001000
 800495c:	48001400 	.word	0x48001400
 8004960:	48001800 	.word	0x48001800
 8004964:	40010400 	.word	0x40010400

08004968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	e001      	b.n	800498a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
 80049a4:	4613      	mov	r3, r2
 80049a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049a8:	787b      	ldrb	r3, [r7, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ae:	887a      	ldrh	r2, [r7, #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049b4:	e002      	b.n	80049bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049e0:	887a      	ldrh	r2, [r7, #2]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80049e6:	e002      	b.n	80049ee <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049e8:	887a      	ldrh	r2, [r7, #2]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	619a      	str	r2, [r3, #24]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a12:	4a05      	ldr	r2, [pc, #20]	@ (8004a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc ffd4 	bl	80019c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40010400 	.word	0x40010400

08004a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e081      	b.n	8004b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fe f88a 	bl	8002b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	@ 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e006      	b.n	8004ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d104      	bne.n	8004ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	ea42 0103 	orr.w	r1, r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e021      	b.n	8004ba0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	@ 0x24
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fe f83d 	bl	8002bf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	817b      	strh	r3, [r7, #10]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	813b      	strh	r3, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80f9 	bne.w	8004dc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x34>
 8004bd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004be2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0ed      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2C_Mem_Write+0x4e>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0e6      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bfe:	f7ff faf7 	bl	80041f0 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2319      	movs	r3, #25
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fac3 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0d1      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	@ 0x21
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2240      	movs	r2, #64	@ 0x40
 8004c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c48:	88f8      	ldrh	r0, [r7, #6]
 8004c4a:	893a      	ldrh	r2, [r7, #8]
 8004c4c:	8979      	ldrh	r1, [r7, #10]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	4603      	mov	r3, r0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f9d3 	bl	8005004 <I2C_RequestMemoryWrite>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0a9      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2bff      	cmp	r3, #255	@ 0xff
 8004c78:	d90e      	bls.n	8004c98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	@ 0xff
 8004c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	8979      	ldrh	r1, [r7, #10]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fba5 	bl	80053e0 <I2C_TransferConfig>
 8004c96:	e00f      	b.n	8004cb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	2300      	movs	r3, #0
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fb94 	bl	80053e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 faad 	bl	800521c <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e07b      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d130      	bne.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	@ 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa3f 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04d      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2bff      	cmp	r3, #255	@ 0xff
 8004d30:	d90e      	bls.n	8004d50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	@ 0xff
 8004d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fb49 	bl	80053e0 <I2C_TransferConfig>
 8004d4e:	e00f      	b.n	8004d70 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	8979      	ldrh	r1, [r7, #10]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fb38 	bl	80053e0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d19e      	bne.n	8004cb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa8c 	bl	800529c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01a      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <HAL_I2C_Mem_Write+0x224>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	fe00e800 	.word	0xfe00e800

08004dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	460b      	mov	r3, r1
 8004de4:	813b      	strh	r3, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80fd 	bne.w	8004ff2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_I2C_Mem_Read+0x34>
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0f1      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x4e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0ea      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e26:	f7ff f9e3 	bl	80041f0 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f9af 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0d5      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2222      	movs	r2, #34	@ 0x22
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e70:	88f8      	ldrh	r0, [r7, #6]
 8004e72:	893a      	ldrh	r2, [r7, #8]
 8004e74:	8979      	ldrh	r1, [r7, #10]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f913 	bl	80050ac <I2C_RequestMemoryRead>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0ad      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2bff      	cmp	r3, #255	@ 0xff
 8004ea0:	d90e      	bls.n	8004ec0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	@ 0xff
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	4b52      	ldr	r3, [pc, #328]	@ (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fa91 	bl	80053e0 <I2C_TransferConfig>
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ffc <HAL_I2C_Mem_Read+0x22c>)
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa80 	bl	80053e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2104      	movs	r1, #4
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 f956 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07c      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d034      	beq.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d130      	bne.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	@ 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f927 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e04d      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2bff      	cmp	r3, #255	@ 0xff
 8004f60:	d90e      	bls.n	8004f80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	22ff      	movs	r2, #255	@ 0xff
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	8979      	ldrh	r1, [r7, #10]
 8004f70:	2300      	movs	r3, #0
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fa31 	bl	80053e0 <I2C_TransferConfig>
 8004f7e:	e00f      	b.n	8004fa0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	8979      	ldrh	r1, [r7, #10]
 8004f92:	2300      	movs	r3, #0
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fa20 	bl	80053e0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d19a      	bne.n	8004ee0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f974 	bl	800529c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e01a      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <HAL_I2C_Mem_Read+0x230>)
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	80002400 	.word	0x80002400
 8005000:	fe00e800 	.word	0xfe00e800

08005004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4603      	mov	r3, r0
 8005014:	817b      	strh	r3, [r7, #10]
 8005016:	460b      	mov	r3, r1
 8005018:	813b      	strh	r3, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	8979      	ldrh	r1, [r7, #10]
 8005024:	4b20      	ldr	r3, [pc, #128]	@ (80050a8 <I2C_RequestMemoryWrite+0xa4>)
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f9d7 	bl	80053e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	69b9      	ldr	r1, [r7, #24]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8f0 	bl	800521c <I2C_WaitOnTXISFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e02c      	b.n	80050a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	629a      	str	r2, [r3, #40]	@ 0x28
 8005056:	e015      	b.n	8005084 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b29b      	uxth	r3, r3
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8d6 	bl	800521c <I2C_WaitOnTXISFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e012      	b.n	80050a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	@ 0x80
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f884 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	80002000 	.word	0x80002000

080050ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	817b      	strh	r3, [r7, #10]
 80050be:	460b      	mov	r3, r1
 80050c0:	813b      	strh	r3, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	8979      	ldrh	r1, [r7, #10]
 80050cc:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <I2C_RequestMemoryRead+0xa4>)
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f984 	bl	80053e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f89d 	bl	800521c <I2C_WaitOnTXISFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e02c      	b.n	8005146 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f2:	893b      	ldrh	r3, [r7, #8]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80050fc:	e015      	b.n	800512a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	b29b      	uxth	r3, r3
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	69b9      	ldr	r1, [r7, #24]
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f883 	bl	800521c <I2C_WaitOnTXISFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e012      	b.n	8005146 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005120:	893b      	ldrh	r3, [r7, #8]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2200      	movs	r2, #0
 8005132:	2140      	movs	r1, #64	@ 0x40
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f831 	bl	800519c <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	80002000 	.word	0x80002000

08005154 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d103      	bne.n	8005172 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d007      	beq.n	8005190 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	619a      	str	r2, [r3, #24]
  }
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ac:	e022      	b.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d01e      	beq.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b6:	f7ff f81b 	bl	80041f0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d113      	bne.n	80051f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e00f      	b.n	8005214 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	429a      	cmp	r2, r3
 8005210:	d0cd      	beq.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005228:	e02c      	b.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f870 	bl	8005314 <I2C_IsAcknowledgeFailed>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e02a      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d01e      	beq.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005246:	f7fe ffd3 	bl	80041f0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e007      	b.n	8005294 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d1cb      	bne.n	800522a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a8:	e028      	b.n	80052fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f830 	bl	8005314 <I2C_IsAcknowledgeFailed>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e026      	b.n	800530c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fe ff97 	bl	80041f0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e007      	b.n	800530c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d1cf      	bne.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b10      	cmp	r3, #16
 800532c:	d151      	bne.n	80053d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532e:	e022      	b.n	8005376 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d01e      	beq.n	8005376 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005338:	f7fe ff5a 	bl	80041f0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <I2C_IsAcknowledgeFailed+0x3a>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e02e      	b.n	80053d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d1d5      	bne.n	8005330 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2210      	movs	r2, #16
 800538a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff fedd 	bl	8005154 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <I2C_IsAcknowledgeFailed+0xc8>)
 80053a6:	400b      	ands	r3, r1
 80053a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	f043 0204 	orr.w	r2, r3, #4
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	fe00e800 	.word	0xfe00e800

080053e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	4613      	mov	r3, r2
 80053f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	0d5b      	lsrs	r3, r3, #21
 80053fc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005400:	4b0d      	ldr	r3, [pc, #52]	@ (8005438 <I2C_TransferConfig+0x58>)
 8005402:	430b      	orrs	r3, r1
 8005404:	43db      	mvns	r3, r3
 8005406:	ea02 0103 	and.w	r1, r2, r3
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005410:	7a7b      	ldrb	r3, [r7, #9]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	03ff63ff 	.word	0x03ff63ff

0800543c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b20      	cmp	r3, #32
 8005450:	d138      	bne.n	80054c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800545c:	2302      	movs	r3, #2
 800545e:	e032      	b.n	80054c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	@ 0x24
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800548e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6819      	ldr	r1, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	@ 0x24
 80054d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e2:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ec:	4b3b      	ldr	r3, [pc, #236]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x34>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b0c      	cmp	r3, #12
 8005500:	d121      	bne.n	8005546 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d11e      	bne.n	8005546 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005508:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d107      	bne.n	8005524 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005514:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e005      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005524:	4b2d      	ldr	r3, [pc, #180]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005530:	4a2b      	ldr	r2, [pc, #172]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005538:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10d      	bne.n	800555c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005544:	e00a      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d102      	bne.n	8005552 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800554c:	4b25      	ldr	r3, [pc, #148]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	e004      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d101      	bne.n	800555c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005558:	4b23      	ldr	r3, [pc, #140]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800555a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b0c      	cmp	r3, #12
 8005560:	d134      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0xa6>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b03      	cmp	r3, #3
 8005576:	d003      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0xac>
 8005578:	e005      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800557a:	4b1a      	ldr	r3, [pc, #104]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800557c:	617b      	str	r3, [r7, #20]
      break;
 800557e:	e005      	b.n	800558c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005582:	617b      	str	r3, [r7, #20]
      break;
 8005584:	e002      	b.n	800558c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	617b      	str	r3, [r7, #20]
      break;
 800558a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800558c:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	3301      	adds	r3, #1
 8005598:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	fb03 f202 	mul.w	r2, r3, r2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b2:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x108>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	0e5b      	lsrs	r3, r3, #25
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	3301      	adds	r3, #1
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055cc:	69bb      	ldr	r3, [r7, #24]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3724      	adds	r7, #36	@ 0x24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	0800c270 	.word	0x0800c270
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	007a1200 	.word	0x007a1200

080055ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f0:	4b03      	ldr	r3, [pc, #12]	@ (8005600 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000158 	.word	0x20000158

08005604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005608:	f7ff fff0 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4904      	ldr	r1, [pc, #16]	@ (800562c <HAL_RCC_GetPCLK1Freq+0x28>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	0800c268 	.word	0x0800c268

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005634:	f7ff ffda 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0adb      	lsrs	r3, r3, #11
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	@ (8005658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	0800c268 	.word	0x0800c268

0800565c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e040      	b.n	80056f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fd fad6 	bl	8002c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	@ 0x24
 8005688:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f8f2 	bl	8005884 <UART_SetConfig>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e022      	b.n	80056f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fc86 	bl	8005fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fd0d 	bl	8006108 <UART_CheckIdleState>
 80056ee:	4603      	mov	r3, r0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e027      	b.n	800575a <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	@ 0x24
 800570e:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0201 	bic.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2200      	movs	r2, #0
 800572e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fd faef 	bl	8002d1c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08a      	sub	sp, #40	@ 0x28
 8005766:	af02      	add	r7, sp, #8
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005776:	2b20      	cmp	r3, #32
 8005778:	d17f      	bne.n	800587a <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <HAL_UART_Transmit+0x24>
 8005780:	88fb      	ldrh	r3, [r7, #6]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e078      	b.n	800587c <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UART_Transmit+0x36>
 8005794:	2302      	movs	r3, #2
 8005796:	e071      	b.n	800587c <HAL_UART_Transmit+0x11a>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2221      	movs	r2, #33	@ 0x21
 80057aa:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80057ac:	f7fe fd20 	bl	80041f0 <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ca:	d108      	bne.n	80057de <HAL_UART_Transmit+0x7c>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e003      	b.n	80057e6 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 80057ee:	e02c      	b.n	800584a <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2180      	movs	r1, #128	@ 0x80
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fcc9 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e038      	b.n	800587c <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	881a      	ldrh	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800581c:	b292      	uxth	r2, r2
 800581e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	3302      	adds	r3, #2
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	e007      	b.n	8005838 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1cc      	bne.n	80057f0 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2140      	movs	r1, #64	@ 0x40
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fc96 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e005      	b.n	800587c <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
  }
}
 800587c:	4618      	mov	r0, r3
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b0a0      	sub	sp, #128	@ 0x80
 800588a:	af00      	add	r7, sp, #0
 800588c:	65f8      	str	r0, [r7, #92]	@ 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800588e:	2300      	movs	r3, #0
 8005890:	677b      	str	r3, [r7, #116]	@ 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005898:	2300      	movs	r3, #0
 800589a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800589c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	49a4      	ldr	r1, [pc, #656]	@ (8005b4c <UART_SetConfig+0x2c8>)
 80058bc:	4019      	ands	r1, r3
 80058be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d4:	68d9      	ldr	r1, [r3, #12]
 80058d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	ea40 0301 	orr.w	r3, r0, r1
 80058de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b99      	ldr	r3, [pc, #612]	@ (8005b50 <UART_SetConfig+0x2cc>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d004      	beq.n	80058fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058f6:	4313      	orrs	r3, r2
 80058f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800590a:	430b      	orrs	r3, r1
 800590c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800590e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b90      	ldr	r3, [pc, #576]	@ (8005b54 <UART_SetConfig+0x2d0>)
 8005914:	429a      	cmp	r2, r3
 8005916:	d125      	bne.n	8005964 <UART_SetConfig+0xe0>
 8005918:	4b8f      	ldr	r3, [pc, #572]	@ (8005b58 <UART_SetConfig+0x2d4>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d81a      	bhi.n	800595c <UART_SetConfig+0xd8>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0xa8>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	0800593d 	.word	0x0800593d
 8005930:	0800594d 	.word	0x0800594d
 8005934:	08005945 	.word	0x08005945
 8005938:	08005955 	.word	0x08005955
 800593c:	2301      	movs	r3, #1
 800593e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005942:	e116      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005944:	2302      	movs	r3, #2
 8005946:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800594a:	e112      	b.n	8005b72 <UART_SetConfig+0x2ee>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005952:	e10e      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800595a:	e10a      	b.n	8005b72 <UART_SetConfig+0x2ee>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005962:	e106      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b7c      	ldr	r3, [pc, #496]	@ (8005b5c <UART_SetConfig+0x2d8>)
 800596a:	429a      	cmp	r2, r3
 800596c:	d138      	bne.n	80059e0 <UART_SetConfig+0x15c>
 800596e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b0c      	cmp	r3, #12
 800597a:	d82d      	bhi.n	80059d8 <UART_SetConfig+0x154>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <UART_SetConfig+0x100>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059b9 	.word	0x080059b9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059d9 	.word	0x080059d9
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059c9 	.word	0x080059c9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	080059d9 	.word	0x080059d9
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80059be:	e0d8      	b.n	8005b72 <UART_SetConfig+0x2ee>
 80059c0:	2302      	movs	r3, #2
 80059c2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80059c6:	e0d4      	b.n	8005b72 <UART_SetConfig+0x2ee>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80059ce:	e0d0      	b.n	8005b72 <UART_SetConfig+0x2ee>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80059d6:	e0cc      	b.n	8005b72 <UART_SetConfig+0x2ee>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80059de:	e0c8      	b.n	8005b72 <UART_SetConfig+0x2ee>
 80059e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b60 <UART_SetConfig+0x2dc>)
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d125      	bne.n	8005a36 <UART_SetConfig+0x1b2>
 80059ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005b58 <UART_SetConfig+0x2d4>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059f4:	2b30      	cmp	r3, #48	@ 0x30
 80059f6:	d016      	beq.n	8005a26 <UART_SetConfig+0x1a2>
 80059f8:	2b30      	cmp	r3, #48	@ 0x30
 80059fa:	d818      	bhi.n	8005a2e <UART_SetConfig+0x1aa>
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d00a      	beq.n	8005a16 <UART_SetConfig+0x192>
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d814      	bhi.n	8005a2e <UART_SetConfig+0x1aa>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <UART_SetConfig+0x18a>
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d008      	beq.n	8005a1e <UART_SetConfig+0x19a>
 8005a0c:	e00f      	b.n	8005a2e <UART_SetConfig+0x1aa>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a14:	e0ad      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a16:	2302      	movs	r3, #2
 8005a18:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a1c:	e0a9      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a1e:	2304      	movs	r3, #4
 8005a20:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a24:	e0a5      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a26:	2308      	movs	r3, #8
 8005a28:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a2c:	e0a1      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a2e:	2310      	movs	r3, #16
 8005a30:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a34:	e09d      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b64 <UART_SetConfig+0x2e0>)
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d125      	bne.n	8005a8c <UART_SetConfig+0x208>
 8005a40:	4b45      	ldr	r3, [pc, #276]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a4c:	d016      	beq.n	8005a7c <UART_SetConfig+0x1f8>
 8005a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a50:	d818      	bhi.n	8005a84 <UART_SetConfig+0x200>
 8005a52:	2b80      	cmp	r3, #128	@ 0x80
 8005a54:	d00a      	beq.n	8005a6c <UART_SetConfig+0x1e8>
 8005a56:	2b80      	cmp	r3, #128	@ 0x80
 8005a58:	d814      	bhi.n	8005a84 <UART_SetConfig+0x200>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <UART_SetConfig+0x1e0>
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d008      	beq.n	8005a74 <UART_SetConfig+0x1f0>
 8005a62:	e00f      	b.n	8005a84 <UART_SetConfig+0x200>
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a6a:	e082      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a72:	e07e      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a7a:	e07a      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a82:	e076      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005a8a:	e072      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4b35      	ldr	r3, [pc, #212]	@ (8005b68 <UART_SetConfig+0x2e4>)
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d12a      	bne.n	8005aec <UART_SetConfig+0x268>
 8005a96:	4b30      	ldr	r3, [pc, #192]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aa4:	d01a      	beq.n	8005adc <UART_SetConfig+0x258>
 8005aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aaa:	d81b      	bhi.n	8005ae4 <UART_SetConfig+0x260>
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab0:	d00c      	beq.n	8005acc <UART_SetConfig+0x248>
 8005ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab6:	d815      	bhi.n	8005ae4 <UART_SetConfig+0x260>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <UART_SetConfig+0x240>
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac0:	d008      	beq.n	8005ad4 <UART_SetConfig+0x250>
 8005ac2:	e00f      	b.n	8005ae4 <UART_SetConfig+0x260>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005aca:	e052      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005acc:	2302      	movs	r3, #2
 8005ace:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005ad2:	e04e      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005ada:	e04a      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005ae2:	e046      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005aea:	e042      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b17      	ldr	r3, [pc, #92]	@ (8005b50 <UART_SetConfig+0x2cc>)
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d13a      	bne.n	8005b6c <UART_SetConfig+0x2e8>
 8005af6:	4b18      	ldr	r3, [pc, #96]	@ (8005b58 <UART_SetConfig+0x2d4>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b04:	d01a      	beq.n	8005b3c <UART_SetConfig+0x2b8>
 8005b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b0a:	d81b      	bhi.n	8005b44 <UART_SetConfig+0x2c0>
 8005b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b10:	d00c      	beq.n	8005b2c <UART_SetConfig+0x2a8>
 8005b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b16:	d815      	bhi.n	8005b44 <UART_SetConfig+0x2c0>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <UART_SetConfig+0x2a0>
 8005b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b20:	d008      	beq.n	8005b34 <UART_SetConfig+0x2b0>
 8005b22:	e00f      	b.n	8005b44 <UART_SetConfig+0x2c0>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005b2a:	e022      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005b32:	e01e      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005b3a:	e01a      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005b42:	e016      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8005b4a:	e012      	b.n	8005b72 <UART_SetConfig+0x2ee>
 8005b4c:	efff69f3 	.word	0xefff69f3
 8005b50:	40008000 	.word	0x40008000
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40004400 	.word	0x40004400
 8005b60:	40004800 	.word	0x40004800
 8005b64:	40004c00 	.word	0x40004c00
 8005b68:	40005000 	.word	0x40005000
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4bb6      	ldr	r3, [pc, #728]	@ (8005e50 <UART_SetConfig+0x5cc>)
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	f040 810c 	bne.w	8005d96 <UART_SetConfig+0x512>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b7e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d823      	bhi.n	8005bce <UART_SetConfig+0x34a>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x308>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005bbf 	.word	0x08005bbf
 8005ba0:	08005bcf 	.word	0x08005bcf
 8005ba4:	08005bcf 	.word	0x08005bcf
 8005ba8:	08005bcf 	.word	0x08005bcf
 8005bac:	08005bc7 	.word	0x08005bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005bb0:	f7ff fd28 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8005bb4:	66f8      	str	r0, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bb6:	e00e      	b.n	8005bd6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005bb8:	4ba6      	ldr	r3, [pc, #664]	@ (8005e54 <UART_SetConfig+0x5d0>)
 8005bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bbc:	e00b      	b.n	8005bd6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005bbe:	f7ff fc89 	bl	80054d4 <HAL_RCC_GetSysClockFreq>
 8005bc2:	66f8      	str	r0, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bc4:	e007      	b.n	8005bd6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bca:	66fb      	str	r3, [r7, #108]	@ 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bcc:	e003      	b.n	8005bd6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 8005bd4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 81e5 	beq.w	8005fa8 <UART_SetConfig+0x724>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	441a      	add	r2, r3
 8005be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d305      	bcc.n	8005bfa <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d903      	bls.n	8005c02 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8005c00:	e1d2      	b.n	8005fa8 <UART_SetConfig+0x724>
      }
      else
      {
        switch (clocksource)
 8005c02:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	f200 80b0 	bhi.w	8005d6c <UART_SetConfig+0x4e8>
 8005c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <UART_SetConfig+0x390>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005d6d 	.word	0x08005d6d
 8005c1c:	08005c99 	.word	0x08005c99
 8005c20:	08005d6d 	.word	0x08005d6d
 8005c24:	08005cd9 	.word	0x08005cd9
 8005c28:	08005d6d 	.word	0x08005d6d
 8005c2c:	08005d6d 	.word	0x08005d6d
 8005c30:	08005d6d 	.word	0x08005d6d
 8005c34:	08005d35 	.word	0x08005d35
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005c38:	f7ff fce4 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8005c3c:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c40:	2200      	movs	r2, #0
 8005c42:	4698      	mov	r8, r3
 8005c44:	4691      	mov	r9, r2
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8005c52:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8005c56:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8005c5a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005c5c:	6849      	ldr	r1, [r1, #4]
 8005c5e:	0849      	lsrs	r1, r1, #1
 8005c60:	2000      	movs	r0, #0
 8005c62:	6539      	str	r1, [r7, #80]	@ 0x50
 8005c64:	6578      	str	r0, [r7, #84]	@ 0x54
 8005c66:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	1851      	adds	r1, r2, r1
 8005c6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c70:	4629      	mov	r1, r5
 8005c72:	eb43 0101 	adc.w	r1, r3, r1
 8005c76:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8005c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c80:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8005c8a:	f7fa ffdd 	bl	8000c48 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4613      	mov	r3, r2
 8005c94:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c96:	e06d      	b.n	8005d74 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	085b      	lsrs	r3, r3, #1
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8005e58 <UART_SetConfig+0x5d4>)
 8005ca6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8005caa:	4602      	mov	r2, r0
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	f143 0300 	adc.w	r3, r3, #0
 8005cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005cca:	f7fa ffbd 	bl	8000c48 <__aeabi_uldivmod>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cd6:	e04d      	b.n	8005d74 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005cd8:	f7ff fbfc 	bl	80054d4 <HAL_RCC_GetSysClockFreq>
 8005cdc:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	461c      	mov	r4, r3
 8005ce4:	4615      	mov	r5, r2
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	022b      	lsls	r3, r5, #8
 8005cf0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cf4:	0222      	lsls	r2, r4, #8
 8005cf6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005cf8:	6849      	ldr	r1, [r1, #4]
 8005cfa:	0849      	lsrs	r1, r1, #1
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	6239      	str	r1, [r7, #32]
 8005d00:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d02:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d06:	4621      	mov	r1, r4
 8005d08:	1851      	adds	r1, r2, r1
 8005d0a:	61b9      	str	r1, [r7, #24]
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	eb43 0101 	adc.w	r1, r3, r1
 8005d12:	61f9      	str	r1, [r7, #28]
 8005d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	617a      	str	r2, [r7, #20]
 8005d1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005d26:	f7fa ff8f 	bl	8000c48 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d32:	e01f      	b.n	8005d74 <UART_SetConfig+0x4f0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	469a      	mov	sl, r3
 8005d3e:	4693      	mov	fp, r2
 8005d40:	f51a 0300 	adds.w	r3, sl, #8388608	@ 0x800000
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	f14b 0300 	adc.w	r3, fp, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d5e:	f7fa ff73 	bl	8000c48 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4613      	mov	r3, r2
 8005d68:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d6a:	e003      	b.n	8005d74 <UART_SetConfig+0x4f0>
          default:
            ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            break;
 8005d72:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d7a:	d308      	bcc.n	8005d8e <UART_SetConfig+0x50a>
 8005d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d82:	d204      	bcs.n	8005d8e <UART_SetConfig+0x50a>
        {
          huart->Instance->BRR = usartdiv;
 8005d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d8a:	60da      	str	r2, [r3, #12]
 8005d8c:	e10c      	b.n	8005fa8 <UART_SetConfig+0x724>
        }
        else
        {
          ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8005d94:	e108      	b.n	8005fa8 <UART_SetConfig+0x724>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d9e:	f040 808f 	bne.w	8005ec0 <UART_SetConfig+0x63c>
  {
    switch (clocksource)
 8005da2:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d864      	bhi.n	8005e74 <UART_SetConfig+0x5f0>
 8005daa:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <UART_SetConfig+0x52c>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005df5 	.word	0x08005df5
 8005db8:	08005e15 	.word	0x08005e15
 8005dbc:	08005e75 	.word	0x08005e75
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005e75 	.word	0x08005e75
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e75 	.word	0x08005e75
 8005dd0:	08005e5d 	.word	0x08005e5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd4:	f7ff fc16 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8005dd8:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ddc:	005a      	lsls	r2, r3, #1
 8005dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	441a      	add	r2, r3
 8005de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005df2:	e043      	b.n	8005e7c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df4:	f7ff fc1c 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 8005df8:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dfc:	005a      	lsls	r2, r3, #1
 8005dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e12:	e033      	b.n	8005e7c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8005e1e:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8005e22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e24:	6852      	ldr	r2, [r2, #4]
 8005e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e2e:	e025      	b.n	8005e7c <UART_SetConfig+0x5f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e30:	f7ff fb50 	bl	80054d4 <HAL_RCC_GetSysClockFreq>
 8005e34:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e38:	005a      	lsls	r2, r3, #1
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	441a      	add	r2, r3
 8005e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e4e:	e015      	b.n	8005e7c <UART_SetConfig+0x5f8>
 8005e50:	40008000 	.word	0x40008000
 8005e54:	00f42400 	.word	0x00f42400
 8005e58:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	085b      	lsrs	r3, r3, #1
 8005e62:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e72:	e003      	b.n	8005e7c <UART_SetConfig+0x5f8>
      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 8005e7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e7e:	2b0f      	cmp	r3, #15
 8005e80:	d91a      	bls.n	8005eb8 <UART_SetConfig+0x634>
 8005e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e88:	d216      	bcs.n	8005eb8 <UART_SetConfig+0x634>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f023 030f 	bic.w	r3, r3, #15
 8005e92:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
      huart->Instance->BRR = brrtemp;
 8005eac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e077      	b.n	8005fa8 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8005ebe:	e073      	b.n	8005fa8 <UART_SetConfig+0x724>
    }
  }
  else
  {
    switch (clocksource)
 8005ec0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d85c      	bhi.n	8005f82 <UART_SetConfig+0x6fe>
 8005ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed0 <UART_SetConfig+0x64c>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005f13 	.word	0x08005f13
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f83 	.word	0x08005f83
 8005ee0:	08005f4d 	.word	0x08005f4d
 8005ee4:	08005f83 	.word	0x08005f83
 8005ee8:	08005f83 	.word	0x08005f83
 8005eec:	08005f83 	.word	0x08005f83
 8005ef0:	08005f6b 	.word	0x08005f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7ff fb86 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	085a      	lsrs	r2, r3, #1
 8005f00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f02:	441a      	add	r2, r3
 8005f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f10:	e03b      	b.n	8005f8a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f12:	f7ff fb8d 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 8005f16:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	085a      	lsrs	r2, r3, #1
 8005f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f20:	441a      	add	r2, r3
 8005f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f2e:	e02c      	b.n	8005f8a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	085b      	lsrs	r3, r3, #1
 8005f36:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 8005f3a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005f3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f40:	6852      	ldr	r2, [r2, #4]
 8005f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f4a:	e01e      	b.n	8005f8a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4c:	f7ff fac2 	bl	80054d4 <HAL_RCC_GetSysClockFreq>
 8005f50:	66b8      	str	r0, [r7, #104]	@ 0x68
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	085a      	lsrs	r2, r3, #1
 8005f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f5a:	441a      	add	r2, r3
 8005f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f68:	e00f      	b.n	8005f8a <UART_SetConfig+0x706>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8005f74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	677b      	str	r3, [r7, #116]	@ 0x74
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f80:	e003      	b.n	8005f8a <UART_SetConfig+0x706>
      default:
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        break;
 8005f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f8c:	2b0f      	cmp	r3, #15
 8005f8e:	d908      	bls.n	8005fa2 <UART_SetConfig+0x71e>
 8005f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f96:	d204      	bcs.n	8005fa2 <UART_SetConfig+0x71e>
    {
      huart->Instance->BRR = usartdiv;
 8005f98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e002      	b.n	8005fa8 <UART_SetConfig+0x724>
    }
    else
    {
      ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005faa:	2200      	movs	r2, #0
 8005fac:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8005fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8005fb4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3780      	adds	r7, #128	@ 0x80
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc2:	bf00      	nop

08005fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01a      	beq.n	80060da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c2:	d10a      	bne.n	80060da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006116:	f7fe f86b 	bl	80041f0 <HAL_GetTick>
 800611a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b08      	cmp	r3, #8
 8006128:	d10e      	bne.n	8006148 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f82a 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e020      	b.n	800618a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b04      	cmp	r3, #4
 8006154:	d10e      	bne.n	8006174 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f814 	bl	8006192 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e00a      	b.n	800618a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a2:	e05d      	b.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d059      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ac:	f7fe f820 	bl	80041f0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11b      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80061d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e042      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d02b      	beq.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006216:	d123      	bne.n	8006260 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006220:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006230:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e00f      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	bf0c      	ite	eq
 8006270:	2301      	moveq	r3, #1
 8006272:	2300      	movne	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	429a      	cmp	r2, r3
 800627c:	d092      	beq.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <findslot>:
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <findslot+0x2c>)
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	b118      	cbz	r0, 800629a <findslot+0x12>
 8006292:	6a03      	ldr	r3, [r0, #32]
 8006294:	b90b      	cbnz	r3, 800629a <findslot+0x12>
 8006296:	f000 ff71 	bl	800717c <__sinit>
 800629a:	2c13      	cmp	r4, #19
 800629c:	d807      	bhi.n	80062ae <findslot+0x26>
 800629e:	4806      	ldr	r0, [pc, #24]	@ (80062b8 <findslot+0x30>)
 80062a0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80062a4:	3201      	adds	r2, #1
 80062a6:	d002      	beq.n	80062ae <findslot+0x26>
 80062a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80062ac:	bd10      	pop	{r4, pc}
 80062ae:	2000      	movs	r0, #0
 80062b0:	e7fc      	b.n	80062ac <findslot+0x24>
 80062b2:	bf00      	nop
 80062b4:	20000244 	.word	0x20000244
 80062b8:	200005a4 	.word	0x200005a4

080062bc <error>:
 80062bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062be:	4604      	mov	r4, r0
 80062c0:	f001 f8dc 	bl	800747c <__errno>
 80062c4:	2613      	movs	r6, #19
 80062c6:	4605      	mov	r5, r0
 80062c8:	2700      	movs	r7, #0
 80062ca:	4630      	mov	r0, r6
 80062cc:	4639      	mov	r1, r7
 80062ce:	beab      	bkpt	0x00ab
 80062d0:	4606      	mov	r6, r0
 80062d2:	602e      	str	r6, [r5, #0]
 80062d4:	4620      	mov	r0, r4
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062d8 <checkerror>:
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d101      	bne.n	80062e0 <checkerror+0x8>
 80062dc:	f7ff bfee 	b.w	80062bc <error>
 80062e0:	4770      	bx	lr

080062e2 <_swiread>:
 80062e2:	b530      	push	{r4, r5, lr}
 80062e4:	b085      	sub	sp, #20
 80062e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80062ea:	9203      	str	r2, [sp, #12]
 80062ec:	2406      	movs	r4, #6
 80062ee:	ad01      	add	r5, sp, #4
 80062f0:	4620      	mov	r0, r4
 80062f2:	4629      	mov	r1, r5
 80062f4:	beab      	bkpt	0x00ab
 80062f6:	4604      	mov	r4, r0
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff ffed 	bl	80062d8 <checkerror>
 80062fe:	b005      	add	sp, #20
 8006300:	bd30      	pop	{r4, r5, pc}

08006302 <_read>:
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	460e      	mov	r6, r1
 8006306:	4614      	mov	r4, r2
 8006308:	f7ff ffbe 	bl	8006288 <findslot>
 800630c:	4605      	mov	r5, r0
 800630e:	b930      	cbnz	r0, 800631e <_read+0x1c>
 8006310:	f001 f8b4 	bl	800747c <__errno>
 8006314:	2309      	movs	r3, #9
 8006316:	6003      	str	r3, [r0, #0]
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	6800      	ldr	r0, [r0, #0]
 8006320:	4622      	mov	r2, r4
 8006322:	4631      	mov	r1, r6
 8006324:	f7ff ffdd 	bl	80062e2 <_swiread>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d0f5      	beq.n	8006318 <_read+0x16>
 800632c:	686b      	ldr	r3, [r5, #4]
 800632e:	1a20      	subs	r0, r4, r0
 8006330:	4403      	add	r3, r0
 8006332:	606b      	str	r3, [r5, #4]
 8006334:	e7f2      	b.n	800631c <_read+0x1a>

08006336 <_swilseek>:
 8006336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006338:	460c      	mov	r4, r1
 800633a:	4616      	mov	r6, r2
 800633c:	f7ff ffa4 	bl	8006288 <findslot>
 8006340:	4605      	mov	r5, r0
 8006342:	b940      	cbnz	r0, 8006356 <_swilseek+0x20>
 8006344:	f001 f89a 	bl	800747c <__errno>
 8006348:	2309      	movs	r3, #9
 800634a:	6003      	str	r3, [r0, #0]
 800634c:	f04f 34ff 	mov.w	r4, #4294967295
 8006350:	4620      	mov	r0, r4
 8006352:	b003      	add	sp, #12
 8006354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006356:	2e02      	cmp	r6, #2
 8006358:	d903      	bls.n	8006362 <_swilseek+0x2c>
 800635a:	f001 f88f 	bl	800747c <__errno>
 800635e:	2316      	movs	r3, #22
 8006360:	e7f3      	b.n	800634a <_swilseek+0x14>
 8006362:	2e01      	cmp	r6, #1
 8006364:	d112      	bne.n	800638c <_swilseek+0x56>
 8006366:	6843      	ldr	r3, [r0, #4]
 8006368:	18e4      	adds	r4, r4, r3
 800636a:	d4f6      	bmi.n	800635a <_swilseek+0x24>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	260a      	movs	r6, #10
 8006370:	e9cd 3400 	strd	r3, r4, [sp]
 8006374:	466f      	mov	r7, sp
 8006376:	4630      	mov	r0, r6
 8006378:	4639      	mov	r1, r7
 800637a:	beab      	bkpt	0x00ab
 800637c:	4606      	mov	r6, r0
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff ffaa 	bl	80062d8 <checkerror>
 8006384:	2800      	cmp	r0, #0
 8006386:	dbe1      	blt.n	800634c <_swilseek+0x16>
 8006388:	606c      	str	r4, [r5, #4]
 800638a:	e7e1      	b.n	8006350 <_swilseek+0x1a>
 800638c:	2e02      	cmp	r6, #2
 800638e:	6803      	ldr	r3, [r0, #0]
 8006390:	d1ec      	bne.n	800636c <_swilseek+0x36>
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	260c      	movs	r6, #12
 8006396:	466f      	mov	r7, sp
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	beab      	bkpt	0x00ab
 800639e:	4606      	mov	r6, r0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff ff99 	bl	80062d8 <checkerror>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	d0d0      	beq.n	800634c <_swilseek+0x16>
 80063aa:	4404      	add	r4, r0
 80063ac:	e7de      	b.n	800636c <_swilseek+0x36>

080063ae <_lseek>:
 80063ae:	f7ff bfc2 	b.w	8006336 <_swilseek>

080063b2 <_swiwrite>:
 80063b2:	b530      	push	{r4, r5, lr}
 80063b4:	b085      	sub	sp, #20
 80063b6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80063ba:	9203      	str	r2, [sp, #12]
 80063bc:	2405      	movs	r4, #5
 80063be:	ad01      	add	r5, sp, #4
 80063c0:	4620      	mov	r0, r4
 80063c2:	4629      	mov	r1, r5
 80063c4:	beab      	bkpt	0x00ab
 80063c6:	4604      	mov	r4, r0
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7ff ff85 	bl	80062d8 <checkerror>
 80063ce:	b005      	add	sp, #20
 80063d0:	bd30      	pop	{r4, r5, pc}

080063d2 <_write>:
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	460e      	mov	r6, r1
 80063d6:	4615      	mov	r5, r2
 80063d8:	f7ff ff56 	bl	8006288 <findslot>
 80063dc:	4604      	mov	r4, r0
 80063de:	b930      	cbnz	r0, 80063ee <_write+0x1c>
 80063e0:	f001 f84c 	bl	800747c <__errno>
 80063e4:	2309      	movs	r3, #9
 80063e6:	6003      	str	r3, [r0, #0]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
 80063ee:	6800      	ldr	r0, [r0, #0]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4631      	mov	r1, r6
 80063f4:	f7ff ffdd 	bl	80063b2 <_swiwrite>
 80063f8:	1e03      	subs	r3, r0, #0
 80063fa:	dbf5      	blt.n	80063e8 <_write+0x16>
 80063fc:	6862      	ldr	r2, [r4, #4]
 80063fe:	1ae8      	subs	r0, r5, r3
 8006400:	4402      	add	r2, r0
 8006402:	42ab      	cmp	r3, r5
 8006404:	6062      	str	r2, [r4, #4]
 8006406:	d1f1      	bne.n	80063ec <_write+0x1a>
 8006408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff bf55 	b.w	80062bc <error>

08006412 <_swiclose>:
 8006412:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006414:	2402      	movs	r4, #2
 8006416:	9001      	str	r0, [sp, #4]
 8006418:	ad01      	add	r5, sp, #4
 800641a:	4620      	mov	r0, r4
 800641c:	4629      	mov	r1, r5
 800641e:	beab      	bkpt	0x00ab
 8006420:	4604      	mov	r4, r0
 8006422:	4620      	mov	r0, r4
 8006424:	f7ff ff58 	bl	80062d8 <checkerror>
 8006428:	b003      	add	sp, #12
 800642a:	bd30      	pop	{r4, r5, pc}

0800642c <_close>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	f7ff ff2a 	bl	8006288 <findslot>
 8006434:	4604      	mov	r4, r0
 8006436:	b930      	cbnz	r0, 8006446 <_close+0x1a>
 8006438:	f001 f820 	bl	800747c <__errno>
 800643c:	2309      	movs	r3, #9
 800643e:	6003      	str	r3, [r0, #0]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	bd38      	pop	{r3, r4, r5, pc}
 8006446:	3d01      	subs	r5, #1
 8006448:	2d01      	cmp	r5, #1
 800644a:	d809      	bhi.n	8006460 <_close+0x34>
 800644c:	4b07      	ldr	r3, [pc, #28]	@ (800646c <_close+0x40>)
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	429a      	cmp	r2, r3
 8006454:	d104      	bne.n	8006460 <_close+0x34>
 8006456:	f04f 33ff 	mov.w	r3, #4294967295
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	2000      	movs	r0, #0
 800645e:	e7f1      	b.n	8006444 <_close+0x18>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	f7ff ffd6 	bl	8006412 <_swiclose>
 8006466:	2800      	cmp	r0, #0
 8006468:	d0f5      	beq.n	8006456 <_close+0x2a>
 800646a:	e7eb      	b.n	8006444 <_close+0x18>
 800646c:	200005a4 	.word	0x200005a4

08006470 <_getpid>:
 8006470:	2001      	movs	r0, #1
 8006472:	4770      	bx	lr

08006474 <_swistat>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	460c      	mov	r4, r1
 8006478:	f7ff ff06 	bl	8006288 <findslot>
 800647c:	4605      	mov	r5, r0
 800647e:	b930      	cbnz	r0, 800648e <_swistat+0x1a>
 8006480:	f000 fffc 	bl	800747c <__errno>
 8006484:	2309      	movs	r3, #9
 8006486:	6003      	str	r3, [r0, #0]
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800649a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800649c:	260c      	movs	r6, #12
 800649e:	4630      	mov	r0, r6
 80064a0:	4629      	mov	r1, r5
 80064a2:	beab      	bkpt	0x00ab
 80064a4:	4605      	mov	r5, r0
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff ff16 	bl	80062d8 <checkerror>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d0eb      	beq.n	8006488 <_swistat+0x14>
 80064b0:	6120      	str	r0, [r4, #16]
 80064b2:	2000      	movs	r0, #0
 80064b4:	e7ea      	b.n	800648c <_swistat+0x18>

080064b6 <_fstat>:
 80064b6:	460b      	mov	r3, r1
 80064b8:	b510      	push	{r4, lr}
 80064ba:	2100      	movs	r1, #0
 80064bc:	4604      	mov	r4, r0
 80064be:	2258      	movs	r2, #88	@ 0x58
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 ff89 	bl	80073d8 <memset>
 80064c6:	4601      	mov	r1, r0
 80064c8:	4620      	mov	r0, r4
 80064ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ce:	f7ff bfd1 	b.w	8006474 <_swistat>

080064d2 <_stat>:
 80064d2:	b538      	push	{r3, r4, r5, lr}
 80064d4:	460d      	mov	r5, r1
 80064d6:	4604      	mov	r4, r0
 80064d8:	2258      	movs	r2, #88	@ 0x58
 80064da:	2100      	movs	r1, #0
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 ff7b 	bl	80073d8 <memset>
 80064e2:	4620      	mov	r0, r4
 80064e4:	2100      	movs	r1, #0
 80064e6:	f000 f811 	bl	800650c <_swiopen>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	4604      	mov	r4, r0
 80064ee:	d00b      	beq.n	8006508 <_stat+0x36>
 80064f0:	686b      	ldr	r3, [r5, #4]
 80064f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064f6:	606b      	str	r3, [r5, #4]
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7ff ffbb 	bl	8006474 <_swistat>
 80064fe:	4605      	mov	r5, r0
 8006500:	4620      	mov	r0, r4
 8006502:	f7ff ff93 	bl	800642c <_close>
 8006506:	462c      	mov	r4, r5
 8006508:	4620      	mov	r0, r4
 800650a:	bd38      	pop	{r3, r4, r5, pc}

0800650c <_swiopen>:
 800650c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	4f29      	ldr	r7, [pc, #164]	@ (80065b8 <_swiopen+0xac>)
 8006512:	b096      	sub	sp, #88	@ 0x58
 8006514:	4682      	mov	sl, r0
 8006516:	460e      	mov	r6, r1
 8006518:	2400      	movs	r4, #0
 800651a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800651e:	3301      	adds	r3, #1
 8006520:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006524:	d00c      	beq.n	8006540 <_swiopen+0x34>
 8006526:	3401      	adds	r4, #1
 8006528:	2c14      	cmp	r4, #20
 800652a:	d1f6      	bne.n	800651a <_swiopen+0xe>
 800652c:	f000 ffa6 	bl	800747c <__errno>
 8006530:	2318      	movs	r3, #24
 8006532:	6003      	str	r3, [r0, #0]
 8006534:	f04f 34ff 	mov.w	r4, #4294967295
 8006538:	4620      	mov	r0, r4
 800653a:	b016      	add	sp, #88	@ 0x58
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006544:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006548:	46e9      	mov	r9, sp
 800654a:	d109      	bne.n	8006560 <_swiopen+0x54>
 800654c:	4649      	mov	r1, r9
 800654e:	4650      	mov	r0, sl
 8006550:	f7ff ffbf 	bl	80064d2 <_stat>
 8006554:	3001      	adds	r0, #1
 8006556:	d003      	beq.n	8006560 <_swiopen+0x54>
 8006558:	f000 ff90 	bl	800747c <__errno>
 800655c:	2311      	movs	r3, #17
 800655e:	e7e8      	b.n	8006532 <_swiopen+0x26>
 8006560:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006564:	f240 6301 	movw	r3, #1537	@ 0x601
 8006568:	07b2      	lsls	r2, r6, #30
 800656a:	bf48      	it	mi
 800656c:	f045 0502 	orrmi.w	r5, r5, #2
 8006570:	421e      	tst	r6, r3
 8006572:	bf18      	it	ne
 8006574:	f045 0504 	orrne.w	r5, r5, #4
 8006578:	0733      	lsls	r3, r6, #28
 800657a:	bf48      	it	mi
 800657c:	f025 0504 	bicmi.w	r5, r5, #4
 8006580:	4650      	mov	r0, sl
 8006582:	bf48      	it	mi
 8006584:	f045 0508 	orrmi.w	r5, r5, #8
 8006588:	f8cd a000 	str.w	sl, [sp]
 800658c:	f7f9 fe70 	bl	8000270 <strlen>
 8006590:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006594:	2501      	movs	r5, #1
 8006596:	4628      	mov	r0, r5
 8006598:	4649      	mov	r1, r9
 800659a:	beab      	bkpt	0x00ab
 800659c:	4605      	mov	r5, r0
 800659e:	2d00      	cmp	r5, #0
 80065a0:	db05      	blt.n	80065ae <_swiopen+0xa2>
 80065a2:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80065a6:	4447      	add	r7, r8
 80065a8:	2300      	movs	r3, #0
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	e7c4      	b.n	8006538 <_swiopen+0x2c>
 80065ae:	4628      	mov	r0, r5
 80065b0:	f7ff fe84 	bl	80062bc <error>
 80065b4:	4604      	mov	r4, r0
 80065b6:	e7bf      	b.n	8006538 <_swiopen+0x2c>
 80065b8:	200005a4 	.word	0x200005a4

080065bc <_get_semihosting_exts>:
 80065bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	4829      	ldr	r0, [pc, #164]	@ (800666c <_get_semihosting_exts+0xb0>)
 80065c6:	2100      	movs	r1, #0
 80065c8:	4615      	mov	r5, r2
 80065ca:	f7ff ff9f 	bl	800650c <_swiopen>
 80065ce:	462a      	mov	r2, r5
 80065d0:	4604      	mov	r4, r0
 80065d2:	2100      	movs	r1, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 feff 	bl	80073d8 <memset>
 80065da:	1c63      	adds	r3, r4, #1
 80065dc:	d014      	beq.n	8006608 <_get_semihosting_exts+0x4c>
 80065de:	4620      	mov	r0, r4
 80065e0:	f7ff fe52 	bl	8006288 <findslot>
 80065e4:	f04f 080c 	mov.w	r8, #12
 80065e8:	4681      	mov	r9, r0
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	beab      	bkpt	0x00ab
 80065f0:	4680      	mov	r8, r0
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff fe70 	bl	80062d8 <checkerror>
 80065f8:	2803      	cmp	r0, #3
 80065fa:	dd02      	ble.n	8006602 <_get_semihosting_exts+0x46>
 80065fc:	1ec3      	subs	r3, r0, #3
 80065fe:	42ab      	cmp	r3, r5
 8006600:	dc07      	bgt.n	8006612 <_get_semihosting_exts+0x56>
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff ff12 	bl	800642c <_close>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	b003      	add	sp, #12
 800660e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006612:	2204      	movs	r2, #4
 8006614:	eb0d 0102 	add.w	r1, sp, r2
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff fe72 	bl	8006302 <_read>
 800661e:	2803      	cmp	r0, #3
 8006620:	ddef      	ble.n	8006602 <_get_semihosting_exts+0x46>
 8006622:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006626:	2b53      	cmp	r3, #83	@ 0x53
 8006628:	d1eb      	bne.n	8006602 <_get_semihosting_exts+0x46>
 800662a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800662e:	2b48      	cmp	r3, #72	@ 0x48
 8006630:	d1e7      	bne.n	8006602 <_get_semihosting_exts+0x46>
 8006632:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006636:	2b46      	cmp	r3, #70	@ 0x46
 8006638:	d1e3      	bne.n	8006602 <_get_semihosting_exts+0x46>
 800663a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800663e:	2b42      	cmp	r3, #66	@ 0x42
 8006640:	d1df      	bne.n	8006602 <_get_semihosting_exts+0x46>
 8006642:	2201      	movs	r2, #1
 8006644:	4639      	mov	r1, r7
 8006646:	4620      	mov	r0, r4
 8006648:	f7ff fe75 	bl	8006336 <_swilseek>
 800664c:	2800      	cmp	r0, #0
 800664e:	dbd8      	blt.n	8006602 <_get_semihosting_exts+0x46>
 8006650:	462a      	mov	r2, r5
 8006652:	4631      	mov	r1, r6
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff fe54 	bl	8006302 <_read>
 800665a:	4605      	mov	r5, r0
 800665c:	4620      	mov	r0, r4
 800665e:	f7ff fee5 	bl	800642c <_close>
 8006662:	4628      	mov	r0, r5
 8006664:	f7ff fe38 	bl	80062d8 <checkerror>
 8006668:	e7d0      	b.n	800660c <_get_semihosting_exts+0x50>
 800666a:	bf00      	nop
 800666c:	0800c2a0 	.word	0x0800c2a0

08006670 <initialise_semihosting_exts>:
 8006670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006672:	4d0a      	ldr	r5, [pc, #40]	@ (800669c <initialise_semihosting_exts+0x2c>)
 8006674:	4c0a      	ldr	r4, [pc, #40]	@ (80066a0 <initialise_semihosting_exts+0x30>)
 8006676:	2100      	movs	r1, #0
 8006678:	2201      	movs	r2, #1
 800667a:	a801      	add	r0, sp, #4
 800667c:	6029      	str	r1, [r5, #0]
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	f7ff ff9c 	bl	80065bc <_get_semihosting_exts>
 8006684:	2800      	cmp	r0, #0
 8006686:	dd07      	ble.n	8006698 <initialise_semihosting_exts+0x28>
 8006688:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800668c:	f003 0201 	and.w	r2, r3, #1
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	b003      	add	sp, #12
 800669a:	bd30      	pop	{r4, r5, pc}
 800669c:	20000234 	.word	0x20000234
 80066a0:	20000230 	.word	0x20000230

080066a4 <_has_ext_stdout_stderr>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4c04      	ldr	r4, [pc, #16]	@ (80066b8 <_has_ext_stdout_stderr+0x14>)
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da01      	bge.n	80066b2 <_has_ext_stdout_stderr+0xe>
 80066ae:	f7ff ffdf 	bl	8006670 <initialise_semihosting_exts>
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	bf00      	nop
 80066b8:	20000230 	.word	0x20000230

080066bc <initialise_monitor_handles>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	b085      	sub	sp, #20
 80066c2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006774 <initialise_monitor_handles+0xb8>
 80066c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80066ca:	2303      	movs	r3, #3
 80066cc:	2400      	movs	r4, #0
 80066ce:	9303      	str	r3, [sp, #12]
 80066d0:	af01      	add	r7, sp, #4
 80066d2:	9402      	str	r4, [sp, #8]
 80066d4:	2501      	movs	r5, #1
 80066d6:	4628      	mov	r0, r5
 80066d8:	4639      	mov	r1, r7
 80066da:	beab      	bkpt	0x00ab
 80066dc:	4605      	mov	r5, r0
 80066de:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006778 <initialise_monitor_handles+0xbc>
 80066e2:	4623      	mov	r3, r4
 80066e4:	4c20      	ldr	r4, [pc, #128]	@ (8006768 <initialise_monitor_handles+0xac>)
 80066e6:	f8c8 5000 	str.w	r5, [r8]
 80066ea:	f04f 32ff 	mov.w	r2, #4294967295
 80066ee:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80066f2:	3301      	adds	r3, #1
 80066f4:	2b14      	cmp	r3, #20
 80066f6:	d1fa      	bne.n	80066ee <initialise_monitor_handles+0x32>
 80066f8:	f7ff ffd4 	bl	80066a4 <_has_ext_stdout_stderr>
 80066fc:	4d1b      	ldr	r5, [pc, #108]	@ (800676c <initialise_monitor_handles+0xb0>)
 80066fe:	b1d0      	cbz	r0, 8006736 <initialise_monitor_handles+0x7a>
 8006700:	f04f 0a03 	mov.w	sl, #3
 8006704:	2304      	movs	r3, #4
 8006706:	f8cd 9004 	str.w	r9, [sp, #4]
 800670a:	2601      	movs	r6, #1
 800670c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	beab      	bkpt	0x00ab
 8006718:	4683      	mov	fp, r0
 800671a:	4b15      	ldr	r3, [pc, #84]	@ (8006770 <initialise_monitor_handles+0xb4>)
 800671c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006720:	f8c3 b000 	str.w	fp, [r3]
 8006724:	2308      	movs	r3, #8
 8006726:	f8cd a00c 	str.w	sl, [sp, #12]
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	beab      	bkpt	0x00ab
 8006732:	4606      	mov	r6, r0
 8006734:	602e      	str	r6, [r5, #0]
 8006736:	682b      	ldr	r3, [r5, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	bf02      	ittt	eq
 800673c:	4b0c      	ldreq	r3, [pc, #48]	@ (8006770 <initialise_monitor_handles+0xb4>)
 800673e:	681b      	ldreq	r3, [r3, #0]
 8006740:	602b      	streq	r3, [r5, #0]
 8006742:	2600      	movs	r6, #0
 8006744:	f8d8 3000 	ldr.w	r3, [r8]
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	6066      	str	r6, [r4, #4]
 800674c:	f7ff ffaa 	bl	80066a4 <_has_ext_stdout_stderr>
 8006750:	b130      	cbz	r0, 8006760 <initialise_monitor_handles+0xa4>
 8006752:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <initialise_monitor_handles+0xb4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800675a:	682b      	ldr	r3, [r5, #0]
 800675c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006760:	b005      	add	sp, #20
 8006762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006766:	bf00      	nop
 8006768:	200005a4 	.word	0x200005a4
 800676c:	20000598 	.word	0x20000598
 8006770:	2000059c 	.word	0x2000059c
 8006774:	0800c2b6 	.word	0x0800c2b6
 8006778:	200005a0 	.word	0x200005a0

0800677c <_isatty>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	f7ff fd83 	bl	8006288 <findslot>
 8006782:	2409      	movs	r4, #9
 8006784:	4605      	mov	r5, r0
 8006786:	b920      	cbnz	r0, 8006792 <_isatty+0x16>
 8006788:	f000 fe78 	bl	800747c <__errno>
 800678c:	6004      	str	r4, [r0, #0]
 800678e:	2000      	movs	r0, #0
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	beab      	bkpt	0x00ab
 8006798:	4604      	mov	r4, r0
 800679a:	2c01      	cmp	r4, #1
 800679c:	4620      	mov	r0, r4
 800679e:	d0f7      	beq.n	8006790 <_isatty+0x14>
 80067a0:	f000 fe6c 	bl	800747c <__errno>
 80067a4:	2513      	movs	r5, #19
 80067a6:	4604      	mov	r4, r0
 80067a8:	2600      	movs	r6, #0
 80067aa:	4628      	mov	r0, r5
 80067ac:	4631      	mov	r1, r6
 80067ae:	beab      	bkpt	0x00ab
 80067b0:	4605      	mov	r5, r0
 80067b2:	6025      	str	r5, [r4, #0]
 80067b4:	e7eb      	b.n	800678e <_isatty+0x12>

080067b6 <__cvt>:
 80067b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ba:	ec57 6b10 	vmov	r6, r7, d0
 80067be:	2f00      	cmp	r7, #0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4619      	mov	r1, r3
 80067c4:	463b      	mov	r3, r7
 80067c6:	bfbb      	ittet	lt
 80067c8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067cc:	461f      	movlt	r7, r3
 80067ce:	2300      	movge	r3, #0
 80067d0:	232d      	movlt	r3, #45	@ 0x2d
 80067d2:	700b      	strb	r3, [r1, #0]
 80067d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067d6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067da:	4691      	mov	r9, r2
 80067dc:	f023 0820 	bic.w	r8, r3, #32
 80067e0:	bfbc      	itt	lt
 80067e2:	4632      	movlt	r2, r6
 80067e4:	4616      	movlt	r6, r2
 80067e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067ea:	d005      	beq.n	80067f8 <__cvt+0x42>
 80067ec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067f0:	d100      	bne.n	80067f4 <__cvt+0x3e>
 80067f2:	3401      	adds	r4, #1
 80067f4:	2102      	movs	r1, #2
 80067f6:	e000      	b.n	80067fa <__cvt+0x44>
 80067f8:	2103      	movs	r1, #3
 80067fa:	ab03      	add	r3, sp, #12
 80067fc:	9301      	str	r3, [sp, #4]
 80067fe:	ab02      	add	r3, sp, #8
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	ec47 6b10 	vmov	d0, r6, r7
 8006806:	4653      	mov	r3, sl
 8006808:	4622      	mov	r2, r4
 800680a:	f000 ff19 	bl	8007640 <_dtoa_r>
 800680e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006812:	4605      	mov	r5, r0
 8006814:	d119      	bne.n	800684a <__cvt+0x94>
 8006816:	f019 0f01 	tst.w	r9, #1
 800681a:	d00e      	beq.n	800683a <__cvt+0x84>
 800681c:	eb00 0904 	add.w	r9, r0, r4
 8006820:	2200      	movs	r2, #0
 8006822:	2300      	movs	r3, #0
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7fa f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800682c:	b108      	cbz	r0, 8006832 <__cvt+0x7c>
 800682e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006832:	2230      	movs	r2, #48	@ 0x30
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	454b      	cmp	r3, r9
 8006838:	d31e      	bcc.n	8006878 <__cvt+0xc2>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800683e:	1b5b      	subs	r3, r3, r5
 8006840:	4628      	mov	r0, r5
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	b004      	add	sp, #16
 8006846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800684e:	eb00 0904 	add.w	r9, r0, r4
 8006852:	d1e5      	bne.n	8006820 <__cvt+0x6a>
 8006854:	7803      	ldrb	r3, [r0, #0]
 8006856:	2b30      	cmp	r3, #48	@ 0x30
 8006858:	d10a      	bne.n	8006870 <__cvt+0xba>
 800685a:	2200      	movs	r2, #0
 800685c:	2300      	movs	r3, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7fa f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8006866:	b918      	cbnz	r0, 8006870 <__cvt+0xba>
 8006868:	f1c4 0401 	rsb	r4, r4, #1
 800686c:	f8ca 4000 	str.w	r4, [sl]
 8006870:	f8da 3000 	ldr.w	r3, [sl]
 8006874:	4499      	add	r9, r3
 8006876:	e7d3      	b.n	8006820 <__cvt+0x6a>
 8006878:	1c59      	adds	r1, r3, #1
 800687a:	9103      	str	r1, [sp, #12]
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e7d9      	b.n	8006834 <__cvt+0x7e>

08006880 <__exponent>:
 8006880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006882:	2900      	cmp	r1, #0
 8006884:	bfba      	itte	lt
 8006886:	4249      	neglt	r1, r1
 8006888:	232d      	movlt	r3, #45	@ 0x2d
 800688a:	232b      	movge	r3, #43	@ 0x2b
 800688c:	2909      	cmp	r1, #9
 800688e:	7002      	strb	r2, [r0, #0]
 8006890:	7043      	strb	r3, [r0, #1]
 8006892:	dd29      	ble.n	80068e8 <__exponent+0x68>
 8006894:	f10d 0307 	add.w	r3, sp, #7
 8006898:	461d      	mov	r5, r3
 800689a:	270a      	movs	r7, #10
 800689c:	461a      	mov	r2, r3
 800689e:	fbb1 f6f7 	udiv	r6, r1, r7
 80068a2:	fb07 1416 	mls	r4, r7, r6, r1
 80068a6:	3430      	adds	r4, #48	@ 0x30
 80068a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068ac:	460c      	mov	r4, r1
 80068ae:	2c63      	cmp	r4, #99	@ 0x63
 80068b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80068b4:	4631      	mov	r1, r6
 80068b6:	dcf1      	bgt.n	800689c <__exponent+0x1c>
 80068b8:	3130      	adds	r1, #48	@ 0x30
 80068ba:	1e94      	subs	r4, r2, #2
 80068bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068c0:	1c41      	adds	r1, r0, #1
 80068c2:	4623      	mov	r3, r4
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	d30a      	bcc.n	80068de <__exponent+0x5e>
 80068c8:	f10d 0309 	add.w	r3, sp, #9
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	42ac      	cmp	r4, r5
 80068d0:	bf88      	it	hi
 80068d2:	2300      	movhi	r3, #0
 80068d4:	3302      	adds	r3, #2
 80068d6:	4403      	add	r3, r0
 80068d8:	1a18      	subs	r0, r3, r0
 80068da:	b003      	add	sp, #12
 80068dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068e6:	e7ed      	b.n	80068c4 <__exponent+0x44>
 80068e8:	2330      	movs	r3, #48	@ 0x30
 80068ea:	3130      	adds	r1, #48	@ 0x30
 80068ec:	7083      	strb	r3, [r0, #2]
 80068ee:	70c1      	strb	r1, [r0, #3]
 80068f0:	1d03      	adds	r3, r0, #4
 80068f2:	e7f1      	b.n	80068d8 <__exponent+0x58>

080068f4 <_printf_float>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	b08d      	sub	sp, #52	@ 0x34
 80068fa:	460c      	mov	r4, r1
 80068fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006900:	4616      	mov	r6, r2
 8006902:	461f      	mov	r7, r3
 8006904:	4605      	mov	r5, r0
 8006906:	f000 fd6f 	bl	80073e8 <_localeconv_r>
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	4618      	mov	r0, r3
 8006910:	f7f9 fcae 	bl	8000270 <strlen>
 8006914:	2300      	movs	r3, #0
 8006916:	930a      	str	r3, [sp, #40]	@ 0x28
 8006918:	f8d8 3000 	ldr.w	r3, [r8]
 800691c:	9005      	str	r0, [sp, #20]
 800691e:	3307      	adds	r3, #7
 8006920:	f023 0307 	bic.w	r3, r3, #7
 8006924:	f103 0208 	add.w	r2, r3, #8
 8006928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800692c:	f8d4 b000 	ldr.w	fp, [r4]
 8006930:	f8c8 2000 	str.w	r2, [r8]
 8006934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800693c:	9307      	str	r3, [sp, #28]
 800693e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bbc <_printf_float+0x2c8>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8006954:	bb70      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	4b98      	ldr	r3, [pc, #608]	@ (8006bbc <_printf_float+0x2c8>)
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	f7fa f8c6 	bl	8000af0 <__aeabi_dcmple>
 8006964:	bb30      	cbnz	r0, 80069b4 <_printf_float+0xc0>
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4640      	mov	r0, r8
 800696c:	4649      	mov	r1, r9
 800696e:	f7fa f8b5 	bl	8000adc <__aeabi_dcmplt>
 8006972:	b110      	cbz	r0, 800697a <_printf_float+0x86>
 8006974:	232d      	movs	r3, #45	@ 0x2d
 8006976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800697a:	4a91      	ldr	r2, [pc, #580]	@ (8006bc0 <_printf_float+0x2cc>)
 800697c:	4b91      	ldr	r3, [pc, #580]	@ (8006bc4 <_printf_float+0x2d0>)
 800697e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006982:	bf94      	ite	ls
 8006984:	4690      	movls	r8, r2
 8006986:	4698      	movhi	r8, r3
 8006988:	2303      	movs	r3, #3
 800698a:	6123      	str	r3, [r4, #16]
 800698c:	f02b 0304 	bic.w	r3, fp, #4
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	f04f 0900 	mov.w	r9, #0
 8006996:	9700      	str	r7, [sp, #0]
 8006998:	4633      	mov	r3, r6
 800699a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f9d2 	bl	8006d48 <_printf_common>
 80069a4:	3001      	adds	r0, #1
 80069a6:	f040 808d 	bne.w	8006ac4 <_printf_float+0x1d0>
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295
 80069ae:	b00d      	add	sp, #52	@ 0x34
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	4649      	mov	r1, r9
 80069bc:	f7fa f8b6 	bl	8000b2c <__aeabi_dcmpun>
 80069c0:	b140      	cbz	r0, 80069d4 <_printf_float+0xe0>
 80069c2:	464b      	mov	r3, r9
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfbc      	itt	lt
 80069c8:	232d      	movlt	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069ce:	4a7e      	ldr	r2, [pc, #504]	@ (8006bc8 <_printf_float+0x2d4>)
 80069d0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bcc <_printf_float+0x2d8>)
 80069d2:	e7d4      	b.n	800697e <_printf_float+0x8a>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069da:	9206      	str	r2, [sp, #24]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	d13b      	bne.n	8006a58 <_printf_float+0x164>
 80069e0:	2306      	movs	r3, #6
 80069e2:	6063      	str	r3, [r4, #4]
 80069e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069e8:	2300      	movs	r3, #0
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	9303      	str	r3, [sp, #12]
 80069ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80069f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069f4:	ab09      	add	r3, sp, #36	@ 0x24
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	6861      	ldr	r1, [r4, #4]
 80069fa:	ec49 8b10 	vmov	d0, r8, r9
 80069fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a02:	4628      	mov	r0, r5
 8006a04:	f7ff fed7 	bl	80067b6 <__cvt>
 8006a08:	9b06      	ldr	r3, [sp, #24]
 8006a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a0c:	2b47      	cmp	r3, #71	@ 0x47
 8006a0e:	4680      	mov	r8, r0
 8006a10:	d129      	bne.n	8006a66 <_printf_float+0x172>
 8006a12:	1cc8      	adds	r0, r1, #3
 8006a14:	db02      	blt.n	8006a1c <_printf_float+0x128>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	dd41      	ble.n	8006aa0 <_printf_float+0x1ac>
 8006a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a20:	fa5f fa8a 	uxtb.w	sl, sl
 8006a24:	3901      	subs	r1, #1
 8006a26:	4652      	mov	r2, sl
 8006a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a2e:	f7ff ff27 	bl	8006880 <__exponent>
 8006a32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a34:	1813      	adds	r3, r2, r0
 8006a36:	2a01      	cmp	r2, #1
 8006a38:	4681      	mov	r9, r0
 8006a3a:	6123      	str	r3, [r4, #16]
 8006a3c:	dc02      	bgt.n	8006a44 <_printf_float+0x150>
 8006a3e:	6822      	ldr	r2, [r4, #0]
 8006a40:	07d2      	lsls	r2, r2, #31
 8006a42:	d501      	bpl.n	8006a48 <_printf_float+0x154>
 8006a44:	3301      	adds	r3, #1
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0a2      	beq.n	8006996 <_printf_float+0xa2>
 8006a50:	232d      	movs	r3, #45	@ 0x2d
 8006a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a56:	e79e      	b.n	8006996 <_printf_float+0xa2>
 8006a58:	9a06      	ldr	r2, [sp, #24]
 8006a5a:	2a47      	cmp	r2, #71	@ 0x47
 8006a5c:	d1c2      	bne.n	80069e4 <_printf_float+0xf0>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c0      	bne.n	80069e4 <_printf_float+0xf0>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e7bd      	b.n	80069e2 <_printf_float+0xee>
 8006a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a6a:	d9db      	bls.n	8006a24 <_printf_float+0x130>
 8006a6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a70:	d118      	bne.n	8006aa4 <_printf_float+0x1b0>
 8006a72:	2900      	cmp	r1, #0
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	dd0b      	ble.n	8006a90 <_printf_float+0x19c>
 8006a78:	6121      	str	r1, [r4, #16]
 8006a7a:	b913      	cbnz	r3, 8006a82 <_printf_float+0x18e>
 8006a7c:	6822      	ldr	r2, [r4, #0]
 8006a7e:	07d0      	lsls	r0, r2, #31
 8006a80:	d502      	bpl.n	8006a88 <_printf_float+0x194>
 8006a82:	3301      	adds	r3, #1
 8006a84:	440b      	add	r3, r1
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	e7db      	b.n	8006a48 <_printf_float+0x154>
 8006a90:	b913      	cbnz	r3, 8006a98 <_printf_float+0x1a4>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	07d2      	lsls	r2, r2, #31
 8006a96:	d501      	bpl.n	8006a9c <_printf_float+0x1a8>
 8006a98:	3302      	adds	r3, #2
 8006a9a:	e7f4      	b.n	8006a86 <_printf_float+0x192>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x192>
 8006aa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aa6:	4299      	cmp	r1, r3
 8006aa8:	db05      	blt.n	8006ab6 <_printf_float+0x1c2>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	6121      	str	r1, [r4, #16]
 8006aae:	07d8      	lsls	r0, r3, #31
 8006ab0:	d5ea      	bpl.n	8006a88 <_printf_float+0x194>
 8006ab2:	1c4b      	adds	r3, r1, #1
 8006ab4:	e7e7      	b.n	8006a86 <_printf_float+0x192>
 8006ab6:	2900      	cmp	r1, #0
 8006ab8:	bfd4      	ite	le
 8006aba:	f1c1 0202 	rsble	r2, r1, #2
 8006abe:	2201      	movgt	r2, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	e7e0      	b.n	8006a86 <_printf_float+0x192>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	055a      	lsls	r2, r3, #21
 8006ac8:	d407      	bmi.n	8006ada <_printf_float+0x1e6>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	4642      	mov	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d12b      	bne.n	8006b30 <_printf_float+0x23c>
 8006ad8:	e767      	b.n	80069aa <_printf_float+0xb6>
 8006ada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ade:	f240 80dd 	bls.w	8006c9c <_printf_float+0x3a8>
 8006ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f7f9 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d033      	beq.n	8006b5a <_printf_float+0x266>
 8006af2:	4a37      	ldr	r2, [pc, #220]	@ (8006bd0 <_printf_float+0x2dc>)
 8006af4:	2301      	movs	r3, #1
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f af54 	beq.w	80069aa <_printf_float+0xb6>
 8006b02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b06:	4543      	cmp	r3, r8
 8006b08:	db02      	blt.n	8006b10 <_printf_float+0x21c>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07d8      	lsls	r0, r3, #31
 8006b0e:	d50f      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af45 	beq.w	80069aa <_printf_float+0xb6>
 8006b20:	f04f 0900 	mov.w	r9, #0
 8006b24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b28:	f104 0a1a 	add.w	sl, r4, #26
 8006b2c:	45c8      	cmp	r8, r9
 8006b2e:	dc09      	bgt.n	8006b44 <_printf_float+0x250>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	079b      	lsls	r3, r3, #30
 8006b34:	f100 8103 	bmi.w	8006d3e <_printf_float+0x44a>
 8006b38:	68e0      	ldr	r0, [r4, #12]
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b3c:	4298      	cmp	r0, r3
 8006b3e:	bfb8      	it	lt
 8006b40:	4618      	movlt	r0, r3
 8006b42:	e734      	b.n	80069ae <_printf_float+0xba>
 8006b44:	2301      	movs	r3, #1
 8006b46:	4652      	mov	r2, sl
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af2b 	beq.w	80069aa <_printf_float+0xb6>
 8006b54:	f109 0901 	add.w	r9, r9, #1
 8006b58:	e7e8      	b.n	8006b2c <_printf_float+0x238>
 8006b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc39      	bgt.n	8006bd4 <_printf_float+0x2e0>
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <_printf_float+0x2dc>)
 8006b62:	2301      	movs	r3, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f af1d 	beq.w	80069aa <_printf_float+0xb6>
 8006b70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b74:	ea59 0303 	orrs.w	r3, r9, r3
 8006b78:	d102      	bne.n	8006b80 <_printf_float+0x28c>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07d9      	lsls	r1, r3, #31
 8006b7e:	d5d7      	bpl.n	8006b30 <_printf_float+0x23c>
 8006b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af0d 	beq.w	80069aa <_printf_float+0xb6>
 8006b90:	f04f 0a00 	mov.w	sl, #0
 8006b94:	f104 0b1a 	add.w	fp, r4, #26
 8006b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9a:	425b      	negs	r3, r3
 8006b9c:	4553      	cmp	r3, sl
 8006b9e:	dc01      	bgt.n	8006ba4 <_printf_float+0x2b0>
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	e793      	b.n	8006acc <_printf_float+0x1d8>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	465a      	mov	r2, fp
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f aefb 	beq.w	80069aa <_printf_float+0xb6>
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	e7ee      	b.n	8006b98 <_printf_float+0x2a4>
 8006bba:	bf00      	nop
 8006bbc:	7fefffff 	.word	0x7fefffff
 8006bc0:	0800c2ba 	.word	0x0800c2ba
 8006bc4:	0800c2be 	.word	0x0800c2be
 8006bc8:	0800c2c2 	.word	0x0800c2c2
 8006bcc:	0800c2c6 	.word	0x0800c2c6
 8006bd0:	0800c2ca 	.word	0x0800c2ca
 8006bd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	bfa8      	it	ge
 8006bde:	4653      	movge	r3, sl
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	4699      	mov	r9, r3
 8006be4:	dc36      	bgt.n	8006c54 <_printf_float+0x360>
 8006be6:	f04f 0b00 	mov.w	fp, #0
 8006bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bee:	f104 021a 	add.w	r2, r4, #26
 8006bf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	eba3 0309 	sub.w	r3, r3, r9
 8006bfa:	455b      	cmp	r3, fp
 8006bfc:	dc31      	bgt.n	8006c62 <_printf_float+0x36e>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	459a      	cmp	sl, r3
 8006c02:	dc3a      	bgt.n	8006c7a <_printf_float+0x386>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07da      	lsls	r2, r3, #31
 8006c08:	d437      	bmi.n	8006c7a <_printf_float+0x386>
 8006c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	ebaa 0303 	sub.w	r3, sl, r3
 8006c16:	4599      	cmp	r9, r3
 8006c18:	bfa8      	it	ge
 8006c1a:	4699      	movge	r9, r3
 8006c1c:	f1b9 0f00 	cmp.w	r9, #0
 8006c20:	dc33      	bgt.n	8006c8a <_printf_float+0x396>
 8006c22:	f04f 0800 	mov.w	r8, #0
 8006c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c2a:	f104 0b1a 	add.w	fp, r4, #26
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	ebaa 0303 	sub.w	r3, sl, r3
 8006c34:	eba3 0309 	sub.w	r3, r3, r9
 8006c38:	4543      	cmp	r3, r8
 8006c3a:	f77f af79 	ble.w	8006b30 <_printf_float+0x23c>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	465a      	mov	r2, fp
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f aeae 	beq.w	80069aa <_printf_float+0xb6>
 8006c4e:	f108 0801 	add.w	r8, r8, #1
 8006c52:	e7ec      	b.n	8006c2e <_printf_float+0x33a>
 8006c54:	4642      	mov	r2, r8
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d1c2      	bne.n	8006be6 <_printf_float+0x2f2>
 8006c60:	e6a3      	b.n	80069aa <_printf_float+0xb6>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	9206      	str	r2, [sp, #24]
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae9c 	beq.w	80069aa <_printf_float+0xb6>
 8006c72:	9a06      	ldr	r2, [sp, #24]
 8006c74:	f10b 0b01 	add.w	fp, fp, #1
 8006c78:	e7bb      	b.n	8006bf2 <_printf_float+0x2fe>
 8006c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	d1c0      	bne.n	8006c0a <_printf_float+0x316>
 8006c88:	e68f      	b.n	80069aa <_printf_float+0xb6>
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	4442      	add	r2, r8
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d1c3      	bne.n	8006c22 <_printf_float+0x32e>
 8006c9a:	e686      	b.n	80069aa <_printf_float+0xb6>
 8006c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ca0:	f1ba 0f01 	cmp.w	sl, #1
 8006ca4:	dc01      	bgt.n	8006caa <_printf_float+0x3b6>
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d536      	bpl.n	8006d18 <_printf_float+0x424>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4642      	mov	r2, r8
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae78 	beq.w	80069aa <_printf_float+0xb6>
 8006cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f ae70 	beq.w	80069aa <_printf_float+0xb6>
 8006cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	f7f9 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cda:	b9c0      	cbnz	r0, 8006d0e <_printf_float+0x41a>
 8006cdc:	4653      	mov	r3, sl
 8006cde:	f108 0201 	add.w	r2, r8, #1
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d10c      	bne.n	8006d06 <_printf_float+0x412>
 8006cec:	e65d      	b.n	80069aa <_printf_float+0xb6>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	465a      	mov	r2, fp
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae56 	beq.w	80069aa <_printf_float+0xb6>
 8006cfe:	f108 0801 	add.w	r8, r8, #1
 8006d02:	45d0      	cmp	r8, sl
 8006d04:	dbf3      	blt.n	8006cee <_printf_float+0x3fa>
 8006d06:	464b      	mov	r3, r9
 8006d08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d0c:	e6df      	b.n	8006ace <_printf_float+0x1da>
 8006d0e:	f04f 0800 	mov.w	r8, #0
 8006d12:	f104 0b1a 	add.w	fp, r4, #26
 8006d16:	e7f4      	b.n	8006d02 <_printf_float+0x40e>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	e7e1      	b.n	8006ce2 <_printf_float+0x3ee>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	464a      	mov	r2, r9
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f ae3e 	beq.w	80069aa <_printf_float+0xb6>
 8006d2e:	f108 0801 	add.w	r8, r8, #1
 8006d32:	68e3      	ldr	r3, [r4, #12]
 8006d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d36:	1a5b      	subs	r3, r3, r1
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	dcf0      	bgt.n	8006d1e <_printf_float+0x42a>
 8006d3c:	e6fc      	b.n	8006b38 <_printf_float+0x244>
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	f104 0919 	add.w	r9, r4, #25
 8006d46:	e7f4      	b.n	8006d32 <_printf_float+0x43e>

08006d48 <_printf_common>:
 8006d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	4698      	mov	r8, r3
 8006d50:	688a      	ldr	r2, [r1, #8]
 8006d52:	690b      	ldr	r3, [r1, #16]
 8006d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	bfb8      	it	lt
 8006d5c:	4613      	movlt	r3, r2
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d64:	4607      	mov	r7, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b10a      	cbz	r2, 8006d6e <_printf_common+0x26>
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	0699      	lsls	r1, r3, #26
 8006d72:	bf42      	ittt	mi
 8006d74:	6833      	ldrmi	r3, [r6, #0]
 8006d76:	3302      	addmi	r3, #2
 8006d78:	6033      	strmi	r3, [r6, #0]
 8006d7a:	6825      	ldr	r5, [r4, #0]
 8006d7c:	f015 0506 	ands.w	r5, r5, #6
 8006d80:	d106      	bne.n	8006d90 <_printf_common+0x48>
 8006d82:	f104 0a19 	add.w	sl, r4, #25
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	6832      	ldr	r2, [r6, #0]
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	42ab      	cmp	r3, r5
 8006d8e:	dc26      	bgt.n	8006dde <_printf_common+0x96>
 8006d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	3b00      	subs	r3, #0
 8006d98:	bf18      	it	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	0692      	lsls	r2, r2, #26
 8006d9e:	d42b      	bmi.n	8006df8 <_printf_common+0xb0>
 8006da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006da4:	4641      	mov	r1, r8
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c8      	blx	r9
 8006daa:	3001      	adds	r0, #1
 8006dac:	d01e      	beq.n	8006dec <_printf_common+0xa4>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	f003 0306 	and.w	r3, r3, #6
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	bf02      	ittt	eq
 8006dba:	68e5      	ldreq	r5, [r4, #12]
 8006dbc:	6833      	ldreq	r3, [r6, #0]
 8006dbe:	1aed      	subeq	r5, r5, r3
 8006dc0:	68a3      	ldr	r3, [r4, #8]
 8006dc2:	bf0c      	ite	eq
 8006dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dc8:	2500      	movne	r5, #0
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bfc4      	itt	gt
 8006dce:	1a9b      	subgt	r3, r3, r2
 8006dd0:	18ed      	addgt	r5, r5, r3
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	341a      	adds	r4, #26
 8006dd6:	42b5      	cmp	r5, r6
 8006dd8:	d11a      	bne.n	8006e10 <_printf_common+0xc8>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e008      	b.n	8006df0 <_printf_common+0xa8>
 8006dde:	2301      	movs	r3, #1
 8006de0:	4652      	mov	r2, sl
 8006de2:	4641      	mov	r1, r8
 8006de4:	4638      	mov	r0, r7
 8006de6:	47c8      	blx	r9
 8006de8:	3001      	adds	r0, #1
 8006dea:	d103      	bne.n	8006df4 <_printf_common+0xac>
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	3501      	adds	r5, #1
 8006df6:	e7c6      	b.n	8006d86 <_printf_common+0x3e>
 8006df8:	18e1      	adds	r1, r4, r3
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	2030      	movs	r0, #48	@ 0x30
 8006dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e02:	4422      	add	r2, r4
 8006e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	e7c7      	b.n	8006da0 <_printf_common+0x58>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4622      	mov	r2, r4
 8006e14:	4641      	mov	r1, r8
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c8      	blx	r9
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d0e6      	beq.n	8006dec <_printf_common+0xa4>
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7d9      	b.n	8006dd6 <_printf_common+0x8e>
	...

08006e24 <_printf_i>:
 8006e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	7e0f      	ldrb	r7, [r1, #24]
 8006e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e2c:	2f78      	cmp	r7, #120	@ 0x78
 8006e2e:	4691      	mov	r9, r2
 8006e30:	4680      	mov	r8, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	469a      	mov	sl, r3
 8006e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e3a:	d807      	bhi.n	8006e4c <_printf_i+0x28>
 8006e3c:	2f62      	cmp	r7, #98	@ 0x62
 8006e3e:	d80a      	bhi.n	8006e56 <_printf_i+0x32>
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	f000 80d2 	beq.w	8006fea <_printf_i+0x1c6>
 8006e46:	2f58      	cmp	r7, #88	@ 0x58
 8006e48:	f000 80b9 	beq.w	8006fbe <_printf_i+0x19a>
 8006e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e54:	e03a      	b.n	8006ecc <_printf_i+0xa8>
 8006e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e5a:	2b15      	cmp	r3, #21
 8006e5c:	d8f6      	bhi.n	8006e4c <_printf_i+0x28>
 8006e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e64 <_printf_i+0x40>)
 8006e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006e4d 	.word	0x08006e4d
 8006e70:	08006e4d 	.word	0x08006e4d
 8006e74:	08006e4d 	.word	0x08006e4d
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e4d 	.word	0x08006e4d
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006fd1 	.word	0x08006fd1
 8006e94:	08006efb 	.word	0x08006efb
 8006e98:	08006f8b 	.word	0x08006f8b
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006e4d 	.word	0x08006e4d
 8006ea4:	08006ff3 	.word	0x08006ff3
 8006ea8:	08006e4d 	.word	0x08006e4d
 8006eac:	08006efb 	.word	0x08006efb
 8006eb0:	08006e4d 	.word	0x08006e4d
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006f93 	.word	0x08006f93
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6032      	str	r2, [r6, #0]
 8006ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e09d      	b.n	800700c <_printf_i+0x1e8>
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	6031      	str	r1, [r6, #0]
 8006ed8:	0606      	lsls	r6, r0, #24
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0xbc>
 8006edc:	681d      	ldr	r5, [r3, #0]
 8006ede:	e003      	b.n	8006ee8 <_printf_i+0xc4>
 8006ee0:	0645      	lsls	r5, r0, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0xb8>
 8006ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	da03      	bge.n	8006ef4 <_printf_i+0xd0>
 8006eec:	232d      	movs	r3, #45	@ 0x2d
 8006eee:	426d      	negs	r5, r5
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef4:	4859      	ldr	r0, [pc, #356]	@ (800705c <_printf_i+0x238>)
 8006ef6:	230a      	movs	r3, #10
 8006ef8:	e011      	b.n	8006f1e <_printf_i+0xfa>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	0608      	lsls	r0, r1, #24
 8006f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0xe8>
 8006f06:	0649      	lsls	r1, r1, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2ad      	uxthmi	r5, r5
 8006f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f0e:	4853      	ldr	r0, [pc, #332]	@ (800705c <_printf_i+0x238>)
 8006f10:	6033      	str	r3, [r6, #0]
 8006f12:	bf14      	ite	ne
 8006f14:	230a      	movne	r3, #10
 8006f16:	2308      	moveq	r3, #8
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f1e:	6866      	ldr	r6, [r4, #4]
 8006f20:	60a6      	str	r6, [r4, #8]
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	bfa2      	ittt	ge
 8006f26:	6821      	ldrge	r1, [r4, #0]
 8006f28:	f021 0104 	bicge.w	r1, r1, #4
 8006f2c:	6021      	strge	r1, [r4, #0]
 8006f2e:	b90d      	cbnz	r5, 8006f34 <_printf_i+0x110>
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	d04b      	beq.n	8006fcc <_printf_i+0x1a8>
 8006f34:	4616      	mov	r6, r2
 8006f36:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f3a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f3e:	5dc7      	ldrb	r7, [r0, r7]
 8006f40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f44:	462f      	mov	r7, r5
 8006f46:	42bb      	cmp	r3, r7
 8006f48:	460d      	mov	r5, r1
 8006f4a:	d9f4      	bls.n	8006f36 <_printf_i+0x112>
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d10b      	bne.n	8006f68 <_printf_i+0x144>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	07df      	lsls	r7, r3, #31
 8006f54:	d508      	bpl.n	8006f68 <_printf_i+0x144>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	6861      	ldr	r1, [r4, #4]
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	bfde      	ittt	le
 8006f5e:	2330      	movle	r3, #48	@ 0x30
 8006f60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f68:	1b92      	subs	r2, r2, r6
 8006f6a:	6122      	str	r2, [r4, #16]
 8006f6c:	f8cd a000 	str.w	sl, [sp]
 8006f70:	464b      	mov	r3, r9
 8006f72:	aa03      	add	r2, sp, #12
 8006f74:	4621      	mov	r1, r4
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7ff fee6 	bl	8006d48 <_printf_common>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	d14a      	bne.n	8007016 <_printf_i+0x1f2>
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	b004      	add	sp, #16
 8006f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f043 0320 	orr.w	r3, r3, #32
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	4833      	ldr	r0, [pc, #204]	@ (8007060 <_printf_i+0x23c>)
 8006f94:	2778      	movs	r7, #120	@ 0x78
 8006f96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	6831      	ldr	r1, [r6, #0]
 8006f9e:	061f      	lsls	r7, r3, #24
 8006fa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fa4:	d402      	bmi.n	8006fac <_printf_i+0x188>
 8006fa6:	065f      	lsls	r7, r3, #25
 8006fa8:	bf48      	it	mi
 8006faa:	b2ad      	uxthmi	r5, r5
 8006fac:	6031      	str	r1, [r6, #0]
 8006fae:	07d9      	lsls	r1, r3, #31
 8006fb0:	bf44      	itt	mi
 8006fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fb6:	6023      	strmi	r3, [r4, #0]
 8006fb8:	b11d      	cbz	r5, 8006fc2 <_printf_i+0x19e>
 8006fba:	2310      	movs	r3, #16
 8006fbc:	e7ac      	b.n	8006f18 <_printf_i+0xf4>
 8006fbe:	4827      	ldr	r0, [pc, #156]	@ (800705c <_printf_i+0x238>)
 8006fc0:	e7e9      	b.n	8006f96 <_printf_i+0x172>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	f023 0320 	bic.w	r3, r3, #32
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	e7f6      	b.n	8006fba <_printf_i+0x196>
 8006fcc:	4616      	mov	r6, r2
 8006fce:	e7bd      	b.n	8006f4c <_printf_i+0x128>
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	6825      	ldr	r5, [r4, #0]
 8006fd4:	6961      	ldr	r1, [r4, #20]
 8006fd6:	1d18      	adds	r0, r3, #4
 8006fd8:	6030      	str	r0, [r6, #0]
 8006fda:	062e      	lsls	r6, r5, #24
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	d501      	bpl.n	8006fe4 <_printf_i+0x1c0>
 8006fe0:	6019      	str	r1, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <_printf_i+0x1c6>
 8006fe4:	0668      	lsls	r0, r5, #25
 8006fe6:	d5fb      	bpl.n	8006fe0 <_printf_i+0x1bc>
 8006fe8:	8019      	strh	r1, [r3, #0]
 8006fea:	2300      	movs	r3, #0
 8006fec:	6123      	str	r3, [r4, #16]
 8006fee:	4616      	mov	r6, r2
 8006ff0:	e7bc      	b.n	8006f6c <_printf_i+0x148>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	1d1a      	adds	r2, r3, #4
 8006ff6:	6032      	str	r2, [r6, #0]
 8006ff8:	681e      	ldr	r6, [r3, #0]
 8006ffa:	6862      	ldr	r2, [r4, #4]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4630      	mov	r0, r6
 8007000:	f7f9 f8e6 	bl	80001d0 <memchr>
 8007004:	b108      	cbz	r0, 800700a <_printf_i+0x1e6>
 8007006:	1b80      	subs	r0, r0, r6
 8007008:	6060      	str	r0, [r4, #4]
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	6123      	str	r3, [r4, #16]
 800700e:	2300      	movs	r3, #0
 8007010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007014:	e7aa      	b.n	8006f6c <_printf_i+0x148>
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	4632      	mov	r2, r6
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	47d0      	blx	sl
 8007020:	3001      	adds	r0, #1
 8007022:	d0ad      	beq.n	8006f80 <_printf_i+0x15c>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	079b      	lsls	r3, r3, #30
 8007028:	d413      	bmi.n	8007052 <_printf_i+0x22e>
 800702a:	68e0      	ldr	r0, [r4, #12]
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	4298      	cmp	r0, r3
 8007030:	bfb8      	it	lt
 8007032:	4618      	movlt	r0, r3
 8007034:	e7a6      	b.n	8006f84 <_printf_i+0x160>
 8007036:	2301      	movs	r3, #1
 8007038:	4632      	mov	r2, r6
 800703a:	4649      	mov	r1, r9
 800703c:	4640      	mov	r0, r8
 800703e:	47d0      	blx	sl
 8007040:	3001      	adds	r0, #1
 8007042:	d09d      	beq.n	8006f80 <_printf_i+0x15c>
 8007044:	3501      	adds	r5, #1
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	9903      	ldr	r1, [sp, #12]
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	42ab      	cmp	r3, r5
 800704e:	dcf2      	bgt.n	8007036 <_printf_i+0x212>
 8007050:	e7eb      	b.n	800702a <_printf_i+0x206>
 8007052:	2500      	movs	r5, #0
 8007054:	f104 0619 	add.w	r6, r4, #25
 8007058:	e7f5      	b.n	8007046 <_printf_i+0x222>
 800705a:	bf00      	nop
 800705c:	0800c2cc 	.word	0x0800c2cc
 8007060:	0800c2dd 	.word	0x0800c2dd

08007064 <std>:
 8007064:	2300      	movs	r3, #0
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	e9c0 3300 	strd	r3, r3, [r0]
 800706e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007072:	6083      	str	r3, [r0, #8]
 8007074:	8181      	strh	r1, [r0, #12]
 8007076:	6643      	str	r3, [r0, #100]	@ 0x64
 8007078:	81c2      	strh	r2, [r0, #14]
 800707a:	6183      	str	r3, [r0, #24]
 800707c:	4619      	mov	r1, r3
 800707e:	2208      	movs	r2, #8
 8007080:	305c      	adds	r0, #92	@ 0x5c
 8007082:	f000 f9a9 	bl	80073d8 <memset>
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x58>)
 8007088:	6263      	str	r3, [r4, #36]	@ 0x24
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <std+0x5c>)
 800708c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800708e:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <std+0x60>)
 8007090:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007092:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <std+0x64>)
 8007094:	6323      	str	r3, [r4, #48]	@ 0x30
 8007096:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <std+0x68>)
 8007098:	6224      	str	r4, [r4, #32]
 800709a:	429c      	cmp	r4, r3
 800709c:	d006      	beq.n	80070ac <std+0x48>
 800709e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070a2:	4294      	cmp	r4, r2
 80070a4:	d002      	beq.n	80070ac <std+0x48>
 80070a6:	33d0      	adds	r3, #208	@ 0xd0
 80070a8:	429c      	cmp	r4, r3
 80070aa:	d105      	bne.n	80070b8 <std+0x54>
 80070ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f000 ba0c 	b.w	80074d0 <__retarget_lock_init_recursive>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	bf00      	nop
 80070bc:	08007229 	.word	0x08007229
 80070c0:	0800724b 	.word	0x0800724b
 80070c4:	08007283 	.word	0x08007283
 80070c8:	080072a7 	.word	0x080072a7
 80070cc:	20000644 	.word	0x20000644

080070d0 <stdio_exit_handler>:
 80070d0:	4a02      	ldr	r2, [pc, #8]	@ (80070dc <stdio_exit_handler+0xc>)
 80070d2:	4903      	ldr	r1, [pc, #12]	@ (80070e0 <stdio_exit_handler+0x10>)
 80070d4:	4803      	ldr	r0, [pc, #12]	@ (80070e4 <stdio_exit_handler+0x14>)
 80070d6:	f000 b869 	b.w	80071ac <_fwalk_sglue>
 80070da:	bf00      	nop
 80070dc:	20000238 	.word	0x20000238
 80070e0:	08009109 	.word	0x08009109
 80070e4:	20000248 	.word	0x20000248

080070e8 <cleanup_stdio>:
 80070e8:	6841      	ldr	r1, [r0, #4]
 80070ea:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <cleanup_stdio+0x34>)
 80070ec:	4299      	cmp	r1, r3
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
 80070f2:	d001      	beq.n	80070f8 <cleanup_stdio+0x10>
 80070f4:	f002 f808 	bl	8009108 <_fflush_r>
 80070f8:	68a1      	ldr	r1, [r4, #8]
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <cleanup_stdio+0x38>)
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d002      	beq.n	8007106 <cleanup_stdio+0x1e>
 8007100:	4620      	mov	r0, r4
 8007102:	f002 f801 	bl	8009108 <_fflush_r>
 8007106:	68e1      	ldr	r1, [r4, #12]
 8007108:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <cleanup_stdio+0x3c>)
 800710a:	4299      	cmp	r1, r3
 800710c:	d004      	beq.n	8007118 <cleanup_stdio+0x30>
 800710e:	4620      	mov	r0, r4
 8007110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007114:	f001 bff8 	b.w	8009108 <_fflush_r>
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	20000644 	.word	0x20000644
 8007120:	200006ac 	.word	0x200006ac
 8007124:	20000714 	.word	0x20000714

08007128 <global_stdio_init.part.0>:
 8007128:	b510      	push	{r4, lr}
 800712a:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <global_stdio_init.part.0+0x30>)
 800712c:	4c0b      	ldr	r4, [pc, #44]	@ (800715c <global_stdio_init.part.0+0x34>)
 800712e:	4a0c      	ldr	r2, [pc, #48]	@ (8007160 <global_stdio_init.part.0+0x38>)
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	4620      	mov	r0, r4
 8007134:	2200      	movs	r2, #0
 8007136:	2104      	movs	r1, #4
 8007138:	f7ff ff94 	bl	8007064 <std>
 800713c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007140:	2201      	movs	r2, #1
 8007142:	2109      	movs	r1, #9
 8007144:	f7ff ff8e 	bl	8007064 <std>
 8007148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800714c:	2202      	movs	r2, #2
 800714e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007152:	2112      	movs	r1, #18
 8007154:	f7ff bf86 	b.w	8007064 <std>
 8007158:	2000077c 	.word	0x2000077c
 800715c:	20000644 	.word	0x20000644
 8007160:	080070d1 	.word	0x080070d1

08007164 <__sfp_lock_acquire>:
 8007164:	4801      	ldr	r0, [pc, #4]	@ (800716c <__sfp_lock_acquire+0x8>)
 8007166:	f000 b9b4 	b.w	80074d2 <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	20000785 	.word	0x20000785

08007170 <__sfp_lock_release>:
 8007170:	4801      	ldr	r0, [pc, #4]	@ (8007178 <__sfp_lock_release+0x8>)
 8007172:	f000 b9af 	b.w	80074d4 <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	20000785 	.word	0x20000785

0800717c <__sinit>:
 800717c:	b510      	push	{r4, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	f7ff fff0 	bl	8007164 <__sfp_lock_acquire>
 8007184:	6a23      	ldr	r3, [r4, #32]
 8007186:	b11b      	cbz	r3, 8007190 <__sinit+0x14>
 8007188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718c:	f7ff bff0 	b.w	8007170 <__sfp_lock_release>
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <__sinit+0x28>)
 8007192:	6223      	str	r3, [r4, #32]
 8007194:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <__sinit+0x2c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f5      	bne.n	8007188 <__sinit+0xc>
 800719c:	f7ff ffc4 	bl	8007128 <global_stdio_init.part.0>
 80071a0:	e7f2      	b.n	8007188 <__sinit+0xc>
 80071a2:	bf00      	nop
 80071a4:	080070e9 	.word	0x080070e9
 80071a8:	2000077c 	.word	0x2000077c

080071ac <_fwalk_sglue>:
 80071ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b0:	4607      	mov	r7, r0
 80071b2:	4688      	mov	r8, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	2600      	movs	r6, #0
 80071b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071bc:	f1b9 0901 	subs.w	r9, r9, #1
 80071c0:	d505      	bpl.n	80071ce <_fwalk_sglue+0x22>
 80071c2:	6824      	ldr	r4, [r4, #0]
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	d1f7      	bne.n	80071b8 <_fwalk_sglue+0xc>
 80071c8:	4630      	mov	r0, r6
 80071ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ce:	89ab      	ldrh	r3, [r5, #12]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d907      	bls.n	80071e4 <_fwalk_sglue+0x38>
 80071d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071d8:	3301      	adds	r3, #1
 80071da:	d003      	beq.n	80071e4 <_fwalk_sglue+0x38>
 80071dc:	4629      	mov	r1, r5
 80071de:	4638      	mov	r0, r7
 80071e0:	47c0      	blx	r8
 80071e2:	4306      	orrs	r6, r0
 80071e4:	3568      	adds	r5, #104	@ 0x68
 80071e6:	e7e9      	b.n	80071bc <_fwalk_sglue+0x10>

080071e8 <siprintf>:
 80071e8:	b40e      	push	{r1, r2, r3}
 80071ea:	b500      	push	{lr}
 80071ec:	b09c      	sub	sp, #112	@ 0x70
 80071ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	9006      	str	r0, [sp, #24]
 80071f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071f8:	4809      	ldr	r0, [pc, #36]	@ (8007220 <siprintf+0x38>)
 80071fa:	9107      	str	r1, [sp, #28]
 80071fc:	9104      	str	r1, [sp, #16]
 80071fe:	4909      	ldr	r1, [pc, #36]	@ (8007224 <siprintf+0x3c>)
 8007200:	f853 2b04 	ldr.w	r2, [r3], #4
 8007204:	9105      	str	r1, [sp, #20]
 8007206:	6800      	ldr	r0, [r0, #0]
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	a902      	add	r1, sp, #8
 800720c:	f001 fcba 	bl	8008b84 <_svfiprintf_r>
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	b01c      	add	sp, #112	@ 0x70
 8007218:	f85d eb04 	ldr.w	lr, [sp], #4
 800721c:	b003      	add	sp, #12
 800721e:	4770      	bx	lr
 8007220:	20000244 	.word	0x20000244
 8007224:	ffff0208 	.word	0xffff0208

08007228 <__sread>:
 8007228:	b510      	push	{r4, lr}
 800722a:	460c      	mov	r4, r1
 800722c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007230:	f000 f900 	bl	8007434 <_read_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	bfab      	itete	ge
 8007238:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800723a:	89a3      	ldrhlt	r3, [r4, #12]
 800723c:	181b      	addge	r3, r3, r0
 800723e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007242:	bfac      	ite	ge
 8007244:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007246:	81a3      	strhlt	r3, [r4, #12]
 8007248:	bd10      	pop	{r4, pc}

0800724a <__swrite>:
 800724a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724e:	461f      	mov	r7, r3
 8007250:	898b      	ldrh	r3, [r1, #12]
 8007252:	05db      	lsls	r3, r3, #23
 8007254:	4605      	mov	r5, r0
 8007256:	460c      	mov	r4, r1
 8007258:	4616      	mov	r6, r2
 800725a:	d505      	bpl.n	8007268 <__swrite+0x1e>
 800725c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007260:	2302      	movs	r3, #2
 8007262:	2200      	movs	r2, #0
 8007264:	f000 f8d4 	bl	8007410 <_lseek_r>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800726e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007272:	81a3      	strh	r3, [r4, #12]
 8007274:	4632      	mov	r2, r6
 8007276:	463b      	mov	r3, r7
 8007278:	4628      	mov	r0, r5
 800727a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	f000 b8eb 	b.w	8007458 <_write_r>

08007282 <__sseek>:
 8007282:	b510      	push	{r4, lr}
 8007284:	460c      	mov	r4, r1
 8007286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728a:	f000 f8c1 	bl	8007410 <_lseek_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	bf15      	itete	ne
 8007294:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007296:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800729a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800729e:	81a3      	strheq	r3, [r4, #12]
 80072a0:	bf18      	it	ne
 80072a2:	81a3      	strhne	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__sclose>:
 80072a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072aa:	f000 b8a1 	b.w	80073f0 <_close_r>

080072ae <__swbuf_r>:
 80072ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b0:	460e      	mov	r6, r1
 80072b2:	4614      	mov	r4, r2
 80072b4:	4605      	mov	r5, r0
 80072b6:	b118      	cbz	r0, 80072c0 <__swbuf_r+0x12>
 80072b8:	6a03      	ldr	r3, [r0, #32]
 80072ba:	b90b      	cbnz	r3, 80072c0 <__swbuf_r+0x12>
 80072bc:	f7ff ff5e 	bl	800717c <__sinit>
 80072c0:	69a3      	ldr	r3, [r4, #24]
 80072c2:	60a3      	str	r3, [r4, #8]
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	071a      	lsls	r2, r3, #28
 80072c8:	d501      	bpl.n	80072ce <__swbuf_r+0x20>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	b943      	cbnz	r3, 80072e0 <__swbuf_r+0x32>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 f82b 	bl	800732c <__swsetup_r>
 80072d6:	b118      	cbz	r0, 80072e0 <__swbuf_r+0x32>
 80072d8:	f04f 37ff 	mov.w	r7, #4294967295
 80072dc:	4638      	mov	r0, r7
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	6922      	ldr	r2, [r4, #16]
 80072e4:	1a98      	subs	r0, r3, r2
 80072e6:	6963      	ldr	r3, [r4, #20]
 80072e8:	b2f6      	uxtb	r6, r6
 80072ea:	4283      	cmp	r3, r0
 80072ec:	4637      	mov	r7, r6
 80072ee:	dc05      	bgt.n	80072fc <__swbuf_r+0x4e>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f001 ff08 	bl	8009108 <_fflush_r>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d1ed      	bne.n	80072d8 <__swbuf_r+0x2a>
 80072fc:	68a3      	ldr	r3, [r4, #8]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60a3      	str	r3, [r4, #8]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	701e      	strb	r6, [r3, #0]
 800730a:	6962      	ldr	r2, [r4, #20]
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	429a      	cmp	r2, r3
 8007310:	d004      	beq.n	800731c <__swbuf_r+0x6e>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	07db      	lsls	r3, r3, #31
 8007316:	d5e1      	bpl.n	80072dc <__swbuf_r+0x2e>
 8007318:	2e0a      	cmp	r6, #10
 800731a:	d1df      	bne.n	80072dc <__swbuf_r+0x2e>
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f001 fef2 	bl	8009108 <_fflush_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	d0d9      	beq.n	80072dc <__swbuf_r+0x2e>
 8007328:	e7d6      	b.n	80072d8 <__swbuf_r+0x2a>
	...

0800732c <__swsetup_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4b29      	ldr	r3, [pc, #164]	@ (80073d4 <__swsetup_r+0xa8>)
 8007330:	4605      	mov	r5, r0
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	460c      	mov	r4, r1
 8007336:	b118      	cbz	r0, 8007340 <__swsetup_r+0x14>
 8007338:	6a03      	ldr	r3, [r0, #32]
 800733a:	b90b      	cbnz	r3, 8007340 <__swsetup_r+0x14>
 800733c:	f7ff ff1e 	bl	800717c <__sinit>
 8007340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007344:	0719      	lsls	r1, r3, #28
 8007346:	d422      	bmi.n	800738e <__swsetup_r+0x62>
 8007348:	06da      	lsls	r2, r3, #27
 800734a:	d407      	bmi.n	800735c <__swsetup_r+0x30>
 800734c:	2209      	movs	r2, #9
 800734e:	602a      	str	r2, [r5, #0]
 8007350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	f04f 30ff 	mov.w	r0, #4294967295
 800735a:	e033      	b.n	80073c4 <__swsetup_r+0x98>
 800735c:	0758      	lsls	r0, r3, #29
 800735e:	d512      	bpl.n	8007386 <__swsetup_r+0x5a>
 8007360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007362:	b141      	cbz	r1, 8007376 <__swsetup_r+0x4a>
 8007364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007368:	4299      	cmp	r1, r3
 800736a:	d002      	beq.n	8007372 <__swsetup_r+0x46>
 800736c:	4628      	mov	r0, r5
 800736e:	f000 ff2b 	bl	80081c8 <_free_r>
 8007372:	2300      	movs	r3, #0
 8007374:	6363      	str	r3, [r4, #52]	@ 0x34
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800737c:	81a3      	strh	r3, [r4, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	6923      	ldr	r3, [r4, #16]
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0308 	orr.w	r3, r3, #8
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	b94b      	cbnz	r3, 80073a6 <__swsetup_r+0x7a>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800739c:	d003      	beq.n	80073a6 <__swsetup_r+0x7a>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f001 ff11 	bl	80091c8 <__smakebuf_r>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	f013 0201 	ands.w	r2, r3, #1
 80073ae:	d00a      	beq.n	80073c6 <__swsetup_r+0x9a>
 80073b0:	2200      	movs	r2, #0
 80073b2:	60a2      	str	r2, [r4, #8]
 80073b4:	6962      	ldr	r2, [r4, #20]
 80073b6:	4252      	negs	r2, r2
 80073b8:	61a2      	str	r2, [r4, #24]
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	b942      	cbnz	r2, 80073d0 <__swsetup_r+0xa4>
 80073be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073c2:	d1c5      	bne.n	8007350 <__swsetup_r+0x24>
 80073c4:	bd38      	pop	{r3, r4, r5, pc}
 80073c6:	0799      	lsls	r1, r3, #30
 80073c8:	bf58      	it	pl
 80073ca:	6962      	ldrpl	r2, [r4, #20]
 80073cc:	60a2      	str	r2, [r4, #8]
 80073ce:	e7f4      	b.n	80073ba <__swsetup_r+0x8e>
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7f7      	b.n	80073c4 <__swsetup_r+0x98>
 80073d4:	20000244 	.word	0x20000244

080073d8 <memset>:
 80073d8:	4402      	add	r2, r0
 80073da:	4603      	mov	r3, r0
 80073dc:	4293      	cmp	r3, r2
 80073de:	d100      	bne.n	80073e2 <memset+0xa>
 80073e0:	4770      	bx	lr
 80073e2:	f803 1b01 	strb.w	r1, [r3], #1
 80073e6:	e7f9      	b.n	80073dc <memset+0x4>

080073e8 <_localeconv_r>:
 80073e8:	4800      	ldr	r0, [pc, #0]	@ (80073ec <_localeconv_r+0x4>)
 80073ea:	4770      	bx	lr
 80073ec:	20000384 	.word	0x20000384

080073f0 <_close_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d06      	ldr	r5, [pc, #24]	@ (800740c <_close_r+0x1c>)
 80073f4:	2300      	movs	r3, #0
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	f7ff f816 	bl	800642c <_close>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_close_r+0x1a>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b103      	cbz	r3, 800740a <_close_r+0x1a>
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	20000780 	.word	0x20000780

08007410 <_lseek_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	@ (8007430 <_lseek_r+0x20>)
 8007414:	4604      	mov	r4, r0
 8007416:	4608      	mov	r0, r1
 8007418:	4611      	mov	r1, r2
 800741a:	2200      	movs	r2, #0
 800741c:	602a      	str	r2, [r5, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	f7fe ffc5 	bl	80063ae <_lseek>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_lseek_r+0x1e>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_lseek_r+0x1e>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20000780 	.word	0x20000780

08007434 <_read_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d07      	ldr	r5, [pc, #28]	@ (8007454 <_read_r+0x20>)
 8007438:	4604      	mov	r4, r0
 800743a:	4608      	mov	r0, r1
 800743c:	4611      	mov	r1, r2
 800743e:	2200      	movs	r2, #0
 8007440:	602a      	str	r2, [r5, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f7fe ff5d 	bl	8006302 <_read>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_read_r+0x1e>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_read_r+0x1e>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	20000780 	.word	0x20000780

08007458 <_write_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d07      	ldr	r5, [pc, #28]	@ (8007478 <_write_r+0x20>)
 800745c:	4604      	mov	r4, r0
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	2200      	movs	r2, #0
 8007464:	602a      	str	r2, [r5, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	f7fe ffb3 	bl	80063d2 <_write>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_write_r+0x1e>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_write_r+0x1e>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000780 	.word	0x20000780

0800747c <__errno>:
 800747c:	4b01      	ldr	r3, [pc, #4]	@ (8007484 <__errno+0x8>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000244 	.word	0x20000244

08007488 <__libc_init_array>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	4d0d      	ldr	r5, [pc, #52]	@ (80074c0 <__libc_init_array+0x38>)
 800748c:	4c0d      	ldr	r4, [pc, #52]	@ (80074c4 <__libc_init_array+0x3c>)
 800748e:	1b64      	subs	r4, r4, r5
 8007490:	10a4      	asrs	r4, r4, #2
 8007492:	2600      	movs	r6, #0
 8007494:	42a6      	cmp	r6, r4
 8007496:	d109      	bne.n	80074ac <__libc_init_array+0x24>
 8007498:	4d0b      	ldr	r5, [pc, #44]	@ (80074c8 <__libc_init_array+0x40>)
 800749a:	4c0c      	ldr	r4, [pc, #48]	@ (80074cc <__libc_init_array+0x44>)
 800749c:	f003 f9c6 	bl	800a82c <_init>
 80074a0:	1b64      	subs	r4, r4, r5
 80074a2:	10a4      	asrs	r4, r4, #2
 80074a4:	2600      	movs	r6, #0
 80074a6:	42a6      	cmp	r6, r4
 80074a8:	d105      	bne.n	80074b6 <__libc_init_array+0x2e>
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b0:	4798      	blx	r3
 80074b2:	3601      	adds	r6, #1
 80074b4:	e7ee      	b.n	8007494 <__libc_init_array+0xc>
 80074b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ba:	4798      	blx	r3
 80074bc:	3601      	adds	r6, #1
 80074be:	e7f2      	b.n	80074a6 <__libc_init_array+0x1e>
 80074c0:	0800c6d8 	.word	0x0800c6d8
 80074c4:	0800c6d8 	.word	0x0800c6d8
 80074c8:	0800c6d8 	.word	0x0800c6d8
 80074cc:	0800c6dc 	.word	0x0800c6dc

080074d0 <__retarget_lock_init_recursive>:
 80074d0:	4770      	bx	lr

080074d2 <__retarget_lock_acquire_recursive>:
 80074d2:	4770      	bx	lr

080074d4 <__retarget_lock_release_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <memcpy>:
 80074d6:	440a      	add	r2, r1
 80074d8:	4291      	cmp	r1, r2
 80074da:	f100 33ff 	add.w	r3, r0, #4294967295
 80074de:	d100      	bne.n	80074e2 <memcpy+0xc>
 80074e0:	4770      	bx	lr
 80074e2:	b510      	push	{r4, lr}
 80074e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ec:	4291      	cmp	r1, r2
 80074ee:	d1f9      	bne.n	80074e4 <memcpy+0xe>
 80074f0:	bd10      	pop	{r4, pc}
	...

080074f4 <__assert_func>:
 80074f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074f6:	4614      	mov	r4, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b09      	ldr	r3, [pc, #36]	@ (8007520 <__assert_func+0x2c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4605      	mov	r5, r0
 8007500:	68d8      	ldr	r0, [r3, #12]
 8007502:	b954      	cbnz	r4, 800751a <__assert_func+0x26>
 8007504:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <__assert_func+0x30>)
 8007506:	461c      	mov	r4, r3
 8007508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800750c:	9100      	str	r1, [sp, #0]
 800750e:	462b      	mov	r3, r5
 8007510:	4905      	ldr	r1, [pc, #20]	@ (8007528 <__assert_func+0x34>)
 8007512:	f001 fe21 	bl	8009158 <fiprintf>
 8007516:	f001 fedf 	bl	80092d8 <abort>
 800751a:	4b04      	ldr	r3, [pc, #16]	@ (800752c <__assert_func+0x38>)
 800751c:	e7f4      	b.n	8007508 <__assert_func+0x14>
 800751e:	bf00      	nop
 8007520:	20000244 	.word	0x20000244
 8007524:	0800c329 	.word	0x0800c329
 8007528:	0800c2fb 	.word	0x0800c2fb
 800752c:	0800c2ee 	.word	0x0800c2ee

08007530 <quorem>:
 8007530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	6903      	ldr	r3, [r0, #16]
 8007536:	690c      	ldr	r4, [r1, #16]
 8007538:	42a3      	cmp	r3, r4
 800753a:	4607      	mov	r7, r0
 800753c:	db7e      	blt.n	800763c <quorem+0x10c>
 800753e:	3c01      	subs	r4, #1
 8007540:	f101 0814 	add.w	r8, r1, #20
 8007544:	00a3      	lsls	r3, r4, #2
 8007546:	f100 0514 	add.w	r5, r0, #20
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800755a:	3301      	adds	r3, #1
 800755c:	429a      	cmp	r2, r3
 800755e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007562:	fbb2 f6f3 	udiv	r6, r2, r3
 8007566:	d32e      	bcc.n	80075c6 <quorem+0x96>
 8007568:	f04f 0a00 	mov.w	sl, #0
 800756c:	46c4      	mov	ip, r8
 800756e:	46ae      	mov	lr, r5
 8007570:	46d3      	mov	fp, sl
 8007572:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007576:	b298      	uxth	r0, r3
 8007578:	fb06 a000 	mla	r0, r6, r0, sl
 800757c:	0c02      	lsrs	r2, r0, #16
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	fb06 2303 	mla	r3, r6, r3, r2
 8007584:	f8de 2000 	ldr.w	r2, [lr]
 8007588:	b280      	uxth	r0, r0
 800758a:	b292      	uxth	r2, r2
 800758c:	1a12      	subs	r2, r2, r0
 800758e:	445a      	add	r2, fp
 8007590:	f8de 0000 	ldr.w	r0, [lr]
 8007594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007598:	b29b      	uxth	r3, r3
 800759a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800759e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075a2:	b292      	uxth	r2, r2
 80075a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075a8:	45e1      	cmp	r9, ip
 80075aa:	f84e 2b04 	str.w	r2, [lr], #4
 80075ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075b2:	d2de      	bcs.n	8007572 <quorem+0x42>
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	58eb      	ldr	r3, [r5, r3]
 80075b8:	b92b      	cbnz	r3, 80075c6 <quorem+0x96>
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	3b04      	subs	r3, #4
 80075be:	429d      	cmp	r5, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	d32f      	bcc.n	8007624 <quorem+0xf4>
 80075c4:	613c      	str	r4, [r7, #16]
 80075c6:	4638      	mov	r0, r7
 80075c8:	f001 f978 	bl	80088bc <__mcmp>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	db25      	blt.n	800761c <quorem+0xec>
 80075d0:	4629      	mov	r1, r5
 80075d2:	2000      	movs	r0, #0
 80075d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80075d8:	f8d1 c000 	ldr.w	ip, [r1]
 80075dc:	fa1f fe82 	uxth.w	lr, r2
 80075e0:	fa1f f38c 	uxth.w	r3, ip
 80075e4:	eba3 030e 	sub.w	r3, r3, lr
 80075e8:	4403      	add	r3, r0
 80075ea:	0c12      	lsrs	r2, r2, #16
 80075ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fa:	45c1      	cmp	r9, r8
 80075fc:	f841 3b04 	str.w	r3, [r1], #4
 8007600:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007604:	d2e6      	bcs.n	80075d4 <quorem+0xa4>
 8007606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800760a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800760e:	b922      	cbnz	r2, 800761a <quorem+0xea>
 8007610:	3b04      	subs	r3, #4
 8007612:	429d      	cmp	r5, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d30b      	bcc.n	8007630 <quorem+0x100>
 8007618:	613c      	str	r4, [r7, #16]
 800761a:	3601      	adds	r6, #1
 800761c:	4630      	mov	r0, r6
 800761e:	b003      	add	sp, #12
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	3b04      	subs	r3, #4
 8007628:	2a00      	cmp	r2, #0
 800762a:	d1cb      	bne.n	80075c4 <quorem+0x94>
 800762c:	3c01      	subs	r4, #1
 800762e:	e7c6      	b.n	80075be <quorem+0x8e>
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	3b04      	subs	r3, #4
 8007634:	2a00      	cmp	r2, #0
 8007636:	d1ef      	bne.n	8007618 <quorem+0xe8>
 8007638:	3c01      	subs	r4, #1
 800763a:	e7ea      	b.n	8007612 <quorem+0xe2>
 800763c:	2000      	movs	r0, #0
 800763e:	e7ee      	b.n	800761e <quorem+0xee>

08007640 <_dtoa_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	69c7      	ldr	r7, [r0, #28]
 8007646:	b099      	sub	sp, #100	@ 0x64
 8007648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800764c:	ec55 4b10 	vmov	r4, r5, d0
 8007650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007652:	9109      	str	r1, [sp, #36]	@ 0x24
 8007654:	4683      	mov	fp, r0
 8007656:	920e      	str	r2, [sp, #56]	@ 0x38
 8007658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800765a:	b97f      	cbnz	r7, 800767c <_dtoa_r+0x3c>
 800765c:	2010      	movs	r0, #16
 800765e:	f000 fdfd 	bl	800825c <malloc>
 8007662:	4602      	mov	r2, r0
 8007664:	f8cb 001c 	str.w	r0, [fp, #28]
 8007668:	b920      	cbnz	r0, 8007674 <_dtoa_r+0x34>
 800766a:	4ba7      	ldr	r3, [pc, #668]	@ (8007908 <_dtoa_r+0x2c8>)
 800766c:	21ef      	movs	r1, #239	@ 0xef
 800766e:	48a7      	ldr	r0, [pc, #668]	@ (800790c <_dtoa_r+0x2cc>)
 8007670:	f7ff ff40 	bl	80074f4 <__assert_func>
 8007674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007678:	6007      	str	r7, [r0, #0]
 800767a:	60c7      	str	r7, [r0, #12]
 800767c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	b159      	cbz	r1, 800769c <_dtoa_r+0x5c>
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	604a      	str	r2, [r1, #4]
 8007688:	2301      	movs	r3, #1
 800768a:	4093      	lsls	r3, r2
 800768c:	608b      	str	r3, [r1, #8]
 800768e:	4658      	mov	r0, fp
 8007690:	f000 feda 	bl	8008448 <_Bfree>
 8007694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	1e2b      	subs	r3, r5, #0
 800769e:	bfb9      	ittee	lt
 80076a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076a4:	9303      	strlt	r3, [sp, #12]
 80076a6:	2300      	movge	r3, #0
 80076a8:	6033      	strge	r3, [r6, #0]
 80076aa:	9f03      	ldr	r7, [sp, #12]
 80076ac:	4b98      	ldr	r3, [pc, #608]	@ (8007910 <_dtoa_r+0x2d0>)
 80076ae:	bfbc      	itt	lt
 80076b0:	2201      	movlt	r2, #1
 80076b2:	6032      	strlt	r2, [r6, #0]
 80076b4:	43bb      	bics	r3, r7
 80076b6:	d112      	bne.n	80076de <_dtoa_r+0x9e>
 80076b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076c4:	4323      	orrs	r3, r4
 80076c6:	f000 854d 	beq.w	8008164 <_dtoa_r+0xb24>
 80076ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007924 <_dtoa_r+0x2e4>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 854f 	beq.w	8008174 <_dtoa_r+0xb34>
 80076d6:	f10a 0303 	add.w	r3, sl, #3
 80076da:	f000 bd49 	b.w	8008170 <_dtoa_r+0xb30>
 80076de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	ec51 0b17 	vmov	r0, r1, d7
 80076e8:	2300      	movs	r3, #0
 80076ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80076ee:	f7f9 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f2:	4680      	mov	r8, r0
 80076f4:	b158      	cbz	r0, 800770e <_dtoa_r+0xce>
 80076f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80076f8:	2301      	movs	r3, #1
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076fe:	b113      	cbz	r3, 8007706 <_dtoa_r+0xc6>
 8007700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007702:	4b84      	ldr	r3, [pc, #528]	@ (8007914 <_dtoa_r+0x2d4>)
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007928 <_dtoa_r+0x2e8>
 800770a:	f000 bd33 	b.w	8008174 <_dtoa_r+0xb34>
 800770e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007712:	aa16      	add	r2, sp, #88	@ 0x58
 8007714:	a917      	add	r1, sp, #92	@ 0x5c
 8007716:	4658      	mov	r0, fp
 8007718:	f001 f980 	bl	8008a1c <__d2b>
 800771c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007720:	4681      	mov	r9, r0
 8007722:	2e00      	cmp	r6, #0
 8007724:	d077      	beq.n	8007816 <_dtoa_r+0x1d6>
 8007726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800772c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800773c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007740:	4619      	mov	r1, r3
 8007742:	2200      	movs	r2, #0
 8007744:	4b74      	ldr	r3, [pc, #464]	@ (8007918 <_dtoa_r+0x2d8>)
 8007746:	f7f8 fd9f 	bl	8000288 <__aeabi_dsub>
 800774a:	a369      	add	r3, pc, #420	@ (adr r3, 80078f0 <_dtoa_r+0x2b0>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f8 ff52 	bl	80005f8 <__aeabi_dmul>
 8007754:	a368      	add	r3, pc, #416	@ (adr r3, 80078f8 <_dtoa_r+0x2b8>)
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f7f8 fd97 	bl	800028c <__adddf3>
 800775e:	4604      	mov	r4, r0
 8007760:	4630      	mov	r0, r6
 8007762:	460d      	mov	r5, r1
 8007764:	f7f8 fede 	bl	8000524 <__aeabi_i2d>
 8007768:	a365      	add	r3, pc, #404	@ (adr r3, 8007900 <_dtoa_r+0x2c0>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 ff43 	bl	80005f8 <__aeabi_dmul>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f8 fd87 	bl	800028c <__adddf3>
 800777e:	4604      	mov	r4, r0
 8007780:	460d      	mov	r5, r1
 8007782:	f7f9 f9e9 	bl	8000b58 <__aeabi_d2iz>
 8007786:	2200      	movs	r2, #0
 8007788:	4607      	mov	r7, r0
 800778a:	2300      	movs	r3, #0
 800778c:	4620      	mov	r0, r4
 800778e:	4629      	mov	r1, r5
 8007790:	f7f9 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8007794:	b140      	cbz	r0, 80077a8 <_dtoa_r+0x168>
 8007796:	4638      	mov	r0, r7
 8007798:	f7f8 fec4 	bl	8000524 <__aeabi_i2d>
 800779c:	4622      	mov	r2, r4
 800779e:	462b      	mov	r3, r5
 80077a0:	f7f9 f992 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a4:	b900      	cbnz	r0, 80077a8 <_dtoa_r+0x168>
 80077a6:	3f01      	subs	r7, #1
 80077a8:	2f16      	cmp	r7, #22
 80077aa:	d851      	bhi.n	8007850 <_dtoa_r+0x210>
 80077ac:	4b5b      	ldr	r3, [pc, #364]	@ (800791c <_dtoa_r+0x2dc>)
 80077ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ba:	f7f9 f98f 	bl	8000adc <__aeabi_dcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d048      	beq.n	8007854 <_dtoa_r+0x214>
 80077c2:	3f01      	subs	r7, #1
 80077c4:	2300      	movs	r3, #0
 80077c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80077c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077ca:	1b9b      	subs	r3, r3, r6
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	bf44      	itt	mi
 80077d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80077d4:	2300      	movmi	r3, #0
 80077d6:	9208      	str	r2, [sp, #32]
 80077d8:	bf54      	ite	pl
 80077da:	f04f 0800 	movpl.w	r8, #0
 80077de:	9308      	strmi	r3, [sp, #32]
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	db39      	blt.n	8007858 <_dtoa_r+0x218>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80077e8:	443b      	add	r3, r7
 80077ea:	9308      	str	r3, [sp, #32]
 80077ec:	2300      	movs	r3, #0
 80077ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d864      	bhi.n	80078c0 <_dtoa_r+0x280>
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	bfc4      	itt	gt
 80077fa:	3b04      	subgt	r3, #4
 80077fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	f1a3 0302 	sub.w	r3, r3, #2
 8007804:	bfcc      	ite	gt
 8007806:	2400      	movgt	r4, #0
 8007808:	2401      	movle	r4, #1
 800780a:	2b03      	cmp	r3, #3
 800780c:	d863      	bhi.n	80078d6 <_dtoa_r+0x296>
 800780e:	e8df f003 	tbb	[pc, r3]
 8007812:	372a      	.short	0x372a
 8007814:	5535      	.short	0x5535
 8007816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800781a:	441e      	add	r6, r3
 800781c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007820:	2b20      	cmp	r3, #32
 8007822:	bfc1      	itttt	gt
 8007824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007828:	409f      	lslgt	r7, r3
 800782a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800782e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007832:	bfd6      	itet	le
 8007834:	f1c3 0320 	rsble	r3, r3, #32
 8007838:	ea47 0003 	orrgt.w	r0, r7, r3
 800783c:	fa04 f003 	lslle.w	r0, r4, r3
 8007840:	f7f8 fe60 	bl	8000504 <__aeabi_ui2d>
 8007844:	2201      	movs	r2, #1
 8007846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800784a:	3e01      	subs	r6, #1
 800784c:	9214      	str	r2, [sp, #80]	@ 0x50
 800784e:	e777      	b.n	8007740 <_dtoa_r+0x100>
 8007850:	2301      	movs	r3, #1
 8007852:	e7b8      	b.n	80077c6 <_dtoa_r+0x186>
 8007854:	9012      	str	r0, [sp, #72]	@ 0x48
 8007856:	e7b7      	b.n	80077c8 <_dtoa_r+0x188>
 8007858:	427b      	negs	r3, r7
 800785a:	930a      	str	r3, [sp, #40]	@ 0x28
 800785c:	2300      	movs	r3, #0
 800785e:	eba8 0807 	sub.w	r8, r8, r7
 8007862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007864:	e7c4      	b.n	80077f0 <_dtoa_r+0x1b0>
 8007866:	2300      	movs	r3, #0
 8007868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800786a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc35      	bgt.n	80078dc <_dtoa_r+0x29c>
 8007870:	2301      	movs	r3, #1
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	9307      	str	r3, [sp, #28]
 8007876:	461a      	mov	r2, r3
 8007878:	920e      	str	r2, [sp, #56]	@ 0x38
 800787a:	e00b      	b.n	8007894 <_dtoa_r+0x254>
 800787c:	2301      	movs	r3, #1
 800787e:	e7f3      	b.n	8007868 <_dtoa_r+0x228>
 8007880:	2300      	movs	r3, #0
 8007882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	9307      	str	r3, [sp, #28]
 8007890:	bfb8      	it	lt
 8007892:	2301      	movlt	r3, #1
 8007894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007898:	2100      	movs	r1, #0
 800789a:	2204      	movs	r2, #4
 800789c:	f102 0514 	add.w	r5, r2, #20
 80078a0:	429d      	cmp	r5, r3
 80078a2:	d91f      	bls.n	80078e4 <_dtoa_r+0x2a4>
 80078a4:	6041      	str	r1, [r0, #4]
 80078a6:	4658      	mov	r0, fp
 80078a8:	f000 fd8e 	bl	80083c8 <_Balloc>
 80078ac:	4682      	mov	sl, r0
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d13c      	bne.n	800792c <_dtoa_r+0x2ec>
 80078b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007920 <_dtoa_r+0x2e0>)
 80078b4:	4602      	mov	r2, r0
 80078b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80078ba:	e6d8      	b.n	800766e <_dtoa_r+0x2e>
 80078bc:	2301      	movs	r3, #1
 80078be:	e7e0      	b.n	8007882 <_dtoa_r+0x242>
 80078c0:	2401      	movs	r4, #1
 80078c2:	2300      	movs	r3, #0
 80078c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	2200      	movs	r2, #0
 80078d2:	2312      	movs	r3, #18
 80078d4:	e7d0      	b.n	8007878 <_dtoa_r+0x238>
 80078d6:	2301      	movs	r3, #1
 80078d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078da:	e7f5      	b.n	80078c8 <_dtoa_r+0x288>
 80078dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	9307      	str	r3, [sp, #28]
 80078e2:	e7d7      	b.n	8007894 <_dtoa_r+0x254>
 80078e4:	3101      	adds	r1, #1
 80078e6:	0052      	lsls	r2, r2, #1
 80078e8:	e7d8      	b.n	800789c <_dtoa_r+0x25c>
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w
 80078f0:	636f4361 	.word	0x636f4361
 80078f4:	3fd287a7 	.word	0x3fd287a7
 80078f8:	8b60c8b3 	.word	0x8b60c8b3
 80078fc:	3fc68a28 	.word	0x3fc68a28
 8007900:	509f79fb 	.word	0x509f79fb
 8007904:	3fd34413 	.word	0x3fd34413
 8007908:	0800c337 	.word	0x0800c337
 800790c:	0800c34e 	.word	0x0800c34e
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	0800c2cb 	.word	0x0800c2cb
 8007918:	3ff80000 	.word	0x3ff80000
 800791c:	0800c448 	.word	0x0800c448
 8007920:	0800c3a6 	.word	0x0800c3a6
 8007924:	0800c333 	.word	0x0800c333
 8007928:	0800c2ca 	.word	0x0800c2ca
 800792c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007930:	6018      	str	r0, [r3, #0]
 8007932:	9b07      	ldr	r3, [sp, #28]
 8007934:	2b0e      	cmp	r3, #14
 8007936:	f200 80a4 	bhi.w	8007a82 <_dtoa_r+0x442>
 800793a:	2c00      	cmp	r4, #0
 800793c:	f000 80a1 	beq.w	8007a82 <_dtoa_r+0x442>
 8007940:	2f00      	cmp	r7, #0
 8007942:	dd33      	ble.n	80079ac <_dtoa_r+0x36c>
 8007944:	4bad      	ldr	r3, [pc, #692]	@ (8007bfc <_dtoa_r+0x5bc>)
 8007946:	f007 020f 	and.w	r2, r7, #15
 800794a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800794e:	ed93 7b00 	vldr	d7, [r3]
 8007952:	05f8      	lsls	r0, r7, #23
 8007954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800795c:	d516      	bpl.n	800798c <_dtoa_r+0x34c>
 800795e:	4ba8      	ldr	r3, [pc, #672]	@ (8007c00 <_dtoa_r+0x5c0>)
 8007960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007968:	f7f8 ff70 	bl	800084c <__aeabi_ddiv>
 800796c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007970:	f004 040f 	and.w	r4, r4, #15
 8007974:	2603      	movs	r6, #3
 8007976:	4da2      	ldr	r5, [pc, #648]	@ (8007c00 <_dtoa_r+0x5c0>)
 8007978:	b954      	cbnz	r4, 8007990 <_dtoa_r+0x350>
 800797a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800797e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007982:	f7f8 ff63 	bl	800084c <__aeabi_ddiv>
 8007986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800798a:	e028      	b.n	80079de <_dtoa_r+0x39e>
 800798c:	2602      	movs	r6, #2
 800798e:	e7f2      	b.n	8007976 <_dtoa_r+0x336>
 8007990:	07e1      	lsls	r1, r4, #31
 8007992:	d508      	bpl.n	80079a6 <_dtoa_r+0x366>
 8007994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079a4:	3601      	adds	r6, #1
 80079a6:	1064      	asrs	r4, r4, #1
 80079a8:	3508      	adds	r5, #8
 80079aa:	e7e5      	b.n	8007978 <_dtoa_r+0x338>
 80079ac:	f000 80d2 	beq.w	8007b54 <_dtoa_r+0x514>
 80079b0:	427c      	negs	r4, r7
 80079b2:	4b92      	ldr	r3, [pc, #584]	@ (8007bfc <_dtoa_r+0x5bc>)
 80079b4:	4d92      	ldr	r5, [pc, #584]	@ (8007c00 <_dtoa_r+0x5c0>)
 80079b6:	f004 020f 	and.w	r2, r4, #15
 80079ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079c6:	f7f8 fe17 	bl	80005f8 <__aeabi_dmul>
 80079ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ce:	1124      	asrs	r4, r4, #4
 80079d0:	2300      	movs	r3, #0
 80079d2:	2602      	movs	r6, #2
 80079d4:	2c00      	cmp	r4, #0
 80079d6:	f040 80b2 	bne.w	8007b3e <_dtoa_r+0x4fe>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d3      	bne.n	8007986 <_dtoa_r+0x346>
 80079de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80b7 	beq.w	8007b58 <_dtoa_r+0x518>
 80079ea:	4b86      	ldr	r3, [pc, #536]	@ (8007c04 <_dtoa_r+0x5c4>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f000 80ae 	beq.w	8007b58 <_dtoa_r+0x518>
 80079fc:	9b07      	ldr	r3, [sp, #28]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80aa 	beq.w	8007b58 <_dtoa_r+0x518>
 8007a04:	9b00      	ldr	r3, [sp, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd37      	ble.n	8007a7a <_dtoa_r+0x43a>
 8007a0a:	1e7b      	subs	r3, r7, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4b7d      	ldr	r3, [pc, #500]	@ (8007c08 <_dtoa_r+0x5c8>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7f8 fdef 	bl	80005f8 <__aeabi_dmul>
 8007a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1e:	9c00      	ldr	r4, [sp, #0]
 8007a20:	3601      	adds	r6, #1
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7f8 fd7e 	bl	8000524 <__aeabi_i2d>
 8007a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	4b76      	ldr	r3, [pc, #472]	@ (8007c0c <_dtoa_r+0x5cc>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f8 fc2a 	bl	800028c <__adddf3>
 8007a38:	4605      	mov	r5, r0
 8007a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	f040 808d 	bne.w	8007b5e <_dtoa_r+0x51e>
 8007a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a48:	4b71      	ldr	r3, [pc, #452]	@ (8007c10 <_dtoa_r+0x5d0>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f7f8 fc1c 	bl	8000288 <__aeabi_dsub>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a58:	462a      	mov	r2, r5
 8007a5a:	4633      	mov	r3, r6
 8007a5c:	f7f9 f85c 	bl	8000b18 <__aeabi_dcmpgt>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	f040 828b 	bne.w	8007f7c <_dtoa_r+0x93c>
 8007a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6a:	462a      	mov	r2, r5
 8007a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a70:	f7f9 f834 	bl	8000adc <__aeabi_dcmplt>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f040 8128 	bne.w	8007cca <_dtoa_r+0x68a>
 8007a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f2c0 815a 	blt.w	8007d3e <_dtoa_r+0x6fe>
 8007a8a:	2f0e      	cmp	r7, #14
 8007a8c:	f300 8157 	bgt.w	8007d3e <_dtoa_r+0x6fe>
 8007a90:	4b5a      	ldr	r3, [pc, #360]	@ (8007bfc <_dtoa_r+0x5bc>)
 8007a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a96:	ed93 7b00 	vldr	d7, [r3]
 8007a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	ed8d 7b00 	vstr	d7, [sp]
 8007aa2:	da03      	bge.n	8007aac <_dtoa_r+0x46c>
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f340 8101 	ble.w	8007cae <_dtoa_r+0x66e>
 8007aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ab0:	4656      	mov	r6, sl
 8007ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7f8 fec7 	bl	800084c <__aeabi_ddiv>
 8007abe:	f7f9 f84b 	bl	8000b58 <__aeabi_d2iz>
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	f7f8 fd2e 	bl	8000524 <__aeabi_i2d>
 8007ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007adc:	f7f8 fbd4 	bl	8000288 <__aeabi_dsub>
 8007ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8007ae4:	9d07      	ldr	r5, [sp, #28]
 8007ae6:	eba6 040a 	sub.w	r4, r6, sl
 8007aea:	42a5      	cmp	r5, r4
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	f040 8117 	bne.w	8007d22 <_dtoa_r+0x6e2>
 8007af4:	f7f8 fbca 	bl	800028c <__adddf3>
 8007af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afc:	4604      	mov	r4, r0
 8007afe:	460d      	mov	r5, r1
 8007b00:	f7f9 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f040 80f9 	bne.w	8007cfc <_dtoa_r+0x6bc>
 8007b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b16:	b118      	cbz	r0, 8007b20 <_dtoa_r+0x4e0>
 8007b18:	f018 0f01 	tst.w	r8, #1
 8007b1c:	f040 80ee 	bne.w	8007cfc <_dtoa_r+0x6bc>
 8007b20:	4649      	mov	r1, r9
 8007b22:	4658      	mov	r0, fp
 8007b24:	f000 fc90 	bl	8008448 <_Bfree>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	7033      	strb	r3, [r6, #0]
 8007b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b2e:	3701      	adds	r7, #1
 8007b30:	601f      	str	r7, [r3, #0]
 8007b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 831d 	beq.w	8008174 <_dtoa_r+0xb34>
 8007b3a:	601e      	str	r6, [r3, #0]
 8007b3c:	e31a      	b.n	8008174 <_dtoa_r+0xb34>
 8007b3e:	07e2      	lsls	r2, r4, #31
 8007b40:	d505      	bpl.n	8007b4e <_dtoa_r+0x50e>
 8007b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b46:	f7f8 fd57 	bl	80005f8 <__aeabi_dmul>
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	1064      	asrs	r4, r4, #1
 8007b50:	3508      	adds	r5, #8
 8007b52:	e73f      	b.n	80079d4 <_dtoa_r+0x394>
 8007b54:	2602      	movs	r6, #2
 8007b56:	e742      	b.n	80079de <_dtoa_r+0x39e>
 8007b58:	9c07      	ldr	r4, [sp, #28]
 8007b5a:	9704      	str	r7, [sp, #16]
 8007b5c:	e761      	b.n	8007a22 <_dtoa_r+0x3e2>
 8007b5e:	4b27      	ldr	r3, [pc, #156]	@ (8007bfc <_dtoa_r+0x5bc>)
 8007b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b6a:	4454      	add	r4, sl
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d053      	beq.n	8007c18 <_dtoa_r+0x5d8>
 8007b70:	4928      	ldr	r1, [pc, #160]	@ (8007c14 <_dtoa_r+0x5d4>)
 8007b72:	2000      	movs	r0, #0
 8007b74:	f7f8 fe6a 	bl	800084c <__aeabi_ddiv>
 8007b78:	4633      	mov	r3, r6
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	f7f8 fb84 	bl	8000288 <__aeabi_dsub>
 8007b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b84:	4656      	mov	r6, sl
 8007b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b8a:	f7f8 ffe5 	bl	8000b58 <__aeabi_d2iz>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	f7f8 fcc8 	bl	8000524 <__aeabi_i2d>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9c:	f7f8 fb74 	bl	8000288 <__aeabi_dsub>
 8007ba0:	3530      	adds	r5, #48	@ 0x30
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007baa:	f806 5b01 	strb.w	r5, [r6], #1
 8007bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bb2:	f7f8 ff93 	bl	8000adc <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d171      	bne.n	8007c9e <_dtoa_r+0x65e>
 8007bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bbe:	4911      	ldr	r1, [pc, #68]	@ (8007c04 <_dtoa_r+0x5c4>)
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f7f8 fb61 	bl	8000288 <__aeabi_dsub>
 8007bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bca:	f7f8 ff87 	bl	8000adc <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8095 	bne.w	8007cfe <_dtoa_r+0x6be>
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	f43f af50 	beq.w	8007a7a <_dtoa_r+0x43a>
 8007bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bde:	4b0a      	ldr	r3, [pc, #40]	@ (8007c08 <_dtoa_r+0x5c8>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	f7f8 fd09 	bl	80005f8 <__aeabi_dmul>
 8007be6:	4b08      	ldr	r3, [pc, #32]	@ (8007c08 <_dtoa_r+0x5c8>)
 8007be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bec:	2200      	movs	r2, #0
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	f7f8 fd01 	bl	80005f8 <__aeabi_dmul>
 8007bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfa:	e7c4      	b.n	8007b86 <_dtoa_r+0x546>
 8007bfc:	0800c448 	.word	0x0800c448
 8007c00:	0800c420 	.word	0x0800c420
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	40240000 	.word	0x40240000
 8007c0c:	401c0000 	.word	0x401c0000
 8007c10:	40140000 	.word	0x40140000
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7f8 fcec 	bl	80005f8 <__aeabi_dmul>
 8007c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8007c26:	4656      	mov	r6, sl
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	f7f8 ff94 	bl	8000b58 <__aeabi_d2iz>
 8007c30:	4605      	mov	r5, r0
 8007c32:	f7f8 fc77 	bl	8000524 <__aeabi_i2d>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c3e:	f7f8 fb23 	bl	8000288 <__aeabi_dsub>
 8007c42:	3530      	adds	r5, #48	@ 0x30
 8007c44:	f806 5b01 	strb.w	r5, [r6], #1
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	42a6      	cmp	r6, r4
 8007c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	d124      	bne.n	8007ca2 <_dtoa_r+0x662>
 8007c58:	4bac      	ldr	r3, [pc, #688]	@ (8007f0c <_dtoa_r+0x8cc>)
 8007c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c5e:	f7f8 fb15 	bl	800028c <__adddf3>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	f7f8 ff55 	bl	8000b18 <__aeabi_dcmpgt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d145      	bne.n	8007cfe <_dtoa_r+0x6be>
 8007c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c76:	49a5      	ldr	r1, [pc, #660]	@ (8007f0c <_dtoa_r+0x8cc>)
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f7f8 fb05 	bl	8000288 <__aeabi_dsub>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c86:	f7f8 ff29 	bl	8000adc <__aeabi_dcmplt>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f43f aef5 	beq.w	8007a7a <_dtoa_r+0x43a>
 8007c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007c92:	1e73      	subs	r3, r6, #1
 8007c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c9a:	2b30      	cmp	r3, #48	@ 0x30
 8007c9c:	d0f8      	beq.n	8007c90 <_dtoa_r+0x650>
 8007c9e:	9f04      	ldr	r7, [sp, #16]
 8007ca0:	e73e      	b.n	8007b20 <_dtoa_r+0x4e0>
 8007ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8007f10 <_dtoa_r+0x8d0>)
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cac:	e7bc      	b.n	8007c28 <_dtoa_r+0x5e8>
 8007cae:	d10c      	bne.n	8007cca <_dtoa_r+0x68a>
 8007cb0:	4b98      	ldr	r3, [pc, #608]	@ (8007f14 <_dtoa_r+0x8d4>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cb8:	f7f8 fc9e 	bl	80005f8 <__aeabi_dmul>
 8007cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cc0:	f7f8 ff20 	bl	8000b04 <__aeabi_dcmpge>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f000 8157 	beq.w	8007f78 <_dtoa_r+0x938>
 8007cca:	2400      	movs	r4, #0
 8007ccc:	4625      	mov	r5, r4
 8007cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	4656      	mov	r6, sl
 8007cd6:	2700      	movs	r7, #0
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fbb4 	bl	8008448 <_Bfree>
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	d0dc      	beq.n	8007c9e <_dtoa_r+0x65e>
 8007ce4:	b12f      	cbz	r7, 8007cf2 <_dtoa_r+0x6b2>
 8007ce6:	42af      	cmp	r7, r5
 8007ce8:	d003      	beq.n	8007cf2 <_dtoa_r+0x6b2>
 8007cea:	4639      	mov	r1, r7
 8007cec:	4658      	mov	r0, fp
 8007cee:	f000 fbab 	bl	8008448 <_Bfree>
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4658      	mov	r0, fp
 8007cf6:	f000 fba7 	bl	8008448 <_Bfree>
 8007cfa:	e7d0      	b.n	8007c9e <_dtoa_r+0x65e>
 8007cfc:	9704      	str	r7, [sp, #16]
 8007cfe:	4633      	mov	r3, r6
 8007d00:	461e      	mov	r6, r3
 8007d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d06:	2a39      	cmp	r2, #57	@ 0x39
 8007d08:	d107      	bne.n	8007d1a <_dtoa_r+0x6da>
 8007d0a:	459a      	cmp	sl, r3
 8007d0c:	d1f8      	bne.n	8007d00 <_dtoa_r+0x6c0>
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	3201      	adds	r2, #1
 8007d12:	9204      	str	r2, [sp, #16]
 8007d14:	2230      	movs	r2, #48	@ 0x30
 8007d16:	f88a 2000 	strb.w	r2, [sl]
 8007d1a:	781a      	ldrb	r2, [r3, #0]
 8007d1c:	3201      	adds	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	e7bd      	b.n	8007c9e <_dtoa_r+0x65e>
 8007d22:	4b7b      	ldr	r3, [pc, #492]	@ (8007f10 <_dtoa_r+0x8d0>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	f7f8 fc67 	bl	80005f8 <__aeabi_dmul>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	f7f8 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f43f aebb 	beq.w	8007ab2 <_dtoa_r+0x472>
 8007d3c:	e6f0      	b.n	8007b20 <_dtoa_r+0x4e0>
 8007d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	f000 80db 	beq.w	8007efc <_dtoa_r+0x8bc>
 8007d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d48:	2a01      	cmp	r2, #1
 8007d4a:	f300 80bf 	bgt.w	8007ecc <_dtoa_r+0x88c>
 8007d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	f000 80b7 	beq.w	8007ec4 <_dtoa_r+0x884>
 8007d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d5c:	4646      	mov	r6, r8
 8007d5e:	9a08      	ldr	r2, [sp, #32]
 8007d60:	2101      	movs	r1, #1
 8007d62:	441a      	add	r2, r3
 8007d64:	4658      	mov	r0, fp
 8007d66:	4498      	add	r8, r3
 8007d68:	9208      	str	r2, [sp, #32]
 8007d6a:	f000 fc21 	bl	80085b0 <__i2b>
 8007d6e:	4605      	mov	r5, r0
 8007d70:	b15e      	cbz	r6, 8007d8a <_dtoa_r+0x74a>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd08      	ble.n	8007d8a <_dtoa_r+0x74a>
 8007d78:	42b3      	cmp	r3, r6
 8007d7a:	9a08      	ldr	r2, [sp, #32]
 8007d7c:	bfa8      	it	ge
 8007d7e:	4633      	movge	r3, r6
 8007d80:	eba8 0803 	sub.w	r8, r8, r3
 8007d84:	1af6      	subs	r6, r6, r3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	9308      	str	r3, [sp, #32]
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8c:	b1f3      	cbz	r3, 8007dcc <_dtoa_r+0x78c>
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80b7 	beq.w	8007f04 <_dtoa_r+0x8c4>
 8007d96:	b18c      	cbz	r4, 8007dbc <_dtoa_r+0x77c>
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fcc7 	bl	8008730 <__pow5mult>
 8007da2:	464a      	mov	r2, r9
 8007da4:	4601      	mov	r1, r0
 8007da6:	4605      	mov	r5, r0
 8007da8:	4658      	mov	r0, fp
 8007daa:	f000 fc17 	bl	80085dc <__multiply>
 8007dae:	4649      	mov	r1, r9
 8007db0:	9004      	str	r0, [sp, #16]
 8007db2:	4658      	mov	r0, fp
 8007db4:	f000 fb48 	bl	8008448 <_Bfree>
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	4699      	mov	r9, r3
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dbe:	1b1a      	subs	r2, r3, r4
 8007dc0:	d004      	beq.n	8007dcc <_dtoa_r+0x78c>
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	f000 fcb3 	bl	8008730 <__pow5mult>
 8007dca:	4681      	mov	r9, r0
 8007dcc:	2101      	movs	r1, #1
 8007dce:	4658      	mov	r0, fp
 8007dd0:	f000 fbee 	bl	80085b0 <__i2b>
 8007dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 81cf 	beq.w	800817c <_dtoa_r+0xb3c>
 8007dde:	461a      	mov	r2, r3
 8007de0:	4601      	mov	r1, r0
 8007de2:	4658      	mov	r0, fp
 8007de4:	f000 fca4 	bl	8008730 <__pow5mult>
 8007de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	4604      	mov	r4, r0
 8007dee:	f300 8095 	bgt.w	8007f1c <_dtoa_r+0x8dc>
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f040 8087 	bne.w	8007f08 <_dtoa_r+0x8c8>
 8007dfa:	9b03      	ldr	r3, [sp, #12]
 8007dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f040 8089 	bne.w	8007f18 <_dtoa_r+0x8d8>
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e0c:	0d1b      	lsrs	r3, r3, #20
 8007e0e:	051b      	lsls	r3, r3, #20
 8007e10:	b12b      	cbz	r3, 8007e1e <_dtoa_r+0x7de>
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	3301      	adds	r3, #1
 8007e16:	9308      	str	r3, [sp, #32]
 8007e18:	f108 0801 	add.w	r8, r8, #1
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 81b0 	beq.w	8008188 <_dtoa_r+0xb48>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e2e:	6918      	ldr	r0, [r3, #16]
 8007e30:	f000 fb72 	bl	8008518 <__hi0bits>
 8007e34:	f1c0 0020 	rsb	r0, r0, #32
 8007e38:	9b08      	ldr	r3, [sp, #32]
 8007e3a:	4418      	add	r0, r3
 8007e3c:	f010 001f 	ands.w	r0, r0, #31
 8007e40:	d077      	beq.n	8007f32 <_dtoa_r+0x8f2>
 8007e42:	f1c0 0320 	rsb	r3, r0, #32
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	dd6b      	ble.n	8007f22 <_dtoa_r+0x8e2>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	f1c0 001c 	rsb	r0, r0, #28
 8007e50:	4403      	add	r3, r0
 8007e52:	4480      	add	r8, r0
 8007e54:	4406      	add	r6, r0
 8007e56:	9308      	str	r3, [sp, #32]
 8007e58:	f1b8 0f00 	cmp.w	r8, #0
 8007e5c:	dd05      	ble.n	8007e6a <_dtoa_r+0x82a>
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4642      	mov	r2, r8
 8007e62:	4658      	mov	r0, fp
 8007e64:	f000 fcbe 	bl	80087e4 <__lshift>
 8007e68:	4681      	mov	r9, r0
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd05      	ble.n	8007e7c <_dtoa_r+0x83c>
 8007e70:	4621      	mov	r1, r4
 8007e72:	461a      	mov	r2, r3
 8007e74:	4658      	mov	r0, fp
 8007e76:	f000 fcb5 	bl	80087e4 <__lshift>
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d059      	beq.n	8007f36 <_dtoa_r+0x8f6>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4648      	mov	r0, r9
 8007e86:	f000 fd19 	bl	80088bc <__mcmp>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	da53      	bge.n	8007f36 <_dtoa_r+0x8f6>
 8007e8e:	1e7b      	subs	r3, r7, #1
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	4649      	mov	r1, r9
 8007e94:	2300      	movs	r3, #0
 8007e96:	220a      	movs	r2, #10
 8007e98:	4658      	mov	r0, fp
 8007e9a:	f000 faf7 	bl	800848c <__multadd>
 8007e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ea0:	4681      	mov	r9, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8172 	beq.w	800818c <_dtoa_r+0xb4c>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4629      	mov	r1, r5
 8007eac:	220a      	movs	r2, #10
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f000 faec 	bl	800848c <__multadd>
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	4605      	mov	r5, r0
 8007eba:	dc67      	bgt.n	8007f8c <_dtoa_r+0x94c>
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	dc41      	bgt.n	8007f46 <_dtoa_r+0x906>
 8007ec2:	e063      	b.n	8007f8c <_dtoa_r+0x94c>
 8007ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007eca:	e746      	b.n	8007d5a <_dtoa_r+0x71a>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	1e5c      	subs	r4, r3, #1
 8007ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	bfbf      	itttt	lt
 8007ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007edc:	1ae3      	sublt	r3, r4, r3
 8007ede:	bfb4      	ite	lt
 8007ee0:	18d2      	addlt	r2, r2, r3
 8007ee2:	1b1c      	subge	r4, r3, r4
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	bfbc      	itt	lt
 8007ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007eea:	2400      	movlt	r4, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bfb5      	itete	lt
 8007ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ef4:	9b07      	ldrge	r3, [sp, #28]
 8007ef6:	2300      	movlt	r3, #0
 8007ef8:	4646      	movge	r6, r8
 8007efa:	e730      	b.n	8007d5e <_dtoa_r+0x71e>
 8007efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007f00:	4646      	mov	r6, r8
 8007f02:	e735      	b.n	8007d70 <_dtoa_r+0x730>
 8007f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f06:	e75c      	b.n	8007dc2 <_dtoa_r+0x782>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e788      	b.n	8007e1e <_dtoa_r+0x7de>
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	40240000 	.word	0x40240000
 8007f14:	40140000 	.word	0x40140000
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	e780      	b.n	8007e1e <_dtoa_r+0x7de>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f20:	e782      	b.n	8007e28 <_dtoa_r+0x7e8>
 8007f22:	d099      	beq.n	8007e58 <_dtoa_r+0x818>
 8007f24:	9a08      	ldr	r2, [sp, #32]
 8007f26:	331c      	adds	r3, #28
 8007f28:	441a      	add	r2, r3
 8007f2a:	4498      	add	r8, r3
 8007f2c:	441e      	add	r6, r3
 8007f2e:	9208      	str	r2, [sp, #32]
 8007f30:	e792      	b.n	8007e58 <_dtoa_r+0x818>
 8007f32:	4603      	mov	r3, r0
 8007f34:	e7f6      	b.n	8007f24 <_dtoa_r+0x8e4>
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	9704      	str	r7, [sp, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dc20      	bgt.n	8007f80 <_dtoa_r+0x940>
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	dd1e      	ble.n	8007f84 <_dtoa_r+0x944>
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f47f aec0 	bne.w	8007cce <_dtoa_r+0x68e>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	2205      	movs	r2, #5
 8007f52:	4658      	mov	r0, fp
 8007f54:	f000 fa9a 	bl	800848c <__multadd>
 8007f58:	4601      	mov	r1, r0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4648      	mov	r0, r9
 8007f5e:	f000 fcad 	bl	80088bc <__mcmp>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f77f aeb3 	ble.w	8007cce <_dtoa_r+0x68e>
 8007f68:	4656      	mov	r6, sl
 8007f6a:	2331      	movs	r3, #49	@ 0x31
 8007f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f70:	9b04      	ldr	r3, [sp, #16]
 8007f72:	3301      	adds	r3, #1
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	e6ae      	b.n	8007cd6 <_dtoa_r+0x696>
 8007f78:	9c07      	ldr	r4, [sp, #28]
 8007f7a:	9704      	str	r7, [sp, #16]
 8007f7c:	4625      	mov	r5, r4
 8007f7e:	e7f3      	b.n	8007f68 <_dtoa_r+0x928>
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 8104 	beq.w	8008194 <_dtoa_r+0xb54>
 8007f8c:	2e00      	cmp	r6, #0
 8007f8e:	dd05      	ble.n	8007f9c <_dtoa_r+0x95c>
 8007f90:	4629      	mov	r1, r5
 8007f92:	4632      	mov	r2, r6
 8007f94:	4658      	mov	r0, fp
 8007f96:	f000 fc25 	bl	80087e4 <__lshift>
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d05a      	beq.n	8008058 <_dtoa_r+0xa18>
 8007fa2:	6869      	ldr	r1, [r5, #4]
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f000 fa0f 	bl	80083c8 <_Balloc>
 8007faa:	4606      	mov	r6, r0
 8007fac:	b928      	cbnz	r0, 8007fba <_dtoa_r+0x97a>
 8007fae:	4b84      	ldr	r3, [pc, #528]	@ (80081c0 <_dtoa_r+0xb80>)
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007fb6:	f7ff bb5a 	b.w	800766e <_dtoa_r+0x2e>
 8007fba:	692a      	ldr	r2, [r5, #16]
 8007fbc:	3202      	adds	r2, #2
 8007fbe:	0092      	lsls	r2, r2, #2
 8007fc0:	f105 010c 	add.w	r1, r5, #12
 8007fc4:	300c      	adds	r0, #12
 8007fc6:	f7ff fa86 	bl	80074d6 <memcpy>
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f000 fc08 	bl	80087e4 <__lshift>
 8007fd4:	f10a 0301 	add.w	r3, sl, #1
 8007fd8:	9307      	str	r3, [sp, #28]
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	4453      	add	r3, sl
 8007fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fe0:	9b02      	ldr	r3, [sp, #8]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	462f      	mov	r7, r5
 8007fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fea:	4605      	mov	r5, r0
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	4621      	mov	r1, r4
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f7ff fa9b 	bl	8007530 <quorem>
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008002:	4648      	mov	r0, r9
 8008004:	f000 fc5a 	bl	80088bc <__mcmp>
 8008008:	462a      	mov	r2, r5
 800800a:	9008      	str	r0, [sp, #32]
 800800c:	4621      	mov	r1, r4
 800800e:	4658      	mov	r0, fp
 8008010:	f000 fc70 	bl	80088f4 <__mdiff>
 8008014:	68c2      	ldr	r2, [r0, #12]
 8008016:	4606      	mov	r6, r0
 8008018:	bb02      	cbnz	r2, 800805c <_dtoa_r+0xa1c>
 800801a:	4601      	mov	r1, r0
 800801c:	4648      	mov	r0, r9
 800801e:	f000 fc4d 	bl	80088bc <__mcmp>
 8008022:	4602      	mov	r2, r0
 8008024:	4631      	mov	r1, r6
 8008026:	4658      	mov	r0, fp
 8008028:	920e      	str	r2, [sp, #56]	@ 0x38
 800802a:	f000 fa0d 	bl	8008448 <_Bfree>
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008032:	9e07      	ldr	r6, [sp, #28]
 8008034:	ea43 0102 	orr.w	r1, r3, r2
 8008038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800803a:	4319      	orrs	r1, r3
 800803c:	d110      	bne.n	8008060 <_dtoa_r+0xa20>
 800803e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008042:	d029      	beq.n	8008098 <_dtoa_r+0xa58>
 8008044:	9b08      	ldr	r3, [sp, #32]
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd02      	ble.n	8008050 <_dtoa_r+0xa10>
 800804a:	9b02      	ldr	r3, [sp, #8]
 800804c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008050:	9b00      	ldr	r3, [sp, #0]
 8008052:	f883 8000 	strb.w	r8, [r3]
 8008056:	e63f      	b.n	8007cd8 <_dtoa_r+0x698>
 8008058:	4628      	mov	r0, r5
 800805a:	e7bb      	b.n	8007fd4 <_dtoa_r+0x994>
 800805c:	2201      	movs	r2, #1
 800805e:	e7e1      	b.n	8008024 <_dtoa_r+0x9e4>
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	db04      	blt.n	8008070 <_dtoa_r+0xa30>
 8008066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008068:	430b      	orrs	r3, r1
 800806a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800806c:	430b      	orrs	r3, r1
 800806e:	d120      	bne.n	80080b2 <_dtoa_r+0xa72>
 8008070:	2a00      	cmp	r2, #0
 8008072:	dded      	ble.n	8008050 <_dtoa_r+0xa10>
 8008074:	4649      	mov	r1, r9
 8008076:	2201      	movs	r2, #1
 8008078:	4658      	mov	r0, fp
 800807a:	f000 fbb3 	bl	80087e4 <__lshift>
 800807e:	4621      	mov	r1, r4
 8008080:	4681      	mov	r9, r0
 8008082:	f000 fc1b 	bl	80088bc <__mcmp>
 8008086:	2800      	cmp	r0, #0
 8008088:	dc03      	bgt.n	8008092 <_dtoa_r+0xa52>
 800808a:	d1e1      	bne.n	8008050 <_dtoa_r+0xa10>
 800808c:	f018 0f01 	tst.w	r8, #1
 8008090:	d0de      	beq.n	8008050 <_dtoa_r+0xa10>
 8008092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008096:	d1d8      	bne.n	800804a <_dtoa_r+0xa0a>
 8008098:	9a00      	ldr	r2, [sp, #0]
 800809a:	2339      	movs	r3, #57	@ 0x39
 800809c:	7013      	strb	r3, [r2, #0]
 800809e:	4633      	mov	r3, r6
 80080a0:	461e      	mov	r6, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80080a8:	2a39      	cmp	r2, #57	@ 0x39
 80080aa:	d052      	beq.n	8008152 <_dtoa_r+0xb12>
 80080ac:	3201      	adds	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e612      	b.n	8007cd8 <_dtoa_r+0x698>
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	dd07      	ble.n	80080c6 <_dtoa_r+0xa86>
 80080b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080ba:	d0ed      	beq.n	8008098 <_dtoa_r+0xa58>
 80080bc:	9a00      	ldr	r2, [sp, #0]
 80080be:	f108 0301 	add.w	r3, r8, #1
 80080c2:	7013      	strb	r3, [r2, #0]
 80080c4:	e608      	b.n	8007cd8 <_dtoa_r+0x698>
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	9a07      	ldr	r2, [sp, #28]
 80080ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80080ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d028      	beq.n	8008126 <_dtoa_r+0xae6>
 80080d4:	4649      	mov	r1, r9
 80080d6:	2300      	movs	r3, #0
 80080d8:	220a      	movs	r2, #10
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 f9d6 	bl	800848c <__multadd>
 80080e0:	42af      	cmp	r7, r5
 80080e2:	4681      	mov	r9, r0
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	f04f 020a 	mov.w	r2, #10
 80080ec:	4639      	mov	r1, r7
 80080ee:	4658      	mov	r0, fp
 80080f0:	d107      	bne.n	8008102 <_dtoa_r+0xac2>
 80080f2:	f000 f9cb 	bl	800848c <__multadd>
 80080f6:	4607      	mov	r7, r0
 80080f8:	4605      	mov	r5, r0
 80080fa:	9b07      	ldr	r3, [sp, #28]
 80080fc:	3301      	adds	r3, #1
 80080fe:	9307      	str	r3, [sp, #28]
 8008100:	e774      	b.n	8007fec <_dtoa_r+0x9ac>
 8008102:	f000 f9c3 	bl	800848c <__multadd>
 8008106:	4629      	mov	r1, r5
 8008108:	4607      	mov	r7, r0
 800810a:	2300      	movs	r3, #0
 800810c:	220a      	movs	r2, #10
 800810e:	4658      	mov	r0, fp
 8008110:	f000 f9bc 	bl	800848c <__multadd>
 8008114:	4605      	mov	r5, r0
 8008116:	e7f0      	b.n	80080fa <_dtoa_r+0xaba>
 8008118:	9b00      	ldr	r3, [sp, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfcc      	ite	gt
 800811e:	461e      	movgt	r6, r3
 8008120:	2601      	movle	r6, #1
 8008122:	4456      	add	r6, sl
 8008124:	2700      	movs	r7, #0
 8008126:	4649      	mov	r1, r9
 8008128:	2201      	movs	r2, #1
 800812a:	4658      	mov	r0, fp
 800812c:	f000 fb5a 	bl	80087e4 <__lshift>
 8008130:	4621      	mov	r1, r4
 8008132:	4681      	mov	r9, r0
 8008134:	f000 fbc2 	bl	80088bc <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	dcb0      	bgt.n	800809e <_dtoa_r+0xa5e>
 800813c:	d102      	bne.n	8008144 <_dtoa_r+0xb04>
 800813e:	f018 0f01 	tst.w	r8, #1
 8008142:	d1ac      	bne.n	800809e <_dtoa_r+0xa5e>
 8008144:	4633      	mov	r3, r6
 8008146:	461e      	mov	r6, r3
 8008148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814c:	2a30      	cmp	r2, #48	@ 0x30
 800814e:	d0fa      	beq.n	8008146 <_dtoa_r+0xb06>
 8008150:	e5c2      	b.n	8007cd8 <_dtoa_r+0x698>
 8008152:	459a      	cmp	sl, r3
 8008154:	d1a4      	bne.n	80080a0 <_dtoa_r+0xa60>
 8008156:	9b04      	ldr	r3, [sp, #16]
 8008158:	3301      	adds	r3, #1
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	2331      	movs	r3, #49	@ 0x31
 800815e:	f88a 3000 	strb.w	r3, [sl]
 8008162:	e5b9      	b.n	8007cd8 <_dtoa_r+0x698>
 8008164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80081c4 <_dtoa_r+0xb84>
 800816a:	b11b      	cbz	r3, 8008174 <_dtoa_r+0xb34>
 800816c:	f10a 0308 	add.w	r3, sl, #8
 8008170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	4650      	mov	r0, sl
 8008176:	b019      	add	sp, #100	@ 0x64
 8008178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817e:	2b01      	cmp	r3, #1
 8008180:	f77f ae37 	ble.w	8007df2 <_dtoa_r+0x7b2>
 8008184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008186:	930a      	str	r3, [sp, #40]	@ 0x28
 8008188:	2001      	movs	r0, #1
 800818a:	e655      	b.n	8007e38 <_dtoa_r+0x7f8>
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f77f aed6 	ble.w	8007f40 <_dtoa_r+0x900>
 8008194:	4656      	mov	r6, sl
 8008196:	4621      	mov	r1, r4
 8008198:	4648      	mov	r0, r9
 800819a:	f7ff f9c9 	bl	8007530 <quorem>
 800819e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081a2:	f806 8b01 	strb.w	r8, [r6], #1
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	eba6 020a 	sub.w	r2, r6, sl
 80081ac:	4293      	cmp	r3, r2
 80081ae:	ddb3      	ble.n	8008118 <_dtoa_r+0xad8>
 80081b0:	4649      	mov	r1, r9
 80081b2:	2300      	movs	r3, #0
 80081b4:	220a      	movs	r2, #10
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 f968 	bl	800848c <__multadd>
 80081bc:	4681      	mov	r9, r0
 80081be:	e7ea      	b.n	8008196 <_dtoa_r+0xb56>
 80081c0:	0800c3a6 	.word	0x0800c3a6
 80081c4:	0800c32a 	.word	0x0800c32a

080081c8 <_free_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4605      	mov	r5, r0
 80081cc:	2900      	cmp	r1, #0
 80081ce:	d041      	beq.n	8008254 <_free_r+0x8c>
 80081d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d4:	1f0c      	subs	r4, r1, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfb8      	it	lt
 80081da:	18e4      	addlt	r4, r4, r3
 80081dc:	f000 f8e8 	bl	80083b0 <__malloc_lock>
 80081e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008258 <_free_r+0x90>)
 80081e2:	6813      	ldr	r3, [r2, #0]
 80081e4:	b933      	cbnz	r3, 80081f4 <_free_r+0x2c>
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	6014      	str	r4, [r2, #0]
 80081ea:	4628      	mov	r0, r5
 80081ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f0:	f000 b8e4 	b.w	80083bc <__malloc_unlock>
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d908      	bls.n	800820a <_free_r+0x42>
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	1821      	adds	r1, r4, r0
 80081fc:	428b      	cmp	r3, r1
 80081fe:	bf01      	itttt	eq
 8008200:	6819      	ldreq	r1, [r3, #0]
 8008202:	685b      	ldreq	r3, [r3, #4]
 8008204:	1809      	addeq	r1, r1, r0
 8008206:	6021      	streq	r1, [r4, #0]
 8008208:	e7ed      	b.n	80081e6 <_free_r+0x1e>
 800820a:	461a      	mov	r2, r3
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	b10b      	cbz	r3, 8008214 <_free_r+0x4c>
 8008210:	42a3      	cmp	r3, r4
 8008212:	d9fa      	bls.n	800820a <_free_r+0x42>
 8008214:	6811      	ldr	r1, [r2, #0]
 8008216:	1850      	adds	r0, r2, r1
 8008218:	42a0      	cmp	r0, r4
 800821a:	d10b      	bne.n	8008234 <_free_r+0x6c>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	4401      	add	r1, r0
 8008220:	1850      	adds	r0, r2, r1
 8008222:	4283      	cmp	r3, r0
 8008224:	6011      	str	r1, [r2, #0]
 8008226:	d1e0      	bne.n	80081ea <_free_r+0x22>
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	6053      	str	r3, [r2, #4]
 800822e:	4408      	add	r0, r1
 8008230:	6010      	str	r0, [r2, #0]
 8008232:	e7da      	b.n	80081ea <_free_r+0x22>
 8008234:	d902      	bls.n	800823c <_free_r+0x74>
 8008236:	230c      	movs	r3, #12
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	e7d6      	b.n	80081ea <_free_r+0x22>
 800823c:	6820      	ldr	r0, [r4, #0]
 800823e:	1821      	adds	r1, r4, r0
 8008240:	428b      	cmp	r3, r1
 8008242:	bf04      	itt	eq
 8008244:	6819      	ldreq	r1, [r3, #0]
 8008246:	685b      	ldreq	r3, [r3, #4]
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	bf04      	itt	eq
 800824c:	1809      	addeq	r1, r1, r0
 800824e:	6021      	streq	r1, [r4, #0]
 8008250:	6054      	str	r4, [r2, #4]
 8008252:	e7ca      	b.n	80081ea <_free_r+0x22>
 8008254:	bd38      	pop	{r3, r4, r5, pc}
 8008256:	bf00      	nop
 8008258:	2000078c 	.word	0x2000078c

0800825c <malloc>:
 800825c:	4b02      	ldr	r3, [pc, #8]	@ (8008268 <malloc+0xc>)
 800825e:	4601      	mov	r1, r0
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	f000 b825 	b.w	80082b0 <_malloc_r>
 8008266:	bf00      	nop
 8008268:	20000244 	.word	0x20000244

0800826c <sbrk_aligned>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4e0f      	ldr	r6, [pc, #60]	@ (80082ac <sbrk_aligned+0x40>)
 8008270:	460c      	mov	r4, r1
 8008272:	6831      	ldr	r1, [r6, #0]
 8008274:	4605      	mov	r5, r0
 8008276:	b911      	cbnz	r1, 800827e <sbrk_aligned+0x12>
 8008278:	f001 f81e 	bl	80092b8 <_sbrk_r>
 800827c:	6030      	str	r0, [r6, #0]
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f001 f819 	bl	80092b8 <_sbrk_r>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	d103      	bne.n	8008292 <sbrk_aligned+0x26>
 800828a:	f04f 34ff 	mov.w	r4, #4294967295
 800828e:	4620      	mov	r0, r4
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	1cc4      	adds	r4, r0, #3
 8008294:	f024 0403 	bic.w	r4, r4, #3
 8008298:	42a0      	cmp	r0, r4
 800829a:	d0f8      	beq.n	800828e <sbrk_aligned+0x22>
 800829c:	1a21      	subs	r1, r4, r0
 800829e:	4628      	mov	r0, r5
 80082a0:	f001 f80a 	bl	80092b8 <_sbrk_r>
 80082a4:	3001      	adds	r0, #1
 80082a6:	d1f2      	bne.n	800828e <sbrk_aligned+0x22>
 80082a8:	e7ef      	b.n	800828a <sbrk_aligned+0x1e>
 80082aa:	bf00      	nop
 80082ac:	20000788 	.word	0x20000788

080082b0 <_malloc_r>:
 80082b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b4:	1ccd      	adds	r5, r1, #3
 80082b6:	f025 0503 	bic.w	r5, r5, #3
 80082ba:	3508      	adds	r5, #8
 80082bc:	2d0c      	cmp	r5, #12
 80082be:	bf38      	it	cc
 80082c0:	250c      	movcc	r5, #12
 80082c2:	2d00      	cmp	r5, #0
 80082c4:	4606      	mov	r6, r0
 80082c6:	db01      	blt.n	80082cc <_malloc_r+0x1c>
 80082c8:	42a9      	cmp	r1, r5
 80082ca:	d904      	bls.n	80082d6 <_malloc_r+0x26>
 80082cc:	230c      	movs	r3, #12
 80082ce:	6033      	str	r3, [r6, #0]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083ac <_malloc_r+0xfc>
 80082da:	f000 f869 	bl	80083b0 <__malloc_lock>
 80082de:	f8d8 3000 	ldr.w	r3, [r8]
 80082e2:	461c      	mov	r4, r3
 80082e4:	bb44      	cbnz	r4, 8008338 <_malloc_r+0x88>
 80082e6:	4629      	mov	r1, r5
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7ff ffbf 	bl	800826c <sbrk_aligned>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	4604      	mov	r4, r0
 80082f2:	d158      	bne.n	80083a6 <_malloc_r+0xf6>
 80082f4:	f8d8 4000 	ldr.w	r4, [r8]
 80082f8:	4627      	mov	r7, r4
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	d143      	bne.n	8008386 <_malloc_r+0xd6>
 80082fe:	2c00      	cmp	r4, #0
 8008300:	d04b      	beq.n	800839a <_malloc_r+0xea>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	4639      	mov	r1, r7
 8008306:	4630      	mov	r0, r6
 8008308:	eb04 0903 	add.w	r9, r4, r3
 800830c:	f000 ffd4 	bl	80092b8 <_sbrk_r>
 8008310:	4581      	cmp	r9, r0
 8008312:	d142      	bne.n	800839a <_malloc_r+0xea>
 8008314:	6821      	ldr	r1, [r4, #0]
 8008316:	1a6d      	subs	r5, r5, r1
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff ffa6 	bl	800826c <sbrk_aligned>
 8008320:	3001      	adds	r0, #1
 8008322:	d03a      	beq.n	800839a <_malloc_r+0xea>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	442b      	add	r3, r5
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	f8d8 3000 	ldr.w	r3, [r8]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	bb62      	cbnz	r2, 800838c <_malloc_r+0xdc>
 8008332:	f8c8 7000 	str.w	r7, [r8]
 8008336:	e00f      	b.n	8008358 <_malloc_r+0xa8>
 8008338:	6822      	ldr	r2, [r4, #0]
 800833a:	1b52      	subs	r2, r2, r5
 800833c:	d420      	bmi.n	8008380 <_malloc_r+0xd0>
 800833e:	2a0b      	cmp	r2, #11
 8008340:	d917      	bls.n	8008372 <_malloc_r+0xc2>
 8008342:	1961      	adds	r1, r4, r5
 8008344:	42a3      	cmp	r3, r4
 8008346:	6025      	str	r5, [r4, #0]
 8008348:	bf18      	it	ne
 800834a:	6059      	strne	r1, [r3, #4]
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	bf08      	it	eq
 8008350:	f8c8 1000 	streq.w	r1, [r8]
 8008354:	5162      	str	r2, [r4, r5]
 8008356:	604b      	str	r3, [r1, #4]
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f82f 	bl	80083bc <__malloc_unlock>
 800835e:	f104 000b 	add.w	r0, r4, #11
 8008362:	1d23      	adds	r3, r4, #4
 8008364:	f020 0007 	bic.w	r0, r0, #7
 8008368:	1ac2      	subs	r2, r0, r3
 800836a:	bf1c      	itt	ne
 800836c:	1a1b      	subne	r3, r3, r0
 800836e:	50a3      	strne	r3, [r4, r2]
 8008370:	e7af      	b.n	80082d2 <_malloc_r+0x22>
 8008372:	6862      	ldr	r2, [r4, #4]
 8008374:	42a3      	cmp	r3, r4
 8008376:	bf0c      	ite	eq
 8008378:	f8c8 2000 	streq.w	r2, [r8]
 800837c:	605a      	strne	r2, [r3, #4]
 800837e:	e7eb      	b.n	8008358 <_malloc_r+0xa8>
 8008380:	4623      	mov	r3, r4
 8008382:	6864      	ldr	r4, [r4, #4]
 8008384:	e7ae      	b.n	80082e4 <_malloc_r+0x34>
 8008386:	463c      	mov	r4, r7
 8008388:	687f      	ldr	r7, [r7, #4]
 800838a:	e7b6      	b.n	80082fa <_malloc_r+0x4a>
 800838c:	461a      	mov	r2, r3
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	42a3      	cmp	r3, r4
 8008392:	d1fb      	bne.n	800838c <_malloc_r+0xdc>
 8008394:	2300      	movs	r3, #0
 8008396:	6053      	str	r3, [r2, #4]
 8008398:	e7de      	b.n	8008358 <_malloc_r+0xa8>
 800839a:	230c      	movs	r3, #12
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	4630      	mov	r0, r6
 80083a0:	f000 f80c 	bl	80083bc <__malloc_unlock>
 80083a4:	e794      	b.n	80082d0 <_malloc_r+0x20>
 80083a6:	6005      	str	r5, [r0, #0]
 80083a8:	e7d6      	b.n	8008358 <_malloc_r+0xa8>
 80083aa:	bf00      	nop
 80083ac:	2000078c 	.word	0x2000078c

080083b0 <__malloc_lock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	@ (80083b8 <__malloc_lock+0x8>)
 80083b2:	f7ff b88e 	b.w	80074d2 <__retarget_lock_acquire_recursive>
 80083b6:	bf00      	nop
 80083b8:	20000784 	.word	0x20000784

080083bc <__malloc_unlock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	@ (80083c4 <__malloc_unlock+0x8>)
 80083be:	f7ff b889 	b.w	80074d4 <__retarget_lock_release_recursive>
 80083c2:	bf00      	nop
 80083c4:	20000784 	.word	0x20000784

080083c8 <_Balloc>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	69c6      	ldr	r6, [r0, #28]
 80083cc:	4604      	mov	r4, r0
 80083ce:	460d      	mov	r5, r1
 80083d0:	b976      	cbnz	r6, 80083f0 <_Balloc+0x28>
 80083d2:	2010      	movs	r0, #16
 80083d4:	f7ff ff42 	bl	800825c <malloc>
 80083d8:	4602      	mov	r2, r0
 80083da:	61e0      	str	r0, [r4, #28]
 80083dc:	b920      	cbnz	r0, 80083e8 <_Balloc+0x20>
 80083de:	4b18      	ldr	r3, [pc, #96]	@ (8008440 <_Balloc+0x78>)
 80083e0:	4818      	ldr	r0, [pc, #96]	@ (8008444 <_Balloc+0x7c>)
 80083e2:	216b      	movs	r1, #107	@ 0x6b
 80083e4:	f7ff f886 	bl	80074f4 <__assert_func>
 80083e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083ec:	6006      	str	r6, [r0, #0]
 80083ee:	60c6      	str	r6, [r0, #12]
 80083f0:	69e6      	ldr	r6, [r4, #28]
 80083f2:	68f3      	ldr	r3, [r6, #12]
 80083f4:	b183      	cbz	r3, 8008418 <_Balloc+0x50>
 80083f6:	69e3      	ldr	r3, [r4, #28]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083fe:	b9b8      	cbnz	r0, 8008430 <_Balloc+0x68>
 8008400:	2101      	movs	r1, #1
 8008402:	fa01 f605 	lsl.w	r6, r1, r5
 8008406:	1d72      	adds	r2, r6, #5
 8008408:	0092      	lsls	r2, r2, #2
 800840a:	4620      	mov	r0, r4
 800840c:	f000 ff6b 	bl	80092e6 <_calloc_r>
 8008410:	b160      	cbz	r0, 800842c <_Balloc+0x64>
 8008412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008416:	e00e      	b.n	8008436 <_Balloc+0x6e>
 8008418:	2221      	movs	r2, #33	@ 0x21
 800841a:	2104      	movs	r1, #4
 800841c:	4620      	mov	r0, r4
 800841e:	f000 ff62 	bl	80092e6 <_calloc_r>
 8008422:	69e3      	ldr	r3, [r4, #28]
 8008424:	60f0      	str	r0, [r6, #12]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e4      	bne.n	80083f6 <_Balloc+0x2e>
 800842c:	2000      	movs	r0, #0
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	6802      	ldr	r2, [r0, #0]
 8008432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008436:	2300      	movs	r3, #0
 8008438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800843c:	e7f7      	b.n	800842e <_Balloc+0x66>
 800843e:	bf00      	nop
 8008440:	0800c337 	.word	0x0800c337
 8008444:	0800c3b7 	.word	0x0800c3b7

08008448 <_Bfree>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	69c6      	ldr	r6, [r0, #28]
 800844c:	4605      	mov	r5, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b976      	cbnz	r6, 8008470 <_Bfree+0x28>
 8008452:	2010      	movs	r0, #16
 8008454:	f7ff ff02 	bl	800825c <malloc>
 8008458:	4602      	mov	r2, r0
 800845a:	61e8      	str	r0, [r5, #28]
 800845c:	b920      	cbnz	r0, 8008468 <_Bfree+0x20>
 800845e:	4b09      	ldr	r3, [pc, #36]	@ (8008484 <_Bfree+0x3c>)
 8008460:	4809      	ldr	r0, [pc, #36]	@ (8008488 <_Bfree+0x40>)
 8008462:	218f      	movs	r1, #143	@ 0x8f
 8008464:	f7ff f846 	bl	80074f4 <__assert_func>
 8008468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800846c:	6006      	str	r6, [r0, #0]
 800846e:	60c6      	str	r6, [r0, #12]
 8008470:	b13c      	cbz	r4, 8008482 <_Bfree+0x3a>
 8008472:	69eb      	ldr	r3, [r5, #28]
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800847c:	6021      	str	r1, [r4, #0]
 800847e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	0800c337 	.word	0x0800c337
 8008488:	0800c3b7 	.word	0x0800c3b7

0800848c <__multadd>:
 800848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008490:	690d      	ldr	r5, [r1, #16]
 8008492:	4607      	mov	r7, r0
 8008494:	460c      	mov	r4, r1
 8008496:	461e      	mov	r6, r3
 8008498:	f101 0c14 	add.w	ip, r1, #20
 800849c:	2000      	movs	r0, #0
 800849e:	f8dc 3000 	ldr.w	r3, [ip]
 80084a2:	b299      	uxth	r1, r3
 80084a4:	fb02 6101 	mla	r1, r2, r1, r6
 80084a8:	0c1e      	lsrs	r6, r3, #16
 80084aa:	0c0b      	lsrs	r3, r1, #16
 80084ac:	fb02 3306 	mla	r3, r2, r6, r3
 80084b0:	b289      	uxth	r1, r1
 80084b2:	3001      	adds	r0, #1
 80084b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084b8:	4285      	cmp	r5, r0
 80084ba:	f84c 1b04 	str.w	r1, [ip], #4
 80084be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084c2:	dcec      	bgt.n	800849e <__multadd+0x12>
 80084c4:	b30e      	cbz	r6, 800850a <__multadd+0x7e>
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	42ab      	cmp	r3, r5
 80084ca:	dc19      	bgt.n	8008500 <__multadd+0x74>
 80084cc:	6861      	ldr	r1, [r4, #4]
 80084ce:	4638      	mov	r0, r7
 80084d0:	3101      	adds	r1, #1
 80084d2:	f7ff ff79 	bl	80083c8 <_Balloc>
 80084d6:	4680      	mov	r8, r0
 80084d8:	b928      	cbnz	r0, 80084e6 <__multadd+0x5a>
 80084da:	4602      	mov	r2, r0
 80084dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <__multadd+0x84>)
 80084de:	480d      	ldr	r0, [pc, #52]	@ (8008514 <__multadd+0x88>)
 80084e0:	21ba      	movs	r1, #186	@ 0xba
 80084e2:	f7ff f807 	bl	80074f4 <__assert_func>
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	3202      	adds	r2, #2
 80084ea:	f104 010c 	add.w	r1, r4, #12
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	300c      	adds	r0, #12
 80084f2:	f7fe fff0 	bl	80074d6 <memcpy>
 80084f6:	4621      	mov	r1, r4
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff ffa5 	bl	8008448 <_Bfree>
 80084fe:	4644      	mov	r4, r8
 8008500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008504:	3501      	adds	r5, #1
 8008506:	615e      	str	r6, [r3, #20]
 8008508:	6125      	str	r5, [r4, #16]
 800850a:	4620      	mov	r0, r4
 800850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008510:	0800c3a6 	.word	0x0800c3a6
 8008514:	0800c3b7 	.word	0x0800c3b7

08008518 <__hi0bits>:
 8008518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800851c:	4603      	mov	r3, r0
 800851e:	bf36      	itet	cc
 8008520:	0403      	lslcc	r3, r0, #16
 8008522:	2000      	movcs	r0, #0
 8008524:	2010      	movcc	r0, #16
 8008526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800852a:	bf3c      	itt	cc
 800852c:	021b      	lslcc	r3, r3, #8
 800852e:	3008      	addcc	r0, #8
 8008530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008534:	bf3c      	itt	cc
 8008536:	011b      	lslcc	r3, r3, #4
 8008538:	3004      	addcc	r0, #4
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853e:	bf3c      	itt	cc
 8008540:	009b      	lslcc	r3, r3, #2
 8008542:	3002      	addcc	r0, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	db05      	blt.n	8008554 <__hi0bits+0x3c>
 8008548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800854c:	f100 0001 	add.w	r0, r0, #1
 8008550:	bf08      	it	eq
 8008552:	2020      	moveq	r0, #32
 8008554:	4770      	bx	lr

08008556 <__lo0bits>:
 8008556:	6803      	ldr	r3, [r0, #0]
 8008558:	4602      	mov	r2, r0
 800855a:	f013 0007 	ands.w	r0, r3, #7
 800855e:	d00b      	beq.n	8008578 <__lo0bits+0x22>
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d421      	bmi.n	80085a8 <__lo0bits+0x52>
 8008564:	0798      	lsls	r0, r3, #30
 8008566:	bf49      	itett	mi
 8008568:	085b      	lsrmi	r3, r3, #1
 800856a:	089b      	lsrpl	r3, r3, #2
 800856c:	2001      	movmi	r0, #1
 800856e:	6013      	strmi	r3, [r2, #0]
 8008570:	bf5c      	itt	pl
 8008572:	6013      	strpl	r3, [r2, #0]
 8008574:	2002      	movpl	r0, #2
 8008576:	4770      	bx	lr
 8008578:	b299      	uxth	r1, r3
 800857a:	b909      	cbnz	r1, 8008580 <__lo0bits+0x2a>
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	2010      	movs	r0, #16
 8008580:	b2d9      	uxtb	r1, r3
 8008582:	b909      	cbnz	r1, 8008588 <__lo0bits+0x32>
 8008584:	3008      	adds	r0, #8
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	0719      	lsls	r1, r3, #28
 800858a:	bf04      	itt	eq
 800858c:	091b      	lsreq	r3, r3, #4
 800858e:	3004      	addeq	r0, #4
 8008590:	0799      	lsls	r1, r3, #30
 8008592:	bf04      	itt	eq
 8008594:	089b      	lsreq	r3, r3, #2
 8008596:	3002      	addeq	r0, #2
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	d403      	bmi.n	80085a4 <__lo0bits+0x4e>
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	d003      	beq.n	80085ac <__lo0bits+0x56>
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	4770      	bx	lr
 80085a8:	2000      	movs	r0, #0
 80085aa:	4770      	bx	lr
 80085ac:	2020      	movs	r0, #32
 80085ae:	4770      	bx	lr

080085b0 <__i2b>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	2101      	movs	r1, #1
 80085b6:	f7ff ff07 	bl	80083c8 <_Balloc>
 80085ba:	4602      	mov	r2, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__i2b+0x1a>
 80085be:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <__i2b+0x24>)
 80085c0:	4805      	ldr	r0, [pc, #20]	@ (80085d8 <__i2b+0x28>)
 80085c2:	f240 1145 	movw	r1, #325	@ 0x145
 80085c6:	f7fe ff95 	bl	80074f4 <__assert_func>
 80085ca:	2301      	movs	r3, #1
 80085cc:	6144      	str	r4, [r0, #20]
 80085ce:	6103      	str	r3, [r0, #16]
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	bf00      	nop
 80085d4:	0800c3a6 	.word	0x0800c3a6
 80085d8:	0800c3b7 	.word	0x0800c3b7

080085dc <__multiply>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4614      	mov	r4, r2
 80085e2:	690a      	ldr	r2, [r1, #16]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	bfa8      	it	ge
 80085ea:	4623      	movge	r3, r4
 80085ec:	460f      	mov	r7, r1
 80085ee:	bfa4      	itt	ge
 80085f0:	460c      	movge	r4, r1
 80085f2:	461f      	movge	r7, r3
 80085f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085fc:	68a3      	ldr	r3, [r4, #8]
 80085fe:	6861      	ldr	r1, [r4, #4]
 8008600:	eb0a 0609 	add.w	r6, sl, r9
 8008604:	42b3      	cmp	r3, r6
 8008606:	b085      	sub	sp, #20
 8008608:	bfb8      	it	lt
 800860a:	3101      	addlt	r1, #1
 800860c:	f7ff fedc 	bl	80083c8 <_Balloc>
 8008610:	b930      	cbnz	r0, 8008620 <__multiply+0x44>
 8008612:	4602      	mov	r2, r0
 8008614:	4b44      	ldr	r3, [pc, #272]	@ (8008728 <__multiply+0x14c>)
 8008616:	4845      	ldr	r0, [pc, #276]	@ (800872c <__multiply+0x150>)
 8008618:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800861c:	f7fe ff6a 	bl	80074f4 <__assert_func>
 8008620:	f100 0514 	add.w	r5, r0, #20
 8008624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008628:	462b      	mov	r3, r5
 800862a:	2200      	movs	r2, #0
 800862c:	4543      	cmp	r3, r8
 800862e:	d321      	bcc.n	8008674 <__multiply+0x98>
 8008630:	f107 0114 	add.w	r1, r7, #20
 8008634:	f104 0214 	add.w	r2, r4, #20
 8008638:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800863c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	1b13      	subs	r3, r2, r4
 8008644:	3b15      	subs	r3, #21
 8008646:	f023 0303 	bic.w	r3, r3, #3
 800864a:	3304      	adds	r3, #4
 800864c:	f104 0715 	add.w	r7, r4, #21
 8008650:	42ba      	cmp	r2, r7
 8008652:	bf38      	it	cc
 8008654:	2304      	movcc	r3, #4
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	9103      	str	r1, [sp, #12]
 800865c:	428b      	cmp	r3, r1
 800865e:	d80c      	bhi.n	800867a <__multiply+0x9e>
 8008660:	2e00      	cmp	r6, #0
 8008662:	dd03      	ble.n	800866c <__multiply+0x90>
 8008664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008668:	2b00      	cmp	r3, #0
 800866a:	d05b      	beq.n	8008724 <__multiply+0x148>
 800866c:	6106      	str	r6, [r0, #16]
 800866e:	b005      	add	sp, #20
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	f843 2b04 	str.w	r2, [r3], #4
 8008678:	e7d8      	b.n	800862c <__multiply+0x50>
 800867a:	f8b1 a000 	ldrh.w	sl, [r1]
 800867e:	f1ba 0f00 	cmp.w	sl, #0
 8008682:	d024      	beq.n	80086ce <__multiply+0xf2>
 8008684:	f104 0e14 	add.w	lr, r4, #20
 8008688:	46a9      	mov	r9, r5
 800868a:	f04f 0c00 	mov.w	ip, #0
 800868e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008692:	f8d9 3000 	ldr.w	r3, [r9]
 8008696:	fa1f fb87 	uxth.w	fp, r7
 800869a:	b29b      	uxth	r3, r3
 800869c:	fb0a 330b 	mla	r3, sl, fp, r3
 80086a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80086a4:	f8d9 7000 	ldr.w	r7, [r9]
 80086a8:	4463      	add	r3, ip
 80086aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80086b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086bc:	4572      	cmp	r2, lr
 80086be:	f849 3b04 	str.w	r3, [r9], #4
 80086c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086c6:	d8e2      	bhi.n	800868e <__multiply+0xb2>
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	f845 c003 	str.w	ip, [r5, r3]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086d4:	3104      	adds	r1, #4
 80086d6:	f1b9 0f00 	cmp.w	r9, #0
 80086da:	d021      	beq.n	8008720 <__multiply+0x144>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	f104 0c14 	add.w	ip, r4, #20
 80086e2:	46ae      	mov	lr, r5
 80086e4:	f04f 0a00 	mov.w	sl, #0
 80086e8:	f8bc b000 	ldrh.w	fp, [ip]
 80086ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086f0:	fb09 770b 	mla	r7, r9, fp, r7
 80086f4:	4457      	add	r7, sl
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086fc:	f84e 3b04 	str.w	r3, [lr], #4
 8008700:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008708:	f8be 3000 	ldrh.w	r3, [lr]
 800870c:	fb09 330a 	mla	r3, r9, sl, r3
 8008710:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008714:	4562      	cmp	r2, ip
 8008716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800871a:	d8e5      	bhi.n	80086e8 <__multiply+0x10c>
 800871c:	9f01      	ldr	r7, [sp, #4]
 800871e:	51eb      	str	r3, [r5, r7]
 8008720:	3504      	adds	r5, #4
 8008722:	e799      	b.n	8008658 <__multiply+0x7c>
 8008724:	3e01      	subs	r6, #1
 8008726:	e79b      	b.n	8008660 <__multiply+0x84>
 8008728:	0800c3a6 	.word	0x0800c3a6
 800872c:	0800c3b7 	.word	0x0800c3b7

08008730 <__pow5mult>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	4615      	mov	r5, r2
 8008736:	f012 0203 	ands.w	r2, r2, #3
 800873a:	4607      	mov	r7, r0
 800873c:	460e      	mov	r6, r1
 800873e:	d007      	beq.n	8008750 <__pow5mult+0x20>
 8008740:	4c25      	ldr	r4, [pc, #148]	@ (80087d8 <__pow5mult+0xa8>)
 8008742:	3a01      	subs	r2, #1
 8008744:	2300      	movs	r3, #0
 8008746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800874a:	f7ff fe9f 	bl	800848c <__multadd>
 800874e:	4606      	mov	r6, r0
 8008750:	10ad      	asrs	r5, r5, #2
 8008752:	d03d      	beq.n	80087d0 <__pow5mult+0xa0>
 8008754:	69fc      	ldr	r4, [r7, #28]
 8008756:	b97c      	cbnz	r4, 8008778 <__pow5mult+0x48>
 8008758:	2010      	movs	r0, #16
 800875a:	f7ff fd7f 	bl	800825c <malloc>
 800875e:	4602      	mov	r2, r0
 8008760:	61f8      	str	r0, [r7, #28]
 8008762:	b928      	cbnz	r0, 8008770 <__pow5mult+0x40>
 8008764:	4b1d      	ldr	r3, [pc, #116]	@ (80087dc <__pow5mult+0xac>)
 8008766:	481e      	ldr	r0, [pc, #120]	@ (80087e0 <__pow5mult+0xb0>)
 8008768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800876c:	f7fe fec2 	bl	80074f4 <__assert_func>
 8008770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008774:	6004      	str	r4, [r0, #0]
 8008776:	60c4      	str	r4, [r0, #12]
 8008778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800877c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008780:	b94c      	cbnz	r4, 8008796 <__pow5mult+0x66>
 8008782:	f240 2171 	movw	r1, #625	@ 0x271
 8008786:	4638      	mov	r0, r7
 8008788:	f7ff ff12 	bl	80085b0 <__i2b>
 800878c:	2300      	movs	r3, #0
 800878e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008792:	4604      	mov	r4, r0
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	f04f 0900 	mov.w	r9, #0
 800879a:	07eb      	lsls	r3, r5, #31
 800879c:	d50a      	bpl.n	80087b4 <__pow5mult+0x84>
 800879e:	4631      	mov	r1, r6
 80087a0:	4622      	mov	r2, r4
 80087a2:	4638      	mov	r0, r7
 80087a4:	f7ff ff1a 	bl	80085dc <__multiply>
 80087a8:	4631      	mov	r1, r6
 80087aa:	4680      	mov	r8, r0
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff fe4b 	bl	8008448 <_Bfree>
 80087b2:	4646      	mov	r6, r8
 80087b4:	106d      	asrs	r5, r5, #1
 80087b6:	d00b      	beq.n	80087d0 <__pow5mult+0xa0>
 80087b8:	6820      	ldr	r0, [r4, #0]
 80087ba:	b938      	cbnz	r0, 80087cc <__pow5mult+0x9c>
 80087bc:	4622      	mov	r2, r4
 80087be:	4621      	mov	r1, r4
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff ff0b 	bl	80085dc <__multiply>
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	f8c0 9000 	str.w	r9, [r0]
 80087cc:	4604      	mov	r4, r0
 80087ce:	e7e4      	b.n	800879a <__pow5mult+0x6a>
 80087d0:	4630      	mov	r0, r6
 80087d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d6:	bf00      	nop
 80087d8:	0800c410 	.word	0x0800c410
 80087dc:	0800c337 	.word	0x0800c337
 80087e0:	0800c3b7 	.word	0x0800c3b7

080087e4 <__lshift>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	6849      	ldr	r1, [r1, #4]
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	4607      	mov	r7, r0
 80087f6:	4691      	mov	r9, r2
 80087f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087fc:	f108 0601 	add.w	r6, r8, #1
 8008800:	42b3      	cmp	r3, r6
 8008802:	db0b      	blt.n	800881c <__lshift+0x38>
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff fddf 	bl	80083c8 <_Balloc>
 800880a:	4605      	mov	r5, r0
 800880c:	b948      	cbnz	r0, 8008822 <__lshift+0x3e>
 800880e:	4602      	mov	r2, r0
 8008810:	4b28      	ldr	r3, [pc, #160]	@ (80088b4 <__lshift+0xd0>)
 8008812:	4829      	ldr	r0, [pc, #164]	@ (80088b8 <__lshift+0xd4>)
 8008814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008818:	f7fe fe6c 	bl	80074f4 <__assert_func>
 800881c:	3101      	adds	r1, #1
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	e7ee      	b.n	8008800 <__lshift+0x1c>
 8008822:	2300      	movs	r3, #0
 8008824:	f100 0114 	add.w	r1, r0, #20
 8008828:	f100 0210 	add.w	r2, r0, #16
 800882c:	4618      	mov	r0, r3
 800882e:	4553      	cmp	r3, sl
 8008830:	db33      	blt.n	800889a <__lshift+0xb6>
 8008832:	6920      	ldr	r0, [r4, #16]
 8008834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008838:	f104 0314 	add.w	r3, r4, #20
 800883c:	f019 091f 	ands.w	r9, r9, #31
 8008840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008848:	d02b      	beq.n	80088a2 <__lshift+0xbe>
 800884a:	f1c9 0e20 	rsb	lr, r9, #32
 800884e:	468a      	mov	sl, r1
 8008850:	2200      	movs	r2, #0
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	fa00 f009 	lsl.w	r0, r0, r9
 8008858:	4310      	orrs	r0, r2
 800885a:	f84a 0b04 	str.w	r0, [sl], #4
 800885e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008862:	459c      	cmp	ip, r3
 8008864:	fa22 f20e 	lsr.w	r2, r2, lr
 8008868:	d8f3      	bhi.n	8008852 <__lshift+0x6e>
 800886a:	ebac 0304 	sub.w	r3, ip, r4
 800886e:	3b15      	subs	r3, #21
 8008870:	f023 0303 	bic.w	r3, r3, #3
 8008874:	3304      	adds	r3, #4
 8008876:	f104 0015 	add.w	r0, r4, #21
 800887a:	4584      	cmp	ip, r0
 800887c:	bf38      	it	cc
 800887e:	2304      	movcc	r3, #4
 8008880:	50ca      	str	r2, [r1, r3]
 8008882:	b10a      	cbz	r2, 8008888 <__lshift+0xa4>
 8008884:	f108 0602 	add.w	r6, r8, #2
 8008888:	3e01      	subs	r6, #1
 800888a:	4638      	mov	r0, r7
 800888c:	612e      	str	r6, [r5, #16]
 800888e:	4621      	mov	r1, r4
 8008890:	f7ff fdda 	bl	8008448 <_Bfree>
 8008894:	4628      	mov	r0, r5
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889a:	f842 0f04 	str.w	r0, [r2, #4]!
 800889e:	3301      	adds	r3, #1
 80088a0:	e7c5      	b.n	800882e <__lshift+0x4a>
 80088a2:	3904      	subs	r1, #4
 80088a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088ac:	459c      	cmp	ip, r3
 80088ae:	d8f9      	bhi.n	80088a4 <__lshift+0xc0>
 80088b0:	e7ea      	b.n	8008888 <__lshift+0xa4>
 80088b2:	bf00      	nop
 80088b4:	0800c3a6 	.word	0x0800c3a6
 80088b8:	0800c3b7 	.word	0x0800c3b7

080088bc <__mcmp>:
 80088bc:	690a      	ldr	r2, [r1, #16]
 80088be:	4603      	mov	r3, r0
 80088c0:	6900      	ldr	r0, [r0, #16]
 80088c2:	1a80      	subs	r0, r0, r2
 80088c4:	b530      	push	{r4, r5, lr}
 80088c6:	d10e      	bne.n	80088e6 <__mcmp+0x2a>
 80088c8:	3314      	adds	r3, #20
 80088ca:	3114      	adds	r1, #20
 80088cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088dc:	4295      	cmp	r5, r2
 80088de:	d003      	beq.n	80088e8 <__mcmp+0x2c>
 80088e0:	d205      	bcs.n	80088ee <__mcmp+0x32>
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	bd30      	pop	{r4, r5, pc}
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d3f3      	bcc.n	80088d4 <__mcmp+0x18>
 80088ec:	e7fb      	b.n	80088e6 <__mcmp+0x2a>
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7f9      	b.n	80088e6 <__mcmp+0x2a>
	...

080088f4 <__mdiff>:
 80088f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4689      	mov	r9, r1
 80088fa:	4606      	mov	r6, r0
 80088fc:	4611      	mov	r1, r2
 80088fe:	4648      	mov	r0, r9
 8008900:	4614      	mov	r4, r2
 8008902:	f7ff ffdb 	bl	80088bc <__mcmp>
 8008906:	1e05      	subs	r5, r0, #0
 8008908:	d112      	bne.n	8008930 <__mdiff+0x3c>
 800890a:	4629      	mov	r1, r5
 800890c:	4630      	mov	r0, r6
 800890e:	f7ff fd5b 	bl	80083c8 <_Balloc>
 8008912:	4602      	mov	r2, r0
 8008914:	b928      	cbnz	r0, 8008922 <__mdiff+0x2e>
 8008916:	4b3f      	ldr	r3, [pc, #252]	@ (8008a14 <__mdiff+0x120>)
 8008918:	f240 2137 	movw	r1, #567	@ 0x237
 800891c:	483e      	ldr	r0, [pc, #248]	@ (8008a18 <__mdiff+0x124>)
 800891e:	f7fe fde9 	bl	80074f4 <__assert_func>
 8008922:	2301      	movs	r3, #1
 8008924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008928:	4610      	mov	r0, r2
 800892a:	b003      	add	sp, #12
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	bfbc      	itt	lt
 8008932:	464b      	movlt	r3, r9
 8008934:	46a1      	movlt	r9, r4
 8008936:	4630      	mov	r0, r6
 8008938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800893c:	bfba      	itte	lt
 800893e:	461c      	movlt	r4, r3
 8008940:	2501      	movlt	r5, #1
 8008942:	2500      	movge	r5, #0
 8008944:	f7ff fd40 	bl	80083c8 <_Balloc>
 8008948:	4602      	mov	r2, r0
 800894a:	b918      	cbnz	r0, 8008954 <__mdiff+0x60>
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <__mdiff+0x120>)
 800894e:	f240 2145 	movw	r1, #581	@ 0x245
 8008952:	e7e3      	b.n	800891c <__mdiff+0x28>
 8008954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008958:	6926      	ldr	r6, [r4, #16]
 800895a:	60c5      	str	r5, [r0, #12]
 800895c:	f109 0310 	add.w	r3, r9, #16
 8008960:	f109 0514 	add.w	r5, r9, #20
 8008964:	f104 0e14 	add.w	lr, r4, #20
 8008968:	f100 0b14 	add.w	fp, r0, #20
 800896c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	46d9      	mov	r9, fp
 8008978:	f04f 0c00 	mov.w	ip, #0
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008982:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	fa1f f38a 	uxth.w	r3, sl
 800898c:	4619      	mov	r1, r3
 800898e:	b283      	uxth	r3, r0
 8008990:	1acb      	subs	r3, r1, r3
 8008992:	0c00      	lsrs	r0, r0, #16
 8008994:	4463      	add	r3, ip
 8008996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800899a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089a4:	4576      	cmp	r6, lr
 80089a6:	f849 3b04 	str.w	r3, [r9], #4
 80089aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089ae:	d8e5      	bhi.n	800897c <__mdiff+0x88>
 80089b0:	1b33      	subs	r3, r6, r4
 80089b2:	3b15      	subs	r3, #21
 80089b4:	f023 0303 	bic.w	r3, r3, #3
 80089b8:	3415      	adds	r4, #21
 80089ba:	3304      	adds	r3, #4
 80089bc:	42a6      	cmp	r6, r4
 80089be:	bf38      	it	cc
 80089c0:	2304      	movcc	r3, #4
 80089c2:	441d      	add	r5, r3
 80089c4:	445b      	add	r3, fp
 80089c6:	461e      	mov	r6, r3
 80089c8:	462c      	mov	r4, r5
 80089ca:	4544      	cmp	r4, r8
 80089cc:	d30e      	bcc.n	80089ec <__mdiff+0xf8>
 80089ce:	f108 0103 	add.w	r1, r8, #3
 80089d2:	1b49      	subs	r1, r1, r5
 80089d4:	f021 0103 	bic.w	r1, r1, #3
 80089d8:	3d03      	subs	r5, #3
 80089da:	45a8      	cmp	r8, r5
 80089dc:	bf38      	it	cc
 80089de:	2100      	movcc	r1, #0
 80089e0:	440b      	add	r3, r1
 80089e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089e6:	b191      	cbz	r1, 8008a0e <__mdiff+0x11a>
 80089e8:	6117      	str	r7, [r2, #16]
 80089ea:	e79d      	b.n	8008928 <__mdiff+0x34>
 80089ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80089f0:	46e6      	mov	lr, ip
 80089f2:	0c08      	lsrs	r0, r1, #16
 80089f4:	fa1c fc81 	uxtah	ip, ip, r1
 80089f8:	4471      	add	r1, lr
 80089fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089fe:	b289      	uxth	r1, r1
 8008a00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a04:	f846 1b04 	str.w	r1, [r6], #4
 8008a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a0c:	e7dd      	b.n	80089ca <__mdiff+0xd6>
 8008a0e:	3f01      	subs	r7, #1
 8008a10:	e7e7      	b.n	80089e2 <__mdiff+0xee>
 8008a12:	bf00      	nop
 8008a14:	0800c3a6 	.word	0x0800c3a6
 8008a18:	0800c3b7 	.word	0x0800c3b7

08008a1c <__d2b>:
 8008a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	460f      	mov	r7, r1
 8008a22:	2101      	movs	r1, #1
 8008a24:	ec59 8b10 	vmov	r8, r9, d0
 8008a28:	4616      	mov	r6, r2
 8008a2a:	f7ff fccd 	bl	80083c8 <_Balloc>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	b930      	cbnz	r0, 8008a40 <__d2b+0x24>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b23      	ldr	r3, [pc, #140]	@ (8008ac4 <__d2b+0xa8>)
 8008a36:	4824      	ldr	r0, [pc, #144]	@ (8008ac8 <__d2b+0xac>)
 8008a38:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a3c:	f7fe fd5a 	bl	80074f4 <__assert_func>
 8008a40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a48:	b10d      	cbz	r5, 8008a4e <__d2b+0x32>
 8008a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	f1b8 0300 	subs.w	r3, r8, #0
 8008a54:	d023      	beq.n	8008a9e <__d2b+0x82>
 8008a56:	4668      	mov	r0, sp
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	f7ff fd7c 	bl	8008556 <__lo0bits>
 8008a5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a62:	b1d0      	cbz	r0, 8008a9a <__d2b+0x7e>
 8008a64:	f1c0 0320 	rsb	r3, r0, #32
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	430b      	orrs	r3, r1
 8008a6e:	40c2      	lsrs	r2, r0
 8008a70:	6163      	str	r3, [r4, #20]
 8008a72:	9201      	str	r2, [sp, #4]
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	61a3      	str	r3, [r4, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2201      	moveq	r2, #1
 8008a7e:	2202      	movne	r2, #2
 8008a80:	6122      	str	r2, [r4, #16]
 8008a82:	b1a5      	cbz	r5, 8008aae <__d2b+0x92>
 8008a84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a88:	4405      	add	r5, r0
 8008a8a:	603d      	str	r5, [r7, #0]
 8008a8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a90:	6030      	str	r0, [r6, #0]
 8008a92:	4620      	mov	r0, r4
 8008a94:	b003      	add	sp, #12
 8008a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	6161      	str	r1, [r4, #20]
 8008a9c:	e7ea      	b.n	8008a74 <__d2b+0x58>
 8008a9e:	a801      	add	r0, sp, #4
 8008aa0:	f7ff fd59 	bl	8008556 <__lo0bits>
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	6163      	str	r3, [r4, #20]
 8008aa8:	3020      	adds	r0, #32
 8008aaa:	2201      	movs	r2, #1
 8008aac:	e7e8      	b.n	8008a80 <__d2b+0x64>
 8008aae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ab2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ab6:	6038      	str	r0, [r7, #0]
 8008ab8:	6918      	ldr	r0, [r3, #16]
 8008aba:	f7ff fd2d 	bl	8008518 <__hi0bits>
 8008abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ac2:	e7e5      	b.n	8008a90 <__d2b+0x74>
 8008ac4:	0800c3a6 	.word	0x0800c3a6
 8008ac8:	0800c3b7 	.word	0x0800c3b7

08008acc <__ssputs_r>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	688e      	ldr	r6, [r1, #8]
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	42be      	cmp	r6, r7
 8008ad6:	680b      	ldr	r3, [r1, #0]
 8008ad8:	4682      	mov	sl, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	4690      	mov	r8, r2
 8008ade:	d82d      	bhi.n	8008b3c <__ssputs_r+0x70>
 8008ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ae8:	d026      	beq.n	8008b38 <__ssputs_r+0x6c>
 8008aea:	6965      	ldr	r5, [r4, #20]
 8008aec:	6909      	ldr	r1, [r1, #16]
 8008aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008af2:	eba3 0901 	sub.w	r9, r3, r1
 8008af6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008afa:	1c7b      	adds	r3, r7, #1
 8008afc:	444b      	add	r3, r9
 8008afe:	106d      	asrs	r5, r5, #1
 8008b00:	429d      	cmp	r5, r3
 8008b02:	bf38      	it	cc
 8008b04:	461d      	movcc	r5, r3
 8008b06:	0553      	lsls	r3, r2, #21
 8008b08:	d527      	bpl.n	8008b5a <__ssputs_r+0x8e>
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f7ff fbd0 	bl	80082b0 <_malloc_r>
 8008b10:	4606      	mov	r6, r0
 8008b12:	b360      	cbz	r0, 8008b6e <__ssputs_r+0xa2>
 8008b14:	6921      	ldr	r1, [r4, #16]
 8008b16:	464a      	mov	r2, r9
 8008b18:	f7fe fcdd 	bl	80074d6 <memcpy>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	6126      	str	r6, [r4, #16]
 8008b2a:	6165      	str	r5, [r4, #20]
 8008b2c:	444e      	add	r6, r9
 8008b2e:	eba5 0509 	sub.w	r5, r5, r9
 8008b32:	6026      	str	r6, [r4, #0]
 8008b34:	60a5      	str	r5, [r4, #8]
 8008b36:	463e      	mov	r6, r7
 8008b38:	42be      	cmp	r6, r7
 8008b3a:	d900      	bls.n	8008b3e <__ssputs_r+0x72>
 8008b3c:	463e      	mov	r6, r7
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	4632      	mov	r2, r6
 8008b42:	4641      	mov	r1, r8
 8008b44:	f000 fb7c 	bl	8009240 <memmove>
 8008b48:	68a3      	ldr	r3, [r4, #8]
 8008b4a:	1b9b      	subs	r3, r3, r6
 8008b4c:	60a3      	str	r3, [r4, #8]
 8008b4e:	6823      	ldr	r3, [r4, #0]
 8008b50:	4433      	add	r3, r6
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	2000      	movs	r0, #0
 8008b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	f000 fbe9 	bl	8009332 <_realloc_r>
 8008b60:	4606      	mov	r6, r0
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d1e0      	bne.n	8008b28 <__ssputs_r+0x5c>
 8008b66:	6921      	ldr	r1, [r4, #16]
 8008b68:	4650      	mov	r0, sl
 8008b6a:	f7ff fb2d 	bl	80081c8 <_free_r>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	f8ca 3000 	str.w	r3, [sl]
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	e7e9      	b.n	8008b56 <__ssputs_r+0x8a>
	...

08008b84 <_svfiprintf_r>:
 8008b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	4698      	mov	r8, r3
 8008b8a:	898b      	ldrh	r3, [r1, #12]
 8008b8c:	061b      	lsls	r3, r3, #24
 8008b8e:	b09d      	sub	sp, #116	@ 0x74
 8008b90:	4607      	mov	r7, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	d510      	bpl.n	8008bba <_svfiprintf_r+0x36>
 8008b98:	690b      	ldr	r3, [r1, #16]
 8008b9a:	b973      	cbnz	r3, 8008bba <_svfiprintf_r+0x36>
 8008b9c:	2140      	movs	r1, #64	@ 0x40
 8008b9e:	f7ff fb87 	bl	80082b0 <_malloc_r>
 8008ba2:	6028      	str	r0, [r5, #0]
 8008ba4:	6128      	str	r0, [r5, #16]
 8008ba6:	b930      	cbnz	r0, 8008bb6 <_svfiprintf_r+0x32>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	b01d      	add	sp, #116	@ 0x74
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	2340      	movs	r3, #64	@ 0x40
 8008bb8:	616b      	str	r3, [r5, #20]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbe:	2320      	movs	r3, #32
 8008bc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc8:	2330      	movs	r3, #48	@ 0x30
 8008bca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d68 <_svfiprintf_r+0x1e4>
 8008bce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bd2:	f04f 0901 	mov.w	r9, #1
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	469a      	mov	sl, r3
 8008bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bde:	b10a      	cbz	r2, 8008be4 <_svfiprintf_r+0x60>
 8008be0:	2a25      	cmp	r2, #37	@ 0x25
 8008be2:	d1f9      	bne.n	8008bd8 <_svfiprintf_r+0x54>
 8008be4:	ebba 0b04 	subs.w	fp, sl, r4
 8008be8:	d00b      	beq.n	8008c02 <_svfiprintf_r+0x7e>
 8008bea:	465b      	mov	r3, fp
 8008bec:	4622      	mov	r2, r4
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	f7ff ff6b 	bl	8008acc <__ssputs_r>
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f000 80a7 	beq.w	8008d4a <_svfiprintf_r+0x1c6>
 8008bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bfe:	445a      	add	r2, fp
 8008c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c02:	f89a 3000 	ldrb.w	r3, [sl]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 809f 	beq.w	8008d4a <_svfiprintf_r+0x1c6>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c16:	f10a 0a01 	add.w	sl, sl, #1
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c22:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c24:	4654      	mov	r4, sl
 8008c26:	2205      	movs	r2, #5
 8008c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2c:	484e      	ldr	r0, [pc, #312]	@ (8008d68 <_svfiprintf_r+0x1e4>)
 8008c2e:	f7f7 facf 	bl	80001d0 <memchr>
 8008c32:	9a04      	ldr	r2, [sp, #16]
 8008c34:	b9d8      	cbnz	r0, 8008c6e <_svfiprintf_r+0xea>
 8008c36:	06d0      	lsls	r0, r2, #27
 8008c38:	bf44      	itt	mi
 8008c3a:	2320      	movmi	r3, #32
 8008c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c40:	0711      	lsls	r1, r2, #28
 8008c42:	bf44      	itt	mi
 8008c44:	232b      	movmi	r3, #43	@ 0x2b
 8008c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c50:	d015      	beq.n	8008c7e <_svfiprintf_r+0xfa>
 8008c52:	9a07      	ldr	r2, [sp, #28]
 8008c54:	4654      	mov	r4, sl
 8008c56:	2000      	movs	r0, #0
 8008c58:	f04f 0c0a 	mov.w	ip, #10
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c62:	3b30      	subs	r3, #48	@ 0x30
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	d94b      	bls.n	8008d00 <_svfiprintf_r+0x17c>
 8008c68:	b1b0      	cbz	r0, 8008c98 <_svfiprintf_r+0x114>
 8008c6a:	9207      	str	r2, [sp, #28]
 8008c6c:	e014      	b.n	8008c98 <_svfiprintf_r+0x114>
 8008c6e:	eba0 0308 	sub.w	r3, r0, r8
 8008c72:	fa09 f303 	lsl.w	r3, r9, r3
 8008c76:	4313      	orrs	r3, r2
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	46a2      	mov	sl, r4
 8008c7c:	e7d2      	b.n	8008c24 <_svfiprintf_r+0xa0>
 8008c7e:	9b03      	ldr	r3, [sp, #12]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	9103      	str	r1, [sp, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfbb      	ittet	lt
 8008c8a:	425b      	neglt	r3, r3
 8008c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c90:	9307      	strge	r3, [sp, #28]
 8008c92:	9307      	strlt	r3, [sp, #28]
 8008c94:	bfb8      	it	lt
 8008c96:	9204      	strlt	r2, [sp, #16]
 8008c98:	7823      	ldrb	r3, [r4, #0]
 8008c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c9c:	d10a      	bne.n	8008cb4 <_svfiprintf_r+0x130>
 8008c9e:	7863      	ldrb	r3, [r4, #1]
 8008ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca2:	d132      	bne.n	8008d0a <_svfiprintf_r+0x186>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	9203      	str	r2, [sp, #12]
 8008cac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cb0:	3402      	adds	r4, #2
 8008cb2:	9305      	str	r3, [sp, #20]
 8008cb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d78 <_svfiprintf_r+0x1f4>
 8008cb8:	7821      	ldrb	r1, [r4, #0]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	f7f7 fa87 	bl	80001d0 <memchr>
 8008cc2:	b138      	cbz	r0, 8008cd4 <_svfiprintf_r+0x150>
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	eba0 000a 	sub.w	r0, r0, sl
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	4082      	lsls	r2, r0
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	3401      	adds	r4, #1
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd8:	4824      	ldr	r0, [pc, #144]	@ (8008d6c <_svfiprintf_r+0x1e8>)
 8008cda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cde:	2206      	movs	r2, #6
 8008ce0:	f7f7 fa76 	bl	80001d0 <memchr>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d036      	beq.n	8008d56 <_svfiprintf_r+0x1d2>
 8008ce8:	4b21      	ldr	r3, [pc, #132]	@ (8008d70 <_svfiprintf_r+0x1ec>)
 8008cea:	bb1b      	cbnz	r3, 8008d34 <_svfiprintf_r+0x1b0>
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	3307      	adds	r3, #7
 8008cf0:	f023 0307 	bic.w	r3, r3, #7
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfa:	4433      	add	r3, r6
 8008cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfe:	e76a      	b.n	8008bd6 <_svfiprintf_r+0x52>
 8008d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d04:	460c      	mov	r4, r1
 8008d06:	2001      	movs	r0, #1
 8008d08:	e7a8      	b.n	8008c5c <_svfiprintf_r+0xd8>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	9305      	str	r3, [sp, #20]
 8008d10:	4619      	mov	r1, r3
 8008d12:	f04f 0c0a 	mov.w	ip, #10
 8008d16:	4620      	mov	r0, r4
 8008d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1c:	3a30      	subs	r2, #48	@ 0x30
 8008d1e:	2a09      	cmp	r2, #9
 8008d20:	d903      	bls.n	8008d2a <_svfiprintf_r+0x1a6>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0c6      	beq.n	8008cb4 <_svfiprintf_r+0x130>
 8008d26:	9105      	str	r1, [sp, #20]
 8008d28:	e7c4      	b.n	8008cb4 <_svfiprintf_r+0x130>
 8008d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2e:	4604      	mov	r4, r0
 8008d30:	2301      	movs	r3, #1
 8008d32:	e7f0      	b.n	8008d16 <_svfiprintf_r+0x192>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	462a      	mov	r2, r5
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <_svfiprintf_r+0x1f0>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f7fd fdd8 	bl	80068f4 <_printf_float>
 8008d44:	1c42      	adds	r2, r0, #1
 8008d46:	4606      	mov	r6, r0
 8008d48:	d1d6      	bne.n	8008cf8 <_svfiprintf_r+0x174>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	065b      	lsls	r3, r3, #25
 8008d4e:	f53f af2d 	bmi.w	8008bac <_svfiprintf_r+0x28>
 8008d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d54:	e72c      	b.n	8008bb0 <_svfiprintf_r+0x2c>
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <_svfiprintf_r+0x1f0>)
 8008d5e:	a904      	add	r1, sp, #16
 8008d60:	4638      	mov	r0, r7
 8008d62:	f7fe f85f 	bl	8006e24 <_printf_i>
 8008d66:	e7ed      	b.n	8008d44 <_svfiprintf_r+0x1c0>
 8008d68:	0800c510 	.word	0x0800c510
 8008d6c:	0800c51a 	.word	0x0800c51a
 8008d70:	080068f5 	.word	0x080068f5
 8008d74:	08008acd 	.word	0x08008acd
 8008d78:	0800c516 	.word	0x0800c516

08008d7c <__sfputc_r>:
 8008d7c:	6893      	ldr	r3, [r2, #8]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	b410      	push	{r4}
 8008d84:	6093      	str	r3, [r2, #8]
 8008d86:	da08      	bge.n	8008d9a <__sfputc_r+0x1e>
 8008d88:	6994      	ldr	r4, [r2, #24]
 8008d8a:	42a3      	cmp	r3, r4
 8008d8c:	db01      	blt.n	8008d92 <__sfputc_r+0x16>
 8008d8e:	290a      	cmp	r1, #10
 8008d90:	d103      	bne.n	8008d9a <__sfputc_r+0x1e>
 8008d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d96:	f7fe ba8a 	b.w	80072ae <__swbuf_r>
 8008d9a:	6813      	ldr	r3, [r2, #0]
 8008d9c:	1c58      	adds	r0, r3, #1
 8008d9e:	6010      	str	r0, [r2, #0]
 8008da0:	7019      	strb	r1, [r3, #0]
 8008da2:	4608      	mov	r0, r1
 8008da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <__sfputs_r>:
 8008daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dac:	4606      	mov	r6, r0
 8008dae:	460f      	mov	r7, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	18d5      	adds	r5, r2, r3
 8008db4:	42ac      	cmp	r4, r5
 8008db6:	d101      	bne.n	8008dbc <__sfputs_r+0x12>
 8008db8:	2000      	movs	r0, #0
 8008dba:	e007      	b.n	8008dcc <__sfputs_r+0x22>
 8008dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc0:	463a      	mov	r2, r7
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7ff ffda 	bl	8008d7c <__sfputc_r>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d1f3      	bne.n	8008db4 <__sfputs_r+0xa>
 8008dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd0 <_vfiprintf_r>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	b09d      	sub	sp, #116	@ 0x74
 8008dd8:	4614      	mov	r4, r2
 8008dda:	4698      	mov	r8, r3
 8008ddc:	4606      	mov	r6, r0
 8008dde:	b118      	cbz	r0, 8008de8 <_vfiprintf_r+0x18>
 8008de0:	6a03      	ldr	r3, [r0, #32]
 8008de2:	b90b      	cbnz	r3, 8008de8 <_vfiprintf_r+0x18>
 8008de4:	f7fe f9ca 	bl	800717c <__sinit>
 8008de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_vfiprintf_r+0x2a>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_vfiprintf_r+0x2a>
 8008df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df6:	f7fe fb6c 	bl	80074d2 <__retarget_lock_acquire_recursive>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	071b      	lsls	r3, r3, #28
 8008dfe:	d501      	bpl.n	8008e04 <_vfiprintf_r+0x34>
 8008e00:	692b      	ldr	r3, [r5, #16]
 8008e02:	b99b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x5c>
 8008e04:	4629      	mov	r1, r5
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fe fa90 	bl	800732c <__swsetup_r>
 8008e0c:	b170      	cbz	r0, 8008e2c <_vfiprintf_r+0x5c>
 8008e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e10:	07dc      	lsls	r4, r3, #31
 8008e12:	d504      	bpl.n	8008e1e <_vfiprintf_r+0x4e>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	b01d      	add	sp, #116	@ 0x74
 8008e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	0598      	lsls	r0, r3, #22
 8008e22:	d4f7      	bmi.n	8008e14 <_vfiprintf_r+0x44>
 8008e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e26:	f7fe fb55 	bl	80074d4 <__retarget_lock_release_recursive>
 8008e2a:	e7f3      	b.n	8008e14 <_vfiprintf_r+0x44>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e30:	2320      	movs	r3, #32
 8008e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3a:	2330      	movs	r3, #48	@ 0x30
 8008e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fec <_vfiprintf_r+0x21c>
 8008e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e44:	f04f 0901 	mov.w	r9, #1
 8008e48:	4623      	mov	r3, r4
 8008e4a:	469a      	mov	sl, r3
 8008e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e50:	b10a      	cbz	r2, 8008e56 <_vfiprintf_r+0x86>
 8008e52:	2a25      	cmp	r2, #37	@ 0x25
 8008e54:	d1f9      	bne.n	8008e4a <_vfiprintf_r+0x7a>
 8008e56:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5a:	d00b      	beq.n	8008e74 <_vfiprintf_r+0xa4>
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	4622      	mov	r2, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ffa1 	bl	8008daa <__sfputs_r>
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f000 80a7 	beq.w	8008fbc <_vfiprintf_r+0x1ec>
 8008e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e70:	445a      	add	r2, fp
 8008e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e74:	f89a 3000 	ldrb.w	r3, [sl]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 809f 	beq.w	8008fbc <_vfiprintf_r+0x1ec>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f04f 32ff 	mov.w	r2, #4294967295
 8008e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e88:	f10a 0a01 	add.w	sl, sl, #1
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e96:	4654      	mov	r4, sl
 8008e98:	2205      	movs	r2, #5
 8008e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9e:	4853      	ldr	r0, [pc, #332]	@ (8008fec <_vfiprintf_r+0x21c>)
 8008ea0:	f7f7 f996 	bl	80001d0 <memchr>
 8008ea4:	9a04      	ldr	r2, [sp, #16]
 8008ea6:	b9d8      	cbnz	r0, 8008ee0 <_vfiprintf_r+0x110>
 8008ea8:	06d1      	lsls	r1, r2, #27
 8008eaa:	bf44      	itt	mi
 8008eac:	2320      	movmi	r3, #32
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008eb2:	0713      	lsls	r3, r2, #28
 8008eb4:	bf44      	itt	mi
 8008eb6:	232b      	movmi	r3, #43	@ 0x2b
 8008eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ec2:	d015      	beq.n	8008ef0 <_vfiprintf_r+0x120>
 8008ec4:	9a07      	ldr	r2, [sp, #28]
 8008ec6:	4654      	mov	r4, sl
 8008ec8:	2000      	movs	r0, #0
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	4621      	mov	r1, r4
 8008ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed4:	3b30      	subs	r3, #48	@ 0x30
 8008ed6:	2b09      	cmp	r3, #9
 8008ed8:	d94b      	bls.n	8008f72 <_vfiprintf_r+0x1a2>
 8008eda:	b1b0      	cbz	r0, 8008f0a <_vfiprintf_r+0x13a>
 8008edc:	9207      	str	r2, [sp, #28]
 8008ede:	e014      	b.n	8008f0a <_vfiprintf_r+0x13a>
 8008ee0:	eba0 0308 	sub.w	r3, r0, r8
 8008ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	46a2      	mov	sl, r4
 8008eee:	e7d2      	b.n	8008e96 <_vfiprintf_r+0xc6>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	1d19      	adds	r1, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	9103      	str	r1, [sp, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bfbb      	ittet	lt
 8008efc:	425b      	neglt	r3, r3
 8008efe:	f042 0202 	orrlt.w	r2, r2, #2
 8008f02:	9307      	strge	r3, [sp, #28]
 8008f04:	9307      	strlt	r3, [sp, #28]
 8008f06:	bfb8      	it	lt
 8008f08:	9204      	strlt	r2, [sp, #16]
 8008f0a:	7823      	ldrb	r3, [r4, #0]
 8008f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f0e:	d10a      	bne.n	8008f26 <_vfiprintf_r+0x156>
 8008f10:	7863      	ldrb	r3, [r4, #1]
 8008f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f14:	d132      	bne.n	8008f7c <_vfiprintf_r+0x1ac>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	9203      	str	r2, [sp, #12]
 8008f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f22:	3402      	adds	r4, #2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ffc <_vfiprintf_r+0x22c>
 8008f2a:	7821      	ldrb	r1, [r4, #0]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	4650      	mov	r0, sl
 8008f30:	f7f7 f94e 	bl	80001d0 <memchr>
 8008f34:	b138      	cbz	r0, 8008f46 <_vfiprintf_r+0x176>
 8008f36:	9b04      	ldr	r3, [sp, #16]
 8008f38:	eba0 000a 	sub.w	r0, r0, sl
 8008f3c:	2240      	movs	r2, #64	@ 0x40
 8008f3e:	4082      	lsls	r2, r0
 8008f40:	4313      	orrs	r3, r2
 8008f42:	3401      	adds	r4, #1
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4a:	4829      	ldr	r0, [pc, #164]	@ (8008ff0 <_vfiprintf_r+0x220>)
 8008f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f50:	2206      	movs	r2, #6
 8008f52:	f7f7 f93d 	bl	80001d0 <memchr>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d03f      	beq.n	8008fda <_vfiprintf_r+0x20a>
 8008f5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ff4 <_vfiprintf_r+0x224>)
 8008f5c:	bb1b      	cbnz	r3, 8008fa6 <_vfiprintf_r+0x1d6>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	3307      	adds	r3, #7
 8008f62:	f023 0307 	bic.w	r3, r3, #7
 8008f66:	3308      	adds	r3, #8
 8008f68:	9303      	str	r3, [sp, #12]
 8008f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6c:	443b      	add	r3, r7
 8008f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f70:	e76a      	b.n	8008e48 <_vfiprintf_r+0x78>
 8008f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f76:	460c      	mov	r4, r1
 8008f78:	2001      	movs	r0, #1
 8008f7a:	e7a8      	b.n	8008ece <_vfiprintf_r+0xfe>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	3401      	adds	r4, #1
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	4619      	mov	r1, r3
 8008f84:	f04f 0c0a 	mov.w	ip, #10
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f8e:	3a30      	subs	r2, #48	@ 0x30
 8008f90:	2a09      	cmp	r2, #9
 8008f92:	d903      	bls.n	8008f9c <_vfiprintf_r+0x1cc>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0c6      	beq.n	8008f26 <_vfiprintf_r+0x156>
 8008f98:	9105      	str	r1, [sp, #20]
 8008f9a:	e7c4      	b.n	8008f26 <_vfiprintf_r+0x156>
 8008f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e7f0      	b.n	8008f88 <_vfiprintf_r+0x1b8>
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	462a      	mov	r2, r5
 8008fac:	4b12      	ldr	r3, [pc, #72]	@ (8008ff8 <_vfiprintf_r+0x228>)
 8008fae:	a904      	add	r1, sp, #16
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7fd fc9f 	bl	80068f4 <_printf_float>
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	1c78      	adds	r0, r7, #1
 8008fba:	d1d6      	bne.n	8008f6a <_vfiprintf_r+0x19a>
 8008fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fbe:	07d9      	lsls	r1, r3, #31
 8008fc0:	d405      	bmi.n	8008fce <_vfiprintf_r+0x1fe>
 8008fc2:	89ab      	ldrh	r3, [r5, #12]
 8008fc4:	059a      	lsls	r2, r3, #22
 8008fc6:	d402      	bmi.n	8008fce <_vfiprintf_r+0x1fe>
 8008fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fca:	f7fe fa83 	bl	80074d4 <__retarget_lock_release_recursive>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	065b      	lsls	r3, r3, #25
 8008fd2:	f53f af1f 	bmi.w	8008e14 <_vfiprintf_r+0x44>
 8008fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fd8:	e71e      	b.n	8008e18 <_vfiprintf_r+0x48>
 8008fda:	ab03      	add	r3, sp, #12
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <_vfiprintf_r+0x228>)
 8008fe2:	a904      	add	r1, sp, #16
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7fd ff1d 	bl	8006e24 <_printf_i>
 8008fea:	e7e4      	b.n	8008fb6 <_vfiprintf_r+0x1e6>
 8008fec:	0800c510 	.word	0x0800c510
 8008ff0:	0800c51a 	.word	0x0800c51a
 8008ff4:	080068f5 	.word	0x080068f5
 8008ff8:	08008dab 	.word	0x08008dab
 8008ffc:	0800c516 	.word	0x0800c516

08009000 <__sflush_r>:
 8009000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	0716      	lsls	r6, r2, #28
 800900a:	4605      	mov	r5, r0
 800900c:	460c      	mov	r4, r1
 800900e:	d454      	bmi.n	80090ba <__sflush_r+0xba>
 8009010:	684b      	ldr	r3, [r1, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dc02      	bgt.n	800901c <__sflush_r+0x1c>
 8009016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	dd48      	ble.n	80090ae <__sflush_r+0xae>
 800901c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800901e:	2e00      	cmp	r6, #0
 8009020:	d045      	beq.n	80090ae <__sflush_r+0xae>
 8009022:	2300      	movs	r3, #0
 8009024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009028:	682f      	ldr	r7, [r5, #0]
 800902a:	6a21      	ldr	r1, [r4, #32]
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	d030      	beq.n	8009092 <__sflush_r+0x92>
 8009030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	0759      	lsls	r1, r3, #29
 8009036:	d505      	bpl.n	8009044 <__sflush_r+0x44>
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	1ad2      	subs	r2, r2, r3
 800903c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800903e:	b10b      	cbz	r3, 8009044 <__sflush_r+0x44>
 8009040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	2300      	movs	r3, #0
 8009046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	4628      	mov	r0, r5
 800904c:	47b0      	blx	r6
 800904e:	1c43      	adds	r3, r0, #1
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	d106      	bne.n	8009062 <__sflush_r+0x62>
 8009054:	6829      	ldr	r1, [r5, #0]
 8009056:	291d      	cmp	r1, #29
 8009058:	d82b      	bhi.n	80090b2 <__sflush_r+0xb2>
 800905a:	4a2a      	ldr	r2, [pc, #168]	@ (8009104 <__sflush_r+0x104>)
 800905c:	410a      	asrs	r2, r1
 800905e:	07d6      	lsls	r6, r2, #31
 8009060:	d427      	bmi.n	80090b2 <__sflush_r+0xb2>
 8009062:	2200      	movs	r2, #0
 8009064:	6062      	str	r2, [r4, #4]
 8009066:	04d9      	lsls	r1, r3, #19
 8009068:	6922      	ldr	r2, [r4, #16]
 800906a:	6022      	str	r2, [r4, #0]
 800906c:	d504      	bpl.n	8009078 <__sflush_r+0x78>
 800906e:	1c42      	adds	r2, r0, #1
 8009070:	d101      	bne.n	8009076 <__sflush_r+0x76>
 8009072:	682b      	ldr	r3, [r5, #0]
 8009074:	b903      	cbnz	r3, 8009078 <__sflush_r+0x78>
 8009076:	6560      	str	r0, [r4, #84]	@ 0x54
 8009078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800907a:	602f      	str	r7, [r5, #0]
 800907c:	b1b9      	cbz	r1, 80090ae <__sflush_r+0xae>
 800907e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009082:	4299      	cmp	r1, r3
 8009084:	d002      	beq.n	800908c <__sflush_r+0x8c>
 8009086:	4628      	mov	r0, r5
 8009088:	f7ff f89e 	bl	80081c8 <_free_r>
 800908c:	2300      	movs	r3, #0
 800908e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009090:	e00d      	b.n	80090ae <__sflush_r+0xae>
 8009092:	2301      	movs	r3, #1
 8009094:	4628      	mov	r0, r5
 8009096:	47b0      	blx	r6
 8009098:	4602      	mov	r2, r0
 800909a:	1c50      	adds	r0, r2, #1
 800909c:	d1c9      	bne.n	8009032 <__sflush_r+0x32>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0c6      	beq.n	8009032 <__sflush_r+0x32>
 80090a4:	2b1d      	cmp	r3, #29
 80090a6:	d001      	beq.n	80090ac <__sflush_r+0xac>
 80090a8:	2b16      	cmp	r3, #22
 80090aa:	d11e      	bne.n	80090ea <__sflush_r+0xea>
 80090ac:	602f      	str	r7, [r5, #0]
 80090ae:	2000      	movs	r0, #0
 80090b0:	e022      	b.n	80090f8 <__sflush_r+0xf8>
 80090b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b6:	b21b      	sxth	r3, r3
 80090b8:	e01b      	b.n	80090f2 <__sflush_r+0xf2>
 80090ba:	690f      	ldr	r7, [r1, #16]
 80090bc:	2f00      	cmp	r7, #0
 80090be:	d0f6      	beq.n	80090ae <__sflush_r+0xae>
 80090c0:	0793      	lsls	r3, r2, #30
 80090c2:	680e      	ldr	r6, [r1, #0]
 80090c4:	bf08      	it	eq
 80090c6:	694b      	ldreq	r3, [r1, #20]
 80090c8:	600f      	str	r7, [r1, #0]
 80090ca:	bf18      	it	ne
 80090cc:	2300      	movne	r3, #0
 80090ce:	eba6 0807 	sub.w	r8, r6, r7
 80090d2:	608b      	str	r3, [r1, #8]
 80090d4:	f1b8 0f00 	cmp.w	r8, #0
 80090d8:	dde9      	ble.n	80090ae <__sflush_r+0xae>
 80090da:	6a21      	ldr	r1, [r4, #32]
 80090dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090de:	4643      	mov	r3, r8
 80090e0:	463a      	mov	r2, r7
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b0      	blx	r6
 80090e6:	2800      	cmp	r0, #0
 80090e8:	dc08      	bgt.n	80090fc <__sflush_r+0xfc>
 80090ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f2:	81a3      	strh	r3, [r4, #12]
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	4407      	add	r7, r0
 80090fe:	eba8 0800 	sub.w	r8, r8, r0
 8009102:	e7e7      	b.n	80090d4 <__sflush_r+0xd4>
 8009104:	dfbffffe 	.word	0xdfbffffe

08009108 <_fflush_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	690b      	ldr	r3, [r1, #16]
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	b913      	cbnz	r3, 8009118 <_fflush_r+0x10>
 8009112:	2500      	movs	r5, #0
 8009114:	4628      	mov	r0, r5
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	b118      	cbz	r0, 8009122 <_fflush_r+0x1a>
 800911a:	6a03      	ldr	r3, [r0, #32]
 800911c:	b90b      	cbnz	r3, 8009122 <_fflush_r+0x1a>
 800911e:	f7fe f82d 	bl	800717c <__sinit>
 8009122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0f3      	beq.n	8009112 <_fflush_r+0xa>
 800912a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800912c:	07d0      	lsls	r0, r2, #31
 800912e:	d404      	bmi.n	800913a <_fflush_r+0x32>
 8009130:	0599      	lsls	r1, r3, #22
 8009132:	d402      	bmi.n	800913a <_fflush_r+0x32>
 8009134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009136:	f7fe f9cc 	bl	80074d2 <__retarget_lock_acquire_recursive>
 800913a:	4628      	mov	r0, r5
 800913c:	4621      	mov	r1, r4
 800913e:	f7ff ff5f 	bl	8009000 <__sflush_r>
 8009142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009144:	07da      	lsls	r2, r3, #31
 8009146:	4605      	mov	r5, r0
 8009148:	d4e4      	bmi.n	8009114 <_fflush_r+0xc>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	059b      	lsls	r3, r3, #22
 800914e:	d4e1      	bmi.n	8009114 <_fflush_r+0xc>
 8009150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009152:	f7fe f9bf 	bl	80074d4 <__retarget_lock_release_recursive>
 8009156:	e7dd      	b.n	8009114 <_fflush_r+0xc>

08009158 <fiprintf>:
 8009158:	b40e      	push	{r1, r2, r3}
 800915a:	b503      	push	{r0, r1, lr}
 800915c:	4601      	mov	r1, r0
 800915e:	ab03      	add	r3, sp, #12
 8009160:	4805      	ldr	r0, [pc, #20]	@ (8009178 <fiprintf+0x20>)
 8009162:	f853 2b04 	ldr.w	r2, [r3], #4
 8009166:	6800      	ldr	r0, [r0, #0]
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f7ff fe31 	bl	8008dd0 <_vfiprintf_r>
 800916e:	b002      	add	sp, #8
 8009170:	f85d eb04 	ldr.w	lr, [sp], #4
 8009174:	b003      	add	sp, #12
 8009176:	4770      	bx	lr
 8009178:	20000244 	.word	0x20000244

0800917c <__swhatbuf_r>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009184:	2900      	cmp	r1, #0
 8009186:	b096      	sub	sp, #88	@ 0x58
 8009188:	4615      	mov	r5, r2
 800918a:	461e      	mov	r6, r3
 800918c:	da0d      	bge.n	80091aa <__swhatbuf_r+0x2e>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009194:	f04f 0100 	mov.w	r1, #0
 8009198:	bf14      	ite	ne
 800919a:	2340      	movne	r3, #64	@ 0x40
 800919c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091a0:	2000      	movs	r0, #0
 80091a2:	6031      	str	r1, [r6, #0]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	b016      	add	sp, #88	@ 0x58
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	466a      	mov	r2, sp
 80091ac:	f000 f862 	bl	8009274 <_fstat_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dbec      	blt.n	800918e <__swhatbuf_r+0x12>
 80091b4:	9901      	ldr	r1, [sp, #4]
 80091b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091be:	4259      	negs	r1, r3
 80091c0:	4159      	adcs	r1, r3
 80091c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c6:	e7eb      	b.n	80091a0 <__swhatbuf_r+0x24>

080091c8 <__smakebuf_r>:
 80091c8:	898b      	ldrh	r3, [r1, #12]
 80091ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091cc:	079d      	lsls	r5, r3, #30
 80091ce:	4606      	mov	r6, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	d507      	bpl.n	80091e4 <__smakebuf_r+0x1c>
 80091d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	2301      	movs	r3, #1
 80091de:	6163      	str	r3, [r4, #20]
 80091e0:	b003      	add	sp, #12
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	ab01      	add	r3, sp, #4
 80091e6:	466a      	mov	r2, sp
 80091e8:	f7ff ffc8 	bl	800917c <__swhatbuf_r>
 80091ec:	9f00      	ldr	r7, [sp, #0]
 80091ee:	4605      	mov	r5, r0
 80091f0:	4639      	mov	r1, r7
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff f85c 	bl	80082b0 <_malloc_r>
 80091f8:	b948      	cbnz	r0, 800920e <__smakebuf_r+0x46>
 80091fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fe:	059a      	lsls	r2, r3, #22
 8009200:	d4ee      	bmi.n	80091e0 <__smakebuf_r+0x18>
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	f043 0302 	orr.w	r3, r3, #2
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	e7e2      	b.n	80091d4 <__smakebuf_r+0xc>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	6020      	str	r0, [r4, #0]
 8009212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800921e:	b15b      	cbz	r3, 8009238 <__smakebuf_r+0x70>
 8009220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009224:	4630      	mov	r0, r6
 8009226:	f000 f837 	bl	8009298 <_isatty_r>
 800922a:	b128      	cbz	r0, 8009238 <__smakebuf_r+0x70>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	431d      	orrs	r5, r3
 800923c:	81a5      	strh	r5, [r4, #12]
 800923e:	e7cf      	b.n	80091e0 <__smakebuf_r+0x18>

08009240 <memmove>:
 8009240:	4288      	cmp	r0, r1
 8009242:	b510      	push	{r4, lr}
 8009244:	eb01 0402 	add.w	r4, r1, r2
 8009248:	d902      	bls.n	8009250 <memmove+0x10>
 800924a:	4284      	cmp	r4, r0
 800924c:	4623      	mov	r3, r4
 800924e:	d807      	bhi.n	8009260 <memmove+0x20>
 8009250:	1e43      	subs	r3, r0, #1
 8009252:	42a1      	cmp	r1, r4
 8009254:	d008      	beq.n	8009268 <memmove+0x28>
 8009256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800925a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800925e:	e7f8      	b.n	8009252 <memmove+0x12>
 8009260:	4402      	add	r2, r0
 8009262:	4601      	mov	r1, r0
 8009264:	428a      	cmp	r2, r1
 8009266:	d100      	bne.n	800926a <memmove+0x2a>
 8009268:	bd10      	pop	{r4, pc}
 800926a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009272:	e7f7      	b.n	8009264 <memmove+0x24>

08009274 <_fstat_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d07      	ldr	r5, [pc, #28]	@ (8009294 <_fstat_r+0x20>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	f7fd f918 	bl	80064b6 <_fstat>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d102      	bne.n	8009290 <_fstat_r+0x1c>
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	b103      	cbz	r3, 8009290 <_fstat_r+0x1c>
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	bd38      	pop	{r3, r4, r5, pc}
 8009292:	bf00      	nop
 8009294:	20000780 	.word	0x20000780

08009298 <_isatty_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d06      	ldr	r5, [pc, #24]	@ (80092b4 <_isatty_r+0x1c>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7fd fa6a 	bl	800677c <_isatty>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_isatty_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_isatty_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20000780 	.word	0x20000780

080092b8 <_sbrk_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d06      	ldr	r5, [pc, #24]	@ (80092d4 <_sbrk_r+0x1c>)
 80092bc:	2300      	movs	r3, #0
 80092be:	4604      	mov	r4, r0
 80092c0:	4608      	mov	r0, r1
 80092c2:	602b      	str	r3, [r5, #0]
 80092c4:	f7f9 fdb8 	bl	8002e38 <_sbrk>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_sbrk_r+0x1a>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_sbrk_r+0x1a>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20000780 	.word	0x20000780

080092d8 <abort>:
 80092d8:	b508      	push	{r3, lr}
 80092da:	2006      	movs	r0, #6
 80092dc:	f000 f88c 	bl	80093f8 <raise>
 80092e0:	2001      	movs	r0, #1
 80092e2:	f001 faa1 	bl	800a828 <_exit>

080092e6 <_calloc_r>:
 80092e6:	b570      	push	{r4, r5, r6, lr}
 80092e8:	fba1 5402 	umull	r5, r4, r1, r2
 80092ec:	b93c      	cbnz	r4, 80092fe <_calloc_r+0x18>
 80092ee:	4629      	mov	r1, r5
 80092f0:	f7fe ffde 	bl	80082b0 <_malloc_r>
 80092f4:	4606      	mov	r6, r0
 80092f6:	b928      	cbnz	r0, 8009304 <_calloc_r+0x1e>
 80092f8:	2600      	movs	r6, #0
 80092fa:	4630      	mov	r0, r6
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	220c      	movs	r2, #12
 8009300:	6002      	str	r2, [r0, #0]
 8009302:	e7f9      	b.n	80092f8 <_calloc_r+0x12>
 8009304:	462a      	mov	r2, r5
 8009306:	4621      	mov	r1, r4
 8009308:	f7fe f866 	bl	80073d8 <memset>
 800930c:	e7f5      	b.n	80092fa <_calloc_r+0x14>

0800930e <__ascii_mbtowc>:
 800930e:	b082      	sub	sp, #8
 8009310:	b901      	cbnz	r1, 8009314 <__ascii_mbtowc+0x6>
 8009312:	a901      	add	r1, sp, #4
 8009314:	b142      	cbz	r2, 8009328 <__ascii_mbtowc+0x1a>
 8009316:	b14b      	cbz	r3, 800932c <__ascii_mbtowc+0x1e>
 8009318:	7813      	ldrb	r3, [r2, #0]
 800931a:	600b      	str	r3, [r1, #0]
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	1e10      	subs	r0, r2, #0
 8009320:	bf18      	it	ne
 8009322:	2001      	movne	r0, #1
 8009324:	b002      	add	sp, #8
 8009326:	4770      	bx	lr
 8009328:	4610      	mov	r0, r2
 800932a:	e7fb      	b.n	8009324 <__ascii_mbtowc+0x16>
 800932c:	f06f 0001 	mvn.w	r0, #1
 8009330:	e7f8      	b.n	8009324 <__ascii_mbtowc+0x16>

08009332 <_realloc_r>:
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	4680      	mov	r8, r0
 8009338:	4615      	mov	r5, r2
 800933a:	460c      	mov	r4, r1
 800933c:	b921      	cbnz	r1, 8009348 <_realloc_r+0x16>
 800933e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	4611      	mov	r1, r2
 8009344:	f7fe bfb4 	b.w	80082b0 <_malloc_r>
 8009348:	b92a      	cbnz	r2, 8009356 <_realloc_r+0x24>
 800934a:	f7fe ff3d 	bl	80081c8 <_free_r>
 800934e:	2400      	movs	r4, #0
 8009350:	4620      	mov	r0, r4
 8009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009356:	f000 f86b 	bl	8009430 <_malloc_usable_size_r>
 800935a:	4285      	cmp	r5, r0
 800935c:	4606      	mov	r6, r0
 800935e:	d802      	bhi.n	8009366 <_realloc_r+0x34>
 8009360:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009364:	d8f4      	bhi.n	8009350 <_realloc_r+0x1e>
 8009366:	4629      	mov	r1, r5
 8009368:	4640      	mov	r0, r8
 800936a:	f7fe ffa1 	bl	80082b0 <_malloc_r>
 800936e:	4607      	mov	r7, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d0ec      	beq.n	800934e <_realloc_r+0x1c>
 8009374:	42b5      	cmp	r5, r6
 8009376:	462a      	mov	r2, r5
 8009378:	4621      	mov	r1, r4
 800937a:	bf28      	it	cs
 800937c:	4632      	movcs	r2, r6
 800937e:	f7fe f8aa 	bl	80074d6 <memcpy>
 8009382:	4621      	mov	r1, r4
 8009384:	4640      	mov	r0, r8
 8009386:	f7fe ff1f 	bl	80081c8 <_free_r>
 800938a:	463c      	mov	r4, r7
 800938c:	e7e0      	b.n	8009350 <_realloc_r+0x1e>

0800938e <__ascii_wctomb>:
 800938e:	4603      	mov	r3, r0
 8009390:	4608      	mov	r0, r1
 8009392:	b141      	cbz	r1, 80093a6 <__ascii_wctomb+0x18>
 8009394:	2aff      	cmp	r2, #255	@ 0xff
 8009396:	d904      	bls.n	80093a2 <__ascii_wctomb+0x14>
 8009398:	228a      	movs	r2, #138	@ 0x8a
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	4770      	bx	lr
 80093a2:	700a      	strb	r2, [r1, #0]
 80093a4:	2001      	movs	r0, #1
 80093a6:	4770      	bx	lr

080093a8 <_raise_r>:
 80093a8:	291f      	cmp	r1, #31
 80093aa:	b538      	push	{r3, r4, r5, lr}
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	d904      	bls.n	80093bc <_raise_r+0x14>
 80093b2:	2316      	movs	r3, #22
 80093b4:	6003      	str	r3, [r0, #0]
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093be:	b112      	cbz	r2, 80093c6 <_raise_r+0x1e>
 80093c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093c4:	b94b      	cbnz	r3, 80093da <_raise_r+0x32>
 80093c6:	4628      	mov	r0, r5
 80093c8:	f000 f830 	bl	800942c <_getpid_r>
 80093cc:	4622      	mov	r2, r4
 80093ce:	4601      	mov	r1, r0
 80093d0:	4628      	mov	r0, r5
 80093d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093d6:	f000 b817 	b.w	8009408 <_kill_r>
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d00a      	beq.n	80093f4 <_raise_r+0x4c>
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	d103      	bne.n	80093ea <_raise_r+0x42>
 80093e2:	2316      	movs	r3, #22
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	2001      	movs	r0, #1
 80093e8:	e7e7      	b.n	80093ba <_raise_r+0x12>
 80093ea:	2100      	movs	r1, #0
 80093ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093f0:	4620      	mov	r0, r4
 80093f2:	4798      	blx	r3
 80093f4:	2000      	movs	r0, #0
 80093f6:	e7e0      	b.n	80093ba <_raise_r+0x12>

080093f8 <raise>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	@ (8009404 <raise+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f7ff bfd3 	b.w	80093a8 <_raise_r>
 8009402:	bf00      	nop
 8009404:	20000244 	.word	0x20000244

08009408 <_kill_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	@ (8009428 <_kill_r+0x20>)
 800940c:	2300      	movs	r3, #0
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	4611      	mov	r1, r2
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	f001 f9ff 	bl	800a818 <_kill>
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	d102      	bne.n	8009424 <_kill_r+0x1c>
 800941e:	682b      	ldr	r3, [r5, #0]
 8009420:	b103      	cbz	r3, 8009424 <_kill_r+0x1c>
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	bf00      	nop
 8009428:	20000780 	.word	0x20000780

0800942c <_getpid_r>:
 800942c:	f7fd b820 	b.w	8006470 <_getpid>

08009430 <_malloc_usable_size_r>:
 8009430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009434:	1f18      	subs	r0, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfbc      	itt	lt
 800943a:	580b      	ldrlt	r3, [r1, r0]
 800943c:	18c0      	addlt	r0, r0, r3
 800943e:	4770      	bx	lr

08009440 <atan2>:
 8009440:	f000 b982 	b.w	8009748 <__ieee754_atan2>

08009444 <pow>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	ed2d 8b02 	vpush	{d8}
 800944a:	eeb0 8a40 	vmov.f32	s16, s0
 800944e:	eef0 8a60 	vmov.f32	s17, s1
 8009452:	ec55 4b11 	vmov	r4, r5, d1
 8009456:	f000 fa3f 	bl	80098d8 <__ieee754_pow>
 800945a:	4622      	mov	r2, r4
 800945c:	462b      	mov	r3, r5
 800945e:	4620      	mov	r0, r4
 8009460:	4629      	mov	r1, r5
 8009462:	ec57 6b10 	vmov	r6, r7, d0
 8009466:	f7f7 fb61 	bl	8000b2c <__aeabi_dcmpun>
 800946a:	2800      	cmp	r0, #0
 800946c:	d13b      	bne.n	80094e6 <pow+0xa2>
 800946e:	ec51 0b18 	vmov	r0, r1, d8
 8009472:	2200      	movs	r2, #0
 8009474:	2300      	movs	r3, #0
 8009476:	f7f7 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800947a:	b1b8      	cbz	r0, 80094ac <pow+0x68>
 800947c:	2200      	movs	r2, #0
 800947e:	2300      	movs	r3, #0
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f7 fb20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009488:	2800      	cmp	r0, #0
 800948a:	d146      	bne.n	800951a <pow+0xd6>
 800948c:	ec45 4b10 	vmov	d0, r4, r5
 8009490:	f000 f874 	bl	800957c <finite>
 8009494:	b338      	cbz	r0, 80094e6 <pow+0xa2>
 8009496:	2200      	movs	r2, #0
 8009498:	2300      	movs	r3, #0
 800949a:	4620      	mov	r0, r4
 800949c:	4629      	mov	r1, r5
 800949e:	f7f7 fb1d 	bl	8000adc <__aeabi_dcmplt>
 80094a2:	b300      	cbz	r0, 80094e6 <pow+0xa2>
 80094a4:	f7fd ffea 	bl	800747c <__errno>
 80094a8:	2322      	movs	r3, #34	@ 0x22
 80094aa:	e01b      	b.n	80094e4 <pow+0xa0>
 80094ac:	ec47 6b10 	vmov	d0, r6, r7
 80094b0:	f000 f864 	bl	800957c <finite>
 80094b4:	b9e0      	cbnz	r0, 80094f0 <pow+0xac>
 80094b6:	eeb0 0a48 	vmov.f32	s0, s16
 80094ba:	eef0 0a68 	vmov.f32	s1, s17
 80094be:	f000 f85d 	bl	800957c <finite>
 80094c2:	b1a8      	cbz	r0, 80094f0 <pow+0xac>
 80094c4:	ec45 4b10 	vmov	d0, r4, r5
 80094c8:	f000 f858 	bl	800957c <finite>
 80094cc:	b180      	cbz	r0, 80094f0 <pow+0xac>
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f7 fb29 	bl	8000b2c <__aeabi_dcmpun>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d0e2      	beq.n	80094a4 <pow+0x60>
 80094de:	f7fd ffcd 	bl	800747c <__errno>
 80094e2:	2321      	movs	r3, #33	@ 0x21
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	ecbd 8b02 	vpop	{d8}
 80094ea:	ec47 6b10 	vmov	d0, r6, r7
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f0:	2200      	movs	r2, #0
 80094f2:	2300      	movs	r3, #0
 80094f4:	4630      	mov	r0, r6
 80094f6:	4639      	mov	r1, r7
 80094f8:	f7f7 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0f2      	beq.n	80094e6 <pow+0xa2>
 8009500:	eeb0 0a48 	vmov.f32	s0, s16
 8009504:	eef0 0a68 	vmov.f32	s1, s17
 8009508:	f000 f838 	bl	800957c <finite>
 800950c:	2800      	cmp	r0, #0
 800950e:	d0ea      	beq.n	80094e6 <pow+0xa2>
 8009510:	ec45 4b10 	vmov	d0, r4, r5
 8009514:	f000 f832 	bl	800957c <finite>
 8009518:	e7c3      	b.n	80094a2 <pow+0x5e>
 800951a:	4f01      	ldr	r7, [pc, #4]	@ (8009520 <pow+0xdc>)
 800951c:	2600      	movs	r6, #0
 800951e:	e7e2      	b.n	80094e6 <pow+0xa2>
 8009520:	3ff00000 	.word	0x3ff00000

08009524 <sqrt>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	ed2d 8b02 	vpush	{d8}
 800952a:	ec55 4b10 	vmov	r4, r5, d0
 800952e:	f000 f831 	bl	8009594 <__ieee754_sqrt>
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	eeb0 8a40 	vmov.f32	s16, s0
 800953e:	eef0 8a60 	vmov.f32	s17, s1
 8009542:	f7f7 faf3 	bl	8000b2c <__aeabi_dcmpun>
 8009546:	b990      	cbnz	r0, 800956e <sqrt+0x4a>
 8009548:	2200      	movs	r2, #0
 800954a:	2300      	movs	r3, #0
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f7 fac4 	bl	8000adc <__aeabi_dcmplt>
 8009554:	b158      	cbz	r0, 800956e <sqrt+0x4a>
 8009556:	f7fd ff91 	bl	800747c <__errno>
 800955a:	2321      	movs	r3, #33	@ 0x21
 800955c:	6003      	str	r3, [r0, #0]
 800955e:	2200      	movs	r2, #0
 8009560:	2300      	movs	r3, #0
 8009562:	4610      	mov	r0, r2
 8009564:	4619      	mov	r1, r3
 8009566:	f7f7 f971 	bl	800084c <__aeabi_ddiv>
 800956a:	ec41 0b18 	vmov	d8, r0, r1
 800956e:	eeb0 0a48 	vmov.f32	s0, s16
 8009572:	eef0 0a68 	vmov.f32	s1, s17
 8009576:	ecbd 8b02 	vpop	{d8}
 800957a:	bd38      	pop	{r3, r4, r5, pc}

0800957c <finite>:
 800957c:	b082      	sub	sp, #8
 800957e:	ed8d 0b00 	vstr	d0, [sp]
 8009582:	9801      	ldr	r0, [sp, #4]
 8009584:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009588:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800958c:	0fc0      	lsrs	r0, r0, #31
 800958e:	b002      	add	sp, #8
 8009590:	4770      	bx	lr
	...

08009594 <__ieee754_sqrt>:
 8009594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4a68      	ldr	r2, [pc, #416]	@ (800973c <__ieee754_sqrt+0x1a8>)
 800959a:	ec55 4b10 	vmov	r4, r5, d0
 800959e:	43aa      	bics	r2, r5
 80095a0:	462b      	mov	r3, r5
 80095a2:	4621      	mov	r1, r4
 80095a4:	d110      	bne.n	80095c8 <__ieee754_sqrt+0x34>
 80095a6:	4622      	mov	r2, r4
 80095a8:	4620      	mov	r0, r4
 80095aa:	4629      	mov	r1, r5
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f6 fe68 	bl	800028c <__adddf3>
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	ec45 4b10 	vmov	d0, r4, r5
 80095c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	dc0e      	bgt.n	80095ea <__ieee754_sqrt+0x56>
 80095cc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80095d0:	4322      	orrs	r2, r4
 80095d2:	d0f5      	beq.n	80095c0 <__ieee754_sqrt+0x2c>
 80095d4:	b19d      	cbz	r5, 80095fe <__ieee754_sqrt+0x6a>
 80095d6:	4622      	mov	r2, r4
 80095d8:	4620      	mov	r0, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	f7f6 fe54 	bl	8000288 <__aeabi_dsub>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	f7f7 f932 	bl	800084c <__aeabi_ddiv>
 80095e8:	e7e8      	b.n	80095bc <__ieee754_sqrt+0x28>
 80095ea:	152a      	asrs	r2, r5, #20
 80095ec:	d115      	bne.n	800961a <__ieee754_sqrt+0x86>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e009      	b.n	8009606 <__ieee754_sqrt+0x72>
 80095f2:	0acb      	lsrs	r3, r1, #11
 80095f4:	3a15      	subs	r2, #21
 80095f6:	0549      	lsls	r1, r1, #21
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0fa      	beq.n	80095f2 <__ieee754_sqrt+0x5e>
 80095fc:	e7f7      	b.n	80095ee <__ieee754_sqrt+0x5a>
 80095fe:	462a      	mov	r2, r5
 8009600:	e7fa      	b.n	80095f8 <__ieee754_sqrt+0x64>
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	3001      	adds	r0, #1
 8009606:	02dc      	lsls	r4, r3, #11
 8009608:	d5fb      	bpl.n	8009602 <__ieee754_sqrt+0x6e>
 800960a:	1e44      	subs	r4, r0, #1
 800960c:	1b12      	subs	r2, r2, r4
 800960e:	f1c0 0420 	rsb	r4, r0, #32
 8009612:	fa21 f404 	lsr.w	r4, r1, r4
 8009616:	4323      	orrs	r3, r4
 8009618:	4081      	lsls	r1, r0
 800961a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800961e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009626:	07d2      	lsls	r2, r2, #31
 8009628:	bf5c      	itt	pl
 800962a:	005b      	lslpl	r3, r3, #1
 800962c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009630:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009634:	bf58      	it	pl
 8009636:	0049      	lslpl	r1, r1, #1
 8009638:	2600      	movs	r6, #0
 800963a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800963e:	106d      	asrs	r5, r5, #1
 8009640:	0049      	lsls	r1, r1, #1
 8009642:	2016      	movs	r0, #22
 8009644:	4632      	mov	r2, r6
 8009646:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800964a:	1917      	adds	r7, r2, r4
 800964c:	429f      	cmp	r7, r3
 800964e:	bfde      	ittt	le
 8009650:	193a      	addle	r2, r7, r4
 8009652:	1bdb      	suble	r3, r3, r7
 8009654:	1936      	addle	r6, r6, r4
 8009656:	0fcf      	lsrs	r7, r1, #31
 8009658:	3801      	subs	r0, #1
 800965a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800965e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009662:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009666:	d1f0      	bne.n	800964a <__ieee754_sqrt+0xb6>
 8009668:	4604      	mov	r4, r0
 800966a:	2720      	movs	r7, #32
 800966c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009670:	429a      	cmp	r2, r3
 8009672:	eb00 0e0c 	add.w	lr, r0, ip
 8009676:	db02      	blt.n	800967e <__ieee754_sqrt+0xea>
 8009678:	d113      	bne.n	80096a2 <__ieee754_sqrt+0x10e>
 800967a:	458e      	cmp	lr, r1
 800967c:	d811      	bhi.n	80096a2 <__ieee754_sqrt+0x10e>
 800967e:	f1be 0f00 	cmp.w	lr, #0
 8009682:	eb0e 000c 	add.w	r0, lr, ip
 8009686:	da42      	bge.n	800970e <__ieee754_sqrt+0x17a>
 8009688:	2800      	cmp	r0, #0
 800968a:	db40      	blt.n	800970e <__ieee754_sqrt+0x17a>
 800968c:	f102 0801 	add.w	r8, r2, #1
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	458e      	cmp	lr, r1
 8009694:	bf88      	it	hi
 8009696:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800969a:	eba1 010e 	sub.w	r1, r1, lr
 800969e:	4464      	add	r4, ip
 80096a0:	4642      	mov	r2, r8
 80096a2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80096a6:	3f01      	subs	r7, #1
 80096a8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80096ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80096b4:	d1dc      	bne.n	8009670 <__ieee754_sqrt+0xdc>
 80096b6:	4319      	orrs	r1, r3
 80096b8:	d01b      	beq.n	80096f2 <__ieee754_sqrt+0x15e>
 80096ba:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009740 <__ieee754_sqrt+0x1ac>
 80096be:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009744 <__ieee754_sqrt+0x1b0>
 80096c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80096c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80096ca:	f7f6 fddd 	bl	8000288 <__aeabi_dsub>
 80096ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f7 fa09 	bl	8000af0 <__aeabi_dcmple>
 80096de:	b140      	cbz	r0, 80096f2 <__ieee754_sqrt+0x15e>
 80096e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80096e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80096e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80096ec:	d111      	bne.n	8009712 <__ieee754_sqrt+0x17e>
 80096ee:	3601      	adds	r6, #1
 80096f0:	463c      	mov	r4, r7
 80096f2:	1072      	asrs	r2, r6, #1
 80096f4:	0863      	lsrs	r3, r4, #1
 80096f6:	07f1      	lsls	r1, r6, #31
 80096f8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80096fc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009700:	bf48      	it	mi
 8009702:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009706:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800970a:	4618      	mov	r0, r3
 800970c:	e756      	b.n	80095bc <__ieee754_sqrt+0x28>
 800970e:	4690      	mov	r8, r2
 8009710:	e7be      	b.n	8009690 <__ieee754_sqrt+0xfc>
 8009712:	f7f6 fdbb 	bl	800028c <__adddf3>
 8009716:	e9da 8900 	ldrd	r8, r9, [sl]
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 f9db 	bl	8000adc <__aeabi_dcmplt>
 8009726:	b120      	cbz	r0, 8009732 <__ieee754_sqrt+0x19e>
 8009728:	1ca0      	adds	r0, r4, #2
 800972a:	bf08      	it	eq
 800972c:	3601      	addeq	r6, #1
 800972e:	3402      	adds	r4, #2
 8009730:	e7df      	b.n	80096f2 <__ieee754_sqrt+0x15e>
 8009732:	1c63      	adds	r3, r4, #1
 8009734:	f023 0401 	bic.w	r4, r3, #1
 8009738:	e7db      	b.n	80096f2 <__ieee754_sqrt+0x15e>
 800973a:	bf00      	nop
 800973c:	7ff00000 	.word	0x7ff00000
 8009740:	20000408 	.word	0x20000408
 8009744:	20000400 	.word	0x20000400

08009748 <__ieee754_atan2>:
 8009748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800974c:	ec57 6b11 	vmov	r6, r7, d1
 8009750:	4273      	negs	r3, r6
 8009752:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80098d0 <__ieee754_atan2+0x188>
 8009756:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800975a:	4333      	orrs	r3, r6
 800975c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009760:	4543      	cmp	r3, r8
 8009762:	ec51 0b10 	vmov	r0, r1, d0
 8009766:	4635      	mov	r5, r6
 8009768:	d809      	bhi.n	800977e <__ieee754_atan2+0x36>
 800976a:	4244      	negs	r4, r0
 800976c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009770:	4304      	orrs	r4, r0
 8009772:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009776:	4544      	cmp	r4, r8
 8009778:	468e      	mov	lr, r1
 800977a:	4681      	mov	r9, r0
 800977c:	d907      	bls.n	800978e <__ieee754_atan2+0x46>
 800977e:	4632      	mov	r2, r6
 8009780:	463b      	mov	r3, r7
 8009782:	f7f6 fd83 	bl	800028c <__adddf3>
 8009786:	ec41 0b10 	vmov	d0, r0, r1
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8009792:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009796:	4334      	orrs	r4, r6
 8009798:	d103      	bne.n	80097a2 <__ieee754_atan2+0x5a>
 800979a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979e:	f000 bddf 	b.w	800a360 <atan>
 80097a2:	17bc      	asrs	r4, r7, #30
 80097a4:	f004 0402 	and.w	r4, r4, #2
 80097a8:	ea53 0909 	orrs.w	r9, r3, r9
 80097ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80097b0:	d107      	bne.n	80097c2 <__ieee754_atan2+0x7a>
 80097b2:	2c02      	cmp	r4, #2
 80097b4:	d05f      	beq.n	8009876 <__ieee754_atan2+0x12e>
 80097b6:	2c03      	cmp	r4, #3
 80097b8:	d1e5      	bne.n	8009786 <__ieee754_atan2+0x3e>
 80097ba:	a141      	add	r1, pc, #260	@ (adr r1, 80098c0 <__ieee754_atan2+0x178>)
 80097bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c0:	e7e1      	b.n	8009786 <__ieee754_atan2+0x3e>
 80097c2:	4315      	orrs	r5, r2
 80097c4:	d106      	bne.n	80097d4 <__ieee754_atan2+0x8c>
 80097c6:	f1be 0f00 	cmp.w	lr, #0
 80097ca:	da5f      	bge.n	800988c <__ieee754_atan2+0x144>
 80097cc:	a13e      	add	r1, pc, #248	@ (adr r1, 80098c8 <__ieee754_atan2+0x180>)
 80097ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d2:	e7d8      	b.n	8009786 <__ieee754_atan2+0x3e>
 80097d4:	4542      	cmp	r2, r8
 80097d6:	d10f      	bne.n	80097f8 <__ieee754_atan2+0xb0>
 80097d8:	4293      	cmp	r3, r2
 80097da:	f104 34ff 	add.w	r4, r4, #4294967295
 80097de:	d107      	bne.n	80097f0 <__ieee754_atan2+0xa8>
 80097e0:	2c02      	cmp	r4, #2
 80097e2:	d84c      	bhi.n	800987e <__ieee754_atan2+0x136>
 80097e4:	4b34      	ldr	r3, [pc, #208]	@ (80098b8 <__ieee754_atan2+0x170>)
 80097e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097ee:	e7ca      	b.n	8009786 <__ieee754_atan2+0x3e>
 80097f0:	2c02      	cmp	r4, #2
 80097f2:	d848      	bhi.n	8009886 <__ieee754_atan2+0x13e>
 80097f4:	4b31      	ldr	r3, [pc, #196]	@ (80098bc <__ieee754_atan2+0x174>)
 80097f6:	e7f6      	b.n	80097e6 <__ieee754_atan2+0x9e>
 80097f8:	4543      	cmp	r3, r8
 80097fa:	d0e4      	beq.n	80097c6 <__ieee754_atan2+0x7e>
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009802:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009806:	da1e      	bge.n	8009846 <__ieee754_atan2+0xfe>
 8009808:	2f00      	cmp	r7, #0
 800980a:	da01      	bge.n	8009810 <__ieee754_atan2+0xc8>
 800980c:	323c      	adds	r2, #60	@ 0x3c
 800980e:	db1e      	blt.n	800984e <__ieee754_atan2+0x106>
 8009810:	4632      	mov	r2, r6
 8009812:	463b      	mov	r3, r7
 8009814:	f7f7 f81a 	bl	800084c <__aeabi_ddiv>
 8009818:	ec41 0b10 	vmov	d0, r0, r1
 800981c:	f000 ff38 	bl	800a690 <fabs>
 8009820:	f000 fd9e 	bl	800a360 <atan>
 8009824:	ec51 0b10 	vmov	r0, r1, d0
 8009828:	2c01      	cmp	r4, #1
 800982a:	d013      	beq.n	8009854 <__ieee754_atan2+0x10c>
 800982c:	2c02      	cmp	r4, #2
 800982e:	d015      	beq.n	800985c <__ieee754_atan2+0x114>
 8009830:	2c00      	cmp	r4, #0
 8009832:	d0a8      	beq.n	8009786 <__ieee754_atan2+0x3e>
 8009834:	a318      	add	r3, pc, #96	@ (adr r3, 8009898 <__ieee754_atan2+0x150>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fd25 	bl	8000288 <__aeabi_dsub>
 800983e:	a318      	add	r3, pc, #96	@ (adr r3, 80098a0 <__ieee754_atan2+0x158>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	e014      	b.n	8009870 <__ieee754_atan2+0x128>
 8009846:	a118      	add	r1, pc, #96	@ (adr r1, 80098a8 <__ieee754_atan2+0x160>)
 8009848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984c:	e7ec      	b.n	8009828 <__ieee754_atan2+0xe0>
 800984e:	2000      	movs	r0, #0
 8009850:	2100      	movs	r1, #0
 8009852:	e7e9      	b.n	8009828 <__ieee754_atan2+0xe0>
 8009854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009858:	4619      	mov	r1, r3
 800985a:	e794      	b.n	8009786 <__ieee754_atan2+0x3e>
 800985c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009898 <__ieee754_atan2+0x150>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fd11 	bl	8000288 <__aeabi_dsub>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	a10d      	add	r1, pc, #52	@ (adr r1, 80098a0 <__ieee754_atan2+0x158>)
 800986c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009870:	f7f6 fd0a 	bl	8000288 <__aeabi_dsub>
 8009874:	e787      	b.n	8009786 <__ieee754_atan2+0x3e>
 8009876:	a10a      	add	r1, pc, #40	@ (adr r1, 80098a0 <__ieee754_atan2+0x158>)
 8009878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800987c:	e783      	b.n	8009786 <__ieee754_atan2+0x3e>
 800987e:	a10c      	add	r1, pc, #48	@ (adr r1, 80098b0 <__ieee754_atan2+0x168>)
 8009880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009884:	e77f      	b.n	8009786 <__ieee754_atan2+0x3e>
 8009886:	2000      	movs	r0, #0
 8009888:	2100      	movs	r1, #0
 800988a:	e77c      	b.n	8009786 <__ieee754_atan2+0x3e>
 800988c:	a106      	add	r1, pc, #24	@ (adr r1, 80098a8 <__ieee754_atan2+0x160>)
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	e778      	b.n	8009786 <__ieee754_atan2+0x3e>
 8009894:	f3af 8000 	nop.w
 8009898:	33145c07 	.word	0x33145c07
 800989c:	3ca1a626 	.word	0x3ca1a626
 80098a0:	54442d18 	.word	0x54442d18
 80098a4:	400921fb 	.word	0x400921fb
 80098a8:	54442d18 	.word	0x54442d18
 80098ac:	3ff921fb 	.word	0x3ff921fb
 80098b0:	54442d18 	.word	0x54442d18
 80098b4:	3fe921fb 	.word	0x3fe921fb
 80098b8:	0800c648 	.word	0x0800c648
 80098bc:	0800c630 	.word	0x0800c630
 80098c0:	54442d18 	.word	0x54442d18
 80098c4:	c00921fb 	.word	0xc00921fb
 80098c8:	54442d18 	.word	0x54442d18
 80098cc:	bff921fb 	.word	0xbff921fb
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	00000000 	.word	0x00000000

080098d8 <__ieee754_pow>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	b091      	sub	sp, #68	@ 0x44
 80098de:	ed8d 1b00 	vstr	d1, [sp]
 80098e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80098e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80098ea:	ea5a 0001 	orrs.w	r0, sl, r1
 80098ee:	ec57 6b10 	vmov	r6, r7, d0
 80098f2:	d113      	bne.n	800991c <__ieee754_pow+0x44>
 80098f4:	19b3      	adds	r3, r6, r6
 80098f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80098fa:	4152      	adcs	r2, r2
 80098fc:	4298      	cmp	r0, r3
 80098fe:	4b98      	ldr	r3, [pc, #608]	@ (8009b60 <__ieee754_pow+0x288>)
 8009900:	4193      	sbcs	r3, r2
 8009902:	f080 84ea 	bcs.w	800a2da <__ieee754_pow+0xa02>
 8009906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990a:	4630      	mov	r0, r6
 800990c:	4639      	mov	r1, r7
 800990e:	f7f6 fcbd 	bl	800028c <__adddf3>
 8009912:	ec41 0b10 	vmov	d0, r0, r1
 8009916:	b011      	add	sp, #68	@ 0x44
 8009918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991c:	4a91      	ldr	r2, [pc, #580]	@ (8009b64 <__ieee754_pow+0x28c>)
 800991e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009922:	4590      	cmp	r8, r2
 8009924:	463d      	mov	r5, r7
 8009926:	4633      	mov	r3, r6
 8009928:	d806      	bhi.n	8009938 <__ieee754_pow+0x60>
 800992a:	d101      	bne.n	8009930 <__ieee754_pow+0x58>
 800992c:	2e00      	cmp	r6, #0
 800992e:	d1ea      	bne.n	8009906 <__ieee754_pow+0x2e>
 8009930:	4592      	cmp	sl, r2
 8009932:	d801      	bhi.n	8009938 <__ieee754_pow+0x60>
 8009934:	d10e      	bne.n	8009954 <__ieee754_pow+0x7c>
 8009936:	b169      	cbz	r1, 8009954 <__ieee754_pow+0x7c>
 8009938:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800993c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009940:	431d      	orrs	r5, r3
 8009942:	d1e0      	bne.n	8009906 <__ieee754_pow+0x2e>
 8009944:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009948:	18db      	adds	r3, r3, r3
 800994a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800994e:	4152      	adcs	r2, r2
 8009950:	429d      	cmp	r5, r3
 8009952:	e7d4      	b.n	80098fe <__ieee754_pow+0x26>
 8009954:	2d00      	cmp	r5, #0
 8009956:	46c3      	mov	fp, r8
 8009958:	da3a      	bge.n	80099d0 <__ieee754_pow+0xf8>
 800995a:	4a83      	ldr	r2, [pc, #524]	@ (8009b68 <__ieee754_pow+0x290>)
 800995c:	4592      	cmp	sl, r2
 800995e:	d84d      	bhi.n	80099fc <__ieee754_pow+0x124>
 8009960:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009964:	4592      	cmp	sl, r2
 8009966:	f240 84c7 	bls.w	800a2f8 <__ieee754_pow+0xa20>
 800996a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800996e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009972:	2a14      	cmp	r2, #20
 8009974:	dd0f      	ble.n	8009996 <__ieee754_pow+0xbe>
 8009976:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800997a:	fa21 f402 	lsr.w	r4, r1, r2
 800997e:	fa04 f202 	lsl.w	r2, r4, r2
 8009982:	428a      	cmp	r2, r1
 8009984:	f040 84b8 	bne.w	800a2f8 <__ieee754_pow+0xa20>
 8009988:	f004 0401 	and.w	r4, r4, #1
 800998c:	f1c4 0402 	rsb	r4, r4, #2
 8009990:	2900      	cmp	r1, #0
 8009992:	d158      	bne.n	8009a46 <__ieee754_pow+0x16e>
 8009994:	e00e      	b.n	80099b4 <__ieee754_pow+0xdc>
 8009996:	2900      	cmp	r1, #0
 8009998:	d154      	bne.n	8009a44 <__ieee754_pow+0x16c>
 800999a:	f1c2 0214 	rsb	r2, r2, #20
 800999e:	fa4a f402 	asr.w	r4, sl, r2
 80099a2:	fa04 f202 	lsl.w	r2, r4, r2
 80099a6:	4552      	cmp	r2, sl
 80099a8:	f040 84a3 	bne.w	800a2f2 <__ieee754_pow+0xa1a>
 80099ac:	f004 0401 	and.w	r4, r4, #1
 80099b0:	f1c4 0402 	rsb	r4, r4, #2
 80099b4:	4a6d      	ldr	r2, [pc, #436]	@ (8009b6c <__ieee754_pow+0x294>)
 80099b6:	4592      	cmp	sl, r2
 80099b8:	d12e      	bne.n	8009a18 <__ieee754_pow+0x140>
 80099ba:	f1b9 0f00 	cmp.w	r9, #0
 80099be:	f280 8494 	bge.w	800a2ea <__ieee754_pow+0xa12>
 80099c2:	496a      	ldr	r1, [pc, #424]	@ (8009b6c <__ieee754_pow+0x294>)
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	2000      	movs	r0, #0
 80099ca:	f7f6 ff3f 	bl	800084c <__aeabi_ddiv>
 80099ce:	e7a0      	b.n	8009912 <__ieee754_pow+0x3a>
 80099d0:	2400      	movs	r4, #0
 80099d2:	bbc1      	cbnz	r1, 8009a46 <__ieee754_pow+0x16e>
 80099d4:	4a63      	ldr	r2, [pc, #396]	@ (8009b64 <__ieee754_pow+0x28c>)
 80099d6:	4592      	cmp	sl, r2
 80099d8:	d1ec      	bne.n	80099b4 <__ieee754_pow+0xdc>
 80099da:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80099de:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80099e2:	431a      	orrs	r2, r3
 80099e4:	f000 8479 	beq.w	800a2da <__ieee754_pow+0xa02>
 80099e8:	4b61      	ldr	r3, [pc, #388]	@ (8009b70 <__ieee754_pow+0x298>)
 80099ea:	4598      	cmp	r8, r3
 80099ec:	d908      	bls.n	8009a00 <__ieee754_pow+0x128>
 80099ee:	f1b9 0f00 	cmp.w	r9, #0
 80099f2:	f2c0 8476 	blt.w	800a2e2 <__ieee754_pow+0xa0a>
 80099f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099fa:	e78a      	b.n	8009912 <__ieee754_pow+0x3a>
 80099fc:	2402      	movs	r4, #2
 80099fe:	e7e8      	b.n	80099d2 <__ieee754_pow+0xfa>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	f04f 0000 	mov.w	r0, #0
 8009a08:	f04f 0100 	mov.w	r1, #0
 8009a0c:	da81      	bge.n	8009912 <__ieee754_pow+0x3a>
 8009a0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009a16:	e77c      	b.n	8009912 <__ieee754_pow+0x3a>
 8009a18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009a1c:	d106      	bne.n	8009a2c <__ieee754_pow+0x154>
 8009a1e:	4632      	mov	r2, r6
 8009a20:	463b      	mov	r3, r7
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	e772      	b.n	8009912 <__ieee754_pow+0x3a>
 8009a2c:	4a51      	ldr	r2, [pc, #324]	@ (8009b74 <__ieee754_pow+0x29c>)
 8009a2e:	4591      	cmp	r9, r2
 8009a30:	d109      	bne.n	8009a46 <__ieee754_pow+0x16e>
 8009a32:	2d00      	cmp	r5, #0
 8009a34:	db07      	blt.n	8009a46 <__ieee754_pow+0x16e>
 8009a36:	ec47 6b10 	vmov	d0, r6, r7
 8009a3a:	b011      	add	sp, #68	@ 0x44
 8009a3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	f7ff bda8 	b.w	8009594 <__ieee754_sqrt>
 8009a44:	2400      	movs	r4, #0
 8009a46:	ec47 6b10 	vmov	d0, r6, r7
 8009a4a:	9302      	str	r3, [sp, #8]
 8009a4c:	f000 fe20 	bl	800a690 <fabs>
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	ec51 0b10 	vmov	r0, r1, d0
 8009a56:	bb53      	cbnz	r3, 8009aae <__ieee754_pow+0x1d6>
 8009a58:	4b44      	ldr	r3, [pc, #272]	@ (8009b6c <__ieee754_pow+0x294>)
 8009a5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d002      	beq.n	8009a68 <__ieee754_pow+0x190>
 8009a62:	f1b8 0f00 	cmp.w	r8, #0
 8009a66:	d122      	bne.n	8009aae <__ieee754_pow+0x1d6>
 8009a68:	f1b9 0f00 	cmp.w	r9, #0
 8009a6c:	da05      	bge.n	8009a7a <__ieee754_pow+0x1a2>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	2000      	movs	r0, #0
 8009a74:	493d      	ldr	r1, [pc, #244]	@ (8009b6c <__ieee754_pow+0x294>)
 8009a76:	f7f6 fee9 	bl	800084c <__aeabi_ddiv>
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	f6bf af49 	bge.w	8009912 <__ieee754_pow+0x3a>
 8009a80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009a84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009a88:	ea58 0804 	orrs.w	r8, r8, r4
 8009a8c:	d108      	bne.n	8009aa0 <__ieee754_pow+0x1c8>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4610      	mov	r0, r2
 8009a94:	4619      	mov	r1, r3
 8009a96:	f7f6 fbf7 	bl	8000288 <__aeabi_dsub>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e794      	b.n	80099ca <__ieee754_pow+0xf2>
 8009aa0:	2c01      	cmp	r4, #1
 8009aa2:	f47f af36 	bne.w	8009912 <__ieee754_pow+0x3a>
 8009aa6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009aaa:	4619      	mov	r1, r3
 8009aac:	e731      	b.n	8009912 <__ieee754_pow+0x3a>
 8009aae:	0feb      	lsrs	r3, r5, #31
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	ea53 0204 	orrs.w	r2, r3, r4
 8009ab6:	d102      	bne.n	8009abe <__ieee754_pow+0x1e6>
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	e7e9      	b.n	8009a92 <__ieee754_pow+0x1ba>
 8009abe:	3c01      	subs	r4, #1
 8009ac0:	431c      	orrs	r4, r3
 8009ac2:	d016      	beq.n	8009af2 <__ieee754_pow+0x21a>
 8009ac4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009b50 <__ieee754_pow+0x278>
 8009ac8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009acc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ad0:	f240 8112 	bls.w	8009cf8 <__ieee754_pow+0x420>
 8009ad4:	4b28      	ldr	r3, [pc, #160]	@ (8009b78 <__ieee754_pow+0x2a0>)
 8009ad6:	459a      	cmp	sl, r3
 8009ad8:	4b25      	ldr	r3, [pc, #148]	@ (8009b70 <__ieee754_pow+0x298>)
 8009ada:	d916      	bls.n	8009b0a <__ieee754_pow+0x232>
 8009adc:	4598      	cmp	r8, r3
 8009ade:	d80b      	bhi.n	8009af8 <__ieee754_pow+0x220>
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	da0b      	bge.n	8009afe <__ieee754_pow+0x226>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	b011      	add	sp, #68	@ 0x44
 8009aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aee:	f000 be8b 	b.w	800a808 <__math_oflow>
 8009af2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009b58 <__ieee754_pow+0x280>
 8009af6:	e7e7      	b.n	8009ac8 <__ieee754_pow+0x1f0>
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	dcf3      	bgt.n	8009ae6 <__ieee754_pow+0x20e>
 8009afe:	2000      	movs	r0, #0
 8009b00:	b011      	add	sp, #68	@ 0x44
 8009b02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b06:	f000 be77 	b.w	800a7f8 <__math_uflow>
 8009b0a:	4598      	cmp	r8, r3
 8009b0c:	d20c      	bcs.n	8009b28 <__ieee754_pow+0x250>
 8009b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b12:	2200      	movs	r2, #0
 8009b14:	2300      	movs	r3, #0
 8009b16:	f7f6 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8009b1a:	3800      	subs	r0, #0
 8009b1c:	bf18      	it	ne
 8009b1e:	2001      	movne	r0, #1
 8009b20:	f1b9 0f00 	cmp.w	r9, #0
 8009b24:	daec      	bge.n	8009b00 <__ieee754_pow+0x228>
 8009b26:	e7df      	b.n	8009ae8 <__ieee754_pow+0x210>
 8009b28:	4b10      	ldr	r3, [pc, #64]	@ (8009b6c <__ieee754_pow+0x294>)
 8009b2a:	4598      	cmp	r8, r3
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	d924      	bls.n	8009b7c <__ieee754_pow+0x2a4>
 8009b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b36:	2300      	movs	r3, #0
 8009b38:	f7f6 ffd0 	bl	8000adc <__aeabi_dcmplt>
 8009b3c:	3800      	subs	r0, #0
 8009b3e:	bf18      	it	ne
 8009b40:	2001      	movne	r0, #1
 8009b42:	f1b9 0f00 	cmp.w	r9, #0
 8009b46:	dccf      	bgt.n	8009ae8 <__ieee754_pow+0x210>
 8009b48:	e7da      	b.n	8009b00 <__ieee754_pow+0x228>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
 8009b50:	00000000 	.word	0x00000000
 8009b54:	3ff00000 	.word	0x3ff00000
 8009b58:	00000000 	.word	0x00000000
 8009b5c:	bff00000 	.word	0xbff00000
 8009b60:	fff00000 	.word	0xfff00000
 8009b64:	7ff00000 	.word	0x7ff00000
 8009b68:	433fffff 	.word	0x433fffff
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	3fefffff 	.word	0x3fefffff
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	43f00000 	.word	0x43f00000
 8009b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ce8 <__ieee754_pow+0x410>)
 8009b7e:	f7f6 fb83 	bl	8000288 <__aeabi_dsub>
 8009b82:	a351      	add	r3, pc, #324	@ (adr r3, 8009cc8 <__ieee754_pow+0x3f0>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	a34f      	add	r3, pc, #316	@ (adr r3, 8009cd0 <__ieee754_pow+0x3f8>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	4606      	mov	r6, r0
 8009b98:	460f      	mov	r7, r1
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	4b52      	ldr	r3, [pc, #328]	@ (8009cec <__ieee754_pow+0x414>)
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	468b      	mov	fp, r1
 8009ba8:	2200      	movs	r2, #0
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 fd23 	bl	80005f8 <__aeabi_dmul>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	a148      	add	r1, pc, #288	@ (adr r1, 8009cd8 <__ieee754_pow+0x400>)
 8009bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bbc:	f7f6 fb64 	bl	8000288 <__aeabi_dsub>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	f7f6 fd18 	bl	80005f8 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	2000      	movs	r0, #0
 8009bce:	4948      	ldr	r1, [pc, #288]	@ (8009cf0 <__ieee754_pow+0x418>)
 8009bd0:	f7f6 fb5a 	bl	8000288 <__aeabi_dsub>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	462b      	mov	r3, r5
 8009bdc:	4620      	mov	r0, r4
 8009bde:	4629      	mov	r1, r5
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4640      	mov	r0, r8
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ce0 <__ieee754_pow+0x408>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 fcff 	bl	80005f8 <__aeabi_dmul>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4650      	mov	r0, sl
 8009c00:	4659      	mov	r1, fp
 8009c02:	f7f6 fb41 	bl	8000288 <__aeabi_dsub>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4680      	mov	r8, r0
 8009c0c:	4689      	mov	r9, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	2400      	movs	r4, #0
 8009c18:	4632      	mov	r2, r6
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	460d      	mov	r5, r1
 8009c20:	f7f6 fb32 	bl	8000288 <__aeabi_dsub>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4640      	mov	r0, r8
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	f7f6 fb2c 	bl	8000288 <__aeabi_dsub>
 8009c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c40:	4606      	mov	r6, r0
 8009c42:	460f      	mov	r7, r1
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c4c:	f7f6 fb1c 	bl	8000288 <__aeabi_dsub>
 8009c50:	4622      	mov	r2, r4
 8009c52:	462b      	mov	r3, r5
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 fcc8 	bl	80005f8 <__aeabi_dmul>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4649      	mov	r1, r9
 8009c70:	f7f6 fb0c 	bl	800028c <__adddf3>
 8009c74:	4652      	mov	r2, sl
 8009c76:	465b      	mov	r3, fp
 8009c78:	4606      	mov	r6, r0
 8009c7a:	460f      	mov	r7, r1
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	460b      	mov	r3, r1
 8009c86:	4602      	mov	r2, r0
 8009c88:	4680      	mov	r8, r0
 8009c8a:	4689      	mov	r9, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fafc 	bl	800028c <__adddf3>
 8009c94:	4b17      	ldr	r3, [pc, #92]	@ (8009cf4 <__ieee754_pow+0x41c>)
 8009c96:	4299      	cmp	r1, r3
 8009c98:	4604      	mov	r4, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	468a      	mov	sl, r1
 8009c9e:	468b      	mov	fp, r1
 8009ca0:	f340 82ef 	ble.w	800a282 <__ieee754_pow+0x9aa>
 8009ca4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009ca8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009cac:	4303      	orrs	r3, r0
 8009cae:	f000 81e8 	beq.w	800a082 <__ieee754_pow+0x7aa>
 8009cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f7f6 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8009cbe:	3800      	subs	r0, #0
 8009cc0:	bf18      	it	ne
 8009cc2:	2001      	movne	r0, #1
 8009cc4:	e710      	b.n	8009ae8 <__ieee754_pow+0x210>
 8009cc6:	bf00      	nop
 8009cc8:	60000000 	.word	0x60000000
 8009ccc:	3ff71547 	.word	0x3ff71547
 8009cd0:	f85ddf44 	.word	0xf85ddf44
 8009cd4:	3e54ae0b 	.word	0x3e54ae0b
 8009cd8:	55555555 	.word	0x55555555
 8009cdc:	3fd55555 	.word	0x3fd55555
 8009ce0:	652b82fe 	.word	0x652b82fe
 8009ce4:	3ff71547 	.word	0x3ff71547
 8009ce8:	3ff00000 	.word	0x3ff00000
 8009cec:	3fd00000 	.word	0x3fd00000
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	408fffff 	.word	0x408fffff
 8009cf8:	4bd5      	ldr	r3, [pc, #852]	@ (800a050 <__ieee754_pow+0x778>)
 8009cfa:	402b      	ands	r3, r5
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	b92b      	cbnz	r3, 8009d0c <__ieee754_pow+0x434>
 8009d00:	4bd4      	ldr	r3, [pc, #848]	@ (800a054 <__ieee754_pow+0x77c>)
 8009d02:	f7f6 fc79 	bl	80005f8 <__aeabi_dmul>
 8009d06:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009d0a:	468b      	mov	fp, r1
 8009d0c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009d10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009d14:	4413      	add	r3, r2
 8009d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d18:	4bcf      	ldr	r3, [pc, #828]	@ (800a058 <__ieee754_pow+0x780>)
 8009d1a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009d1e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009d22:	459b      	cmp	fp, r3
 8009d24:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d28:	dd08      	ble.n	8009d3c <__ieee754_pow+0x464>
 8009d2a:	4bcc      	ldr	r3, [pc, #816]	@ (800a05c <__ieee754_pow+0x784>)
 8009d2c:	459b      	cmp	fp, r3
 8009d2e:	f340 81a5 	ble.w	800a07c <__ieee754_pow+0x7a4>
 8009d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d34:	3301      	adds	r3, #1
 8009d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d38:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009d3c:	f04f 0a00 	mov.w	sl, #0
 8009d40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d46:	4bc6      	ldr	r3, [pc, #792]	@ (800a060 <__ieee754_pow+0x788>)
 8009d48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d4c:	ed93 7b00 	vldr	d7, [r3]
 8009d50:	4629      	mov	r1, r5
 8009d52:	ec53 2b17 	vmov	r2, r3, d7
 8009d56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d5e:	f7f6 fa93 	bl	8000288 <__aeabi_dsub>
 8009d62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d6e:	f7f6 fa8d 	bl	800028c <__adddf3>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	2000      	movs	r0, #0
 8009d78:	49ba      	ldr	r1, [pc, #744]	@ (800a064 <__ieee754_pow+0x78c>)
 8009d7a:	f7f6 fd67 	bl	800084c <__aeabi_ddiv>
 8009d7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fc35 	bl	80005f8 <__aeabi_dmul>
 8009d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d92:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009d96:	106d      	asrs	r5, r5, #1
 8009d98:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009d9c:	f04f 0b00 	mov.w	fp, #0
 8009da0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009da4:	4661      	mov	r1, ip
 8009da6:	2200      	movs	r2, #0
 8009da8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009dac:	4658      	mov	r0, fp
 8009dae:	46e1      	mov	r9, ip
 8009db0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009db4:	4614      	mov	r4, r2
 8009db6:	461d      	mov	r5, r3
 8009db8:	f7f6 fc1e 	bl	80005f8 <__aeabi_dmul>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fa60 	bl	8000288 <__aeabi_dsub>
 8009dc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	f7f6 fa58 	bl	8000288 <__aeabi_dsub>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009de0:	f7f6 fa52 	bl	8000288 <__aeabi_dsub>
 8009de4:	465a      	mov	r2, fp
 8009de6:	464b      	mov	r3, r9
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4630      	mov	r0, r6
 8009df2:	4639      	mov	r1, r7
 8009df4:	f7f6 fa48 	bl	8000288 <__aeabi_dsub>
 8009df8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009dfc:	f7f6 fbfc 	bl	80005f8 <__aeabi_dmul>
 8009e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e08:	4610      	mov	r0, r2
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	a37d      	add	r3, pc, #500	@ (adr r3, 800a008 <__ieee754_pow+0x730>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	4604      	mov	r4, r0
 8009e18:	460d      	mov	r5, r1
 8009e1a:	f7f6 fbed 	bl	80005f8 <__aeabi_dmul>
 8009e1e:	a37c      	add	r3, pc, #496	@ (adr r3, 800a010 <__ieee754_pow+0x738>)
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	a379      	add	r3, pc, #484	@ (adr r3, 800a018 <__ieee754_pow+0x740>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fa29 	bl	800028c <__adddf3>
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	f7f6 fbdb 	bl	80005f8 <__aeabi_dmul>
 8009e42:	a377      	add	r3, pc, #476	@ (adr r3, 800a020 <__ieee754_pow+0x748>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f7f6 fa20 	bl	800028c <__adddf3>
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	462b      	mov	r3, r5
 8009e50:	f7f6 fbd2 	bl	80005f8 <__aeabi_dmul>
 8009e54:	a374      	add	r3, pc, #464	@ (adr r3, 800a028 <__ieee754_pow+0x750>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fa17 	bl	800028c <__adddf3>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	462b      	mov	r3, r5
 8009e62:	f7f6 fbc9 	bl	80005f8 <__aeabi_dmul>
 8009e66:	a372      	add	r3, pc, #456	@ (adr r3, 800a030 <__ieee754_pow+0x758>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	4622      	mov	r2, r4
 8009e72:	4606      	mov	r6, r0
 8009e74:	460f      	mov	r7, r1
 8009e76:	462b      	mov	r3, r5
 8009e78:	4620      	mov	r0, r4
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4630      	mov	r0, r6
 8009e86:	4639      	mov	r1, r7
 8009e88:	f7f6 fbb6 	bl	80005f8 <__aeabi_dmul>
 8009e8c:	465a      	mov	r2, fp
 8009e8e:	4604      	mov	r4, r0
 8009e90:	460d      	mov	r5, r1
 8009e92:	464b      	mov	r3, r9
 8009e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e98:	f7f6 f9f8 	bl	800028c <__adddf3>
 8009e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	f7f6 f9f0 	bl	800028c <__adddf3>
 8009eac:	465a      	mov	r2, fp
 8009eae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	4b6a      	ldr	r3, [pc, #424]	@ (800a068 <__ieee754_pow+0x790>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	460f      	mov	r7, r1
 8009ec4:	f7f6 f9e2 	bl	800028c <__adddf3>
 8009ec8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ecc:	f7f6 f9de 	bl	800028c <__adddf3>
 8009ed0:	46d8      	mov	r8, fp
 8009ed2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	465a      	mov	r2, fp
 8009eda:	460b      	mov	r3, r1
 8009edc:	4640      	mov	r0, r8
 8009ede:	4649      	mov	r1, r9
 8009ee0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009ee4:	f7f6 fb88 	bl	80005f8 <__aeabi_dmul>
 8009ee8:	465c      	mov	r4, fp
 8009eea:	4680      	mov	r8, r0
 8009eec:	4689      	mov	r9, r1
 8009eee:	4b5e      	ldr	r3, [pc, #376]	@ (800a068 <__ieee754_pow+0x790>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	4632      	mov	r2, r6
 8009efc:	463b      	mov	r3, r7
 8009efe:	f7f6 f9c3 	bl	8000288 <__aeabi_dsub>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f0a:	f7f6 f9bd 	bl	8000288 <__aeabi_dsub>
 8009f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f12:	f7f6 fb71 	bl	80005f8 <__aeabi_dmul>
 8009f16:	4622      	mov	r2, r4
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f22:	f7f6 fb69 	bl	80005f8 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f9ad 	bl	800028c <__adddf3>
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 f9a5 	bl	800028c <__adddf3>
 8009f42:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009f46:	a33c      	add	r3, pc, #240	@ (adr r3, 800a038 <__ieee754_pow+0x760>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009f52:	460d      	mov	r5, r1
 8009f54:	f7f6 fb50 	bl	80005f8 <__aeabi_dmul>
 8009f58:	465c      	mov	r4, fp
 8009f5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7f6 f98f 	bl	8000288 <__aeabi_dsub>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4630      	mov	r0, r6
 8009f70:	4639      	mov	r1, r7
 8009f72:	f7f6 f989 	bl	8000288 <__aeabi_dsub>
 8009f76:	a332      	add	r3, pc, #200	@ (adr r3, 800a040 <__ieee754_pow+0x768>)
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	a331      	add	r3, pc, #196	@ (adr r3, 800a048 <__ieee754_pow+0x770>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	4606      	mov	r6, r0
 8009f88:	460f      	mov	r7, r1
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	f7f6 fb33 	bl	80005f8 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f977 	bl	800028c <__adddf3>
 8009f9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fa0:	4b32      	ldr	r3, [pc, #200]	@ (800a06c <__ieee754_pow+0x794>)
 8009fa2:	4413      	add	r3, r2
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 f970 	bl	800028c <__adddf3>
 8009fac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fb2:	f7f6 fab7 	bl	8000524 <__aeabi_i2d>
 8009fb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fb8:	4b2d      	ldr	r3, [pc, #180]	@ (800a070 <__ieee754_pow+0x798>)
 8009fba:	4413      	add	r3, r2
 8009fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fcc:	f7f6 f95e 	bl	800028c <__adddf3>
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f7f6 f95a 	bl	800028c <__adddf3>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 f956 	bl	800028c <__adddf3>
 8009fe0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	4658      	mov	r0, fp
 8009fea:	460d      	mov	r5, r1
 8009fec:	f7f6 f94c 	bl	8000288 <__aeabi_dsub>
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	f7f6 f948 	bl	8000288 <__aeabi_dsub>
 8009ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ffc:	f7f6 f944 	bl	8000288 <__aeabi_dsub>
 800a000:	465c      	mov	r4, fp
 800a002:	4602      	mov	r2, r0
 800a004:	e036      	b.n	800a074 <__ieee754_pow+0x79c>
 800a006:	bf00      	nop
 800a008:	4a454eef 	.word	0x4a454eef
 800a00c:	3fca7e28 	.word	0x3fca7e28
 800a010:	93c9db65 	.word	0x93c9db65
 800a014:	3fcd864a 	.word	0x3fcd864a
 800a018:	a91d4101 	.word	0xa91d4101
 800a01c:	3fd17460 	.word	0x3fd17460
 800a020:	518f264d 	.word	0x518f264d
 800a024:	3fd55555 	.word	0x3fd55555
 800a028:	db6fabff 	.word	0xdb6fabff
 800a02c:	3fdb6db6 	.word	0x3fdb6db6
 800a030:	33333303 	.word	0x33333303
 800a034:	3fe33333 	.word	0x3fe33333
 800a038:	e0000000 	.word	0xe0000000
 800a03c:	3feec709 	.word	0x3feec709
 800a040:	dc3a03fd 	.word	0xdc3a03fd
 800a044:	3feec709 	.word	0x3feec709
 800a048:	145b01f5 	.word	0x145b01f5
 800a04c:	be3e2fe0 	.word	0xbe3e2fe0
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	43400000 	.word	0x43400000
 800a058:	0003988e 	.word	0x0003988e
 800a05c:	000bb679 	.word	0x000bb679
 800a060:	0800c680 	.word	0x0800c680
 800a064:	3ff00000 	.word	0x3ff00000
 800a068:	40080000 	.word	0x40080000
 800a06c:	0800c660 	.word	0x0800c660
 800a070:	0800c670 	.word	0x0800c670
 800a074:	460b      	mov	r3, r1
 800a076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07a:	e5d7      	b.n	8009c2c <__ieee754_pow+0x354>
 800a07c:	f04f 0a01 	mov.w	sl, #1
 800a080:	e65e      	b.n	8009d40 <__ieee754_pow+0x468>
 800a082:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a354 <__ieee754_pow+0xa7c>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 f8fe 	bl	800028c <__adddf3>
 800a090:	4642      	mov	r2, r8
 800a092:	e9cd 0100 	strd	r0, r1, [sp]
 800a096:	464b      	mov	r3, r9
 800a098:	4620      	mov	r0, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	f7f6 f8f4 	bl	8000288 <__aeabi_dsub>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a8:	f7f6 fd36 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f47f ae00 	bne.w	8009cb2 <__ieee754_pow+0x3da>
 800a0b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a0b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a0ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a0be:	fa43 fa0a 	asr.w	sl, r3, sl
 800a0c2:	44da      	add	sl, fp
 800a0c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a0c8:	489d      	ldr	r0, [pc, #628]	@ (800a340 <__ieee754_pow+0xa68>)
 800a0ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a0ce:	4108      	asrs	r0, r1
 800a0d0:	ea00 030a 	and.w	r3, r0, sl
 800a0d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a0d8:	f1c1 0114 	rsb	r1, r1, #20
 800a0dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a0e0:	fa4a fa01 	asr.w	sl, sl, r1
 800a0e4:	f1bb 0f00 	cmp.w	fp, #0
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	bfb8      	it	lt
 800a0f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	4689      	mov	r9, r1
 800a0fe:	4632      	mov	r2, r6
 800a100:	463b      	mov	r3, r7
 800a102:	4640      	mov	r0, r8
 800a104:	4649      	mov	r1, r9
 800a106:	f7f6 f8c1 	bl	800028c <__adddf3>
 800a10a:	2400      	movs	r4, #0
 800a10c:	a37c      	add	r3, pc, #496	@ (adr r3, 800a300 <__ieee754_pow+0xa28>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	4620      	mov	r0, r4
 800a114:	460d      	mov	r5, r1
 800a116:	f7f6 fa6f 	bl	80005f8 <__aeabi_dmul>
 800a11a:	4642      	mov	r2, r8
 800a11c:	e9cd 0100 	strd	r0, r1, [sp]
 800a120:	464b      	mov	r3, r9
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f8af 	bl	8000288 <__aeabi_dsub>
 800a12a:	4602      	mov	r2, r0
 800a12c:	460b      	mov	r3, r1
 800a12e:	4630      	mov	r0, r6
 800a130:	4639      	mov	r1, r7
 800a132:	f7f6 f8a9 	bl	8000288 <__aeabi_dsub>
 800a136:	a374      	add	r3, pc, #464	@ (adr r3, 800a308 <__ieee754_pow+0xa30>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 fa5c 	bl	80005f8 <__aeabi_dmul>
 800a140:	a373      	add	r3, pc, #460	@ (adr r3, 800a310 <__ieee754_pow+0xa38>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	4680      	mov	r8, r0
 800a148:	4689      	mov	r9, r1
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 fa53 	bl	80005f8 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 f897 	bl	800028c <__adddf3>
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a16a:	f7f6 f88f 	bl	800028c <__adddf3>
 800a16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a172:	4680      	mov	r8, r0
 800a174:	4689      	mov	r9, r1
 800a176:	f7f6 f887 	bl	8000288 <__aeabi_dsub>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 f881 	bl	8000288 <__aeabi_dsub>
 800a186:	4642      	mov	r2, r8
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	464b      	mov	r3, r9
 800a18e:	4640      	mov	r0, r8
 800a190:	4649      	mov	r1, r9
 800a192:	f7f6 fa31 	bl	80005f8 <__aeabi_dmul>
 800a196:	a360      	add	r3, pc, #384	@ (adr r3, 800a318 <__ieee754_pow+0xa40>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	f7f6 fa2a 	bl	80005f8 <__aeabi_dmul>
 800a1a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800a320 <__ieee754_pow+0xa48>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f6 f86d 	bl	8000288 <__aeabi_dsub>
 800a1ae:	4622      	mov	r2, r4
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	f7f6 fa21 	bl	80005f8 <__aeabi_dmul>
 800a1b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a328 <__ieee754_pow+0xa50>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 f866 	bl	800028c <__adddf3>
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	462b      	mov	r3, r5
 800a1c4:	f7f6 fa18 	bl	80005f8 <__aeabi_dmul>
 800a1c8:	a359      	add	r3, pc, #356	@ (adr r3, 800a330 <__ieee754_pow+0xa58>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f7f6 f85b 	bl	8000288 <__aeabi_dsub>
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	f7f6 fa0f 	bl	80005f8 <__aeabi_dmul>
 800a1da:	a357      	add	r3, pc, #348	@ (adr r3, 800a338 <__ieee754_pow+0xa60>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 f854 	bl	800028c <__adddf3>
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	f7f6 fa06 	bl	80005f8 <__aeabi_dmul>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	f7f6 f848 	bl	8000288 <__aeabi_dsub>
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	2200      	movs	r2, #0
 800a20a:	e9cd 0100 	strd	r0, r1, [sp]
 800a20e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a222:	f7f6 fb13 	bl	800084c <__aeabi_ddiv>
 800a226:	4632      	mov	r2, r6
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	463b      	mov	r3, r7
 800a22e:	4640      	mov	r0, r8
 800a230:	4649      	mov	r1, r9
 800a232:	f7f6 f9e1 	bl	80005f8 <__aeabi_dmul>
 800a236:	4632      	mov	r2, r6
 800a238:	463b      	mov	r3, r7
 800a23a:	f7f6 f827 	bl	800028c <__adddf3>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4620      	mov	r0, r4
 800a244:	4629      	mov	r1, r5
 800a246:	f7f6 f81f 	bl	8000288 <__aeabi_dsub>
 800a24a:	4642      	mov	r2, r8
 800a24c:	464b      	mov	r3, r9
 800a24e:	f7f6 f81b 	bl	8000288 <__aeabi_dsub>
 800a252:	460b      	mov	r3, r1
 800a254:	4602      	mov	r2, r0
 800a256:	493b      	ldr	r1, [pc, #236]	@ (800a344 <__ieee754_pow+0xa6c>)
 800a258:	2000      	movs	r0, #0
 800a25a:	f7f6 f815 	bl	8000288 <__aeabi_dsub>
 800a25e:	ec41 0b10 	vmov	d0, r0, r1
 800a262:	ee10 3a90 	vmov	r3, s1
 800a266:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a26e:	da30      	bge.n	800a2d2 <__ieee754_pow+0x9fa>
 800a270:	4650      	mov	r0, sl
 800a272:	f000 fa15 	bl	800a6a0 <scalbn>
 800a276:	ec51 0b10 	vmov	r0, r1, d0
 800a27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a27e:	f7ff bbd2 	b.w	8009a26 <__ieee754_pow+0x14e>
 800a282:	4c31      	ldr	r4, [pc, #196]	@ (800a348 <__ieee754_pow+0xa70>)
 800a284:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d91a      	bls.n	800a2c2 <__ieee754_pow+0x9ea>
 800a28c:	4b2f      	ldr	r3, [pc, #188]	@ (800a34c <__ieee754_pow+0xa74>)
 800a28e:	440b      	add	r3, r1
 800a290:	4303      	orrs	r3, r0
 800a292:	d009      	beq.n	800a2a8 <__ieee754_pow+0x9d0>
 800a294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a298:	2200      	movs	r2, #0
 800a29a:	2300      	movs	r3, #0
 800a29c:	f7f6 fc1e 	bl	8000adc <__aeabi_dcmplt>
 800a2a0:	3800      	subs	r0, #0
 800a2a2:	bf18      	it	ne
 800a2a4:	2001      	movne	r0, #1
 800a2a6:	e42b      	b.n	8009b00 <__ieee754_pow+0x228>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f5 ffec 	bl	8000288 <__aeabi_dsub>
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	463b      	mov	r3, r7
 800a2b4:	f7f6 fc26 	bl	8000b04 <__aeabi_dcmpge>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d1eb      	bne.n	800a294 <__ieee754_pow+0x9bc>
 800a2bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a35c <__ieee754_pow+0xa84>
 800a2c0:	e6f7      	b.n	800a0b2 <__ieee754_pow+0x7da>
 800a2c2:	469a      	mov	sl, r3
 800a2c4:	4b22      	ldr	r3, [pc, #136]	@ (800a350 <__ieee754_pow+0xa78>)
 800a2c6:	459a      	cmp	sl, r3
 800a2c8:	f63f aef3 	bhi.w	800a0b2 <__ieee754_pow+0x7da>
 800a2cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a2d0:	e715      	b.n	800a0fe <__ieee754_pow+0x826>
 800a2d2:	ec51 0b10 	vmov	r0, r1, d0
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	e7cf      	b.n	800a27a <__ieee754_pow+0x9a2>
 800a2da:	491a      	ldr	r1, [pc, #104]	@ (800a344 <__ieee754_pow+0xa6c>)
 800a2dc:	2000      	movs	r0, #0
 800a2de:	f7ff bb18 	b.w	8009912 <__ieee754_pow+0x3a>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	f7ff bb14 	b.w	8009912 <__ieee754_pow+0x3a>
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7ff bb10 	b.w	8009912 <__ieee754_pow+0x3a>
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	f7ff bb5e 	b.w	80099b4 <__ieee754_pow+0xdc>
 800a2f8:	2400      	movs	r4, #0
 800a2fa:	f7ff bb49 	b.w	8009990 <__ieee754_pow+0xb8>
 800a2fe:	bf00      	nop
 800a300:	00000000 	.word	0x00000000
 800a304:	3fe62e43 	.word	0x3fe62e43
 800a308:	fefa39ef 	.word	0xfefa39ef
 800a30c:	3fe62e42 	.word	0x3fe62e42
 800a310:	0ca86c39 	.word	0x0ca86c39
 800a314:	be205c61 	.word	0xbe205c61
 800a318:	72bea4d0 	.word	0x72bea4d0
 800a31c:	3e663769 	.word	0x3e663769
 800a320:	c5d26bf1 	.word	0xc5d26bf1
 800a324:	3ebbbd41 	.word	0x3ebbbd41
 800a328:	af25de2c 	.word	0xaf25de2c
 800a32c:	3f11566a 	.word	0x3f11566a
 800a330:	16bebd93 	.word	0x16bebd93
 800a334:	3f66c16c 	.word	0x3f66c16c
 800a338:	5555553e 	.word	0x5555553e
 800a33c:	3fc55555 	.word	0x3fc55555
 800a340:	fff00000 	.word	0xfff00000
 800a344:	3ff00000 	.word	0x3ff00000
 800a348:	4090cbff 	.word	0x4090cbff
 800a34c:	3f6f3400 	.word	0x3f6f3400
 800a350:	3fe00000 	.word	0x3fe00000
 800a354:	652b82fe 	.word	0x652b82fe
 800a358:	3c971547 	.word	0x3c971547
 800a35c:	4090cc00 	.word	0x4090cc00

0800a360 <atan>:
 800a360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	ec55 4b10 	vmov	r4, r5, d0
 800a368:	4bbf      	ldr	r3, [pc, #764]	@ (800a668 <atan+0x308>)
 800a36a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a36e:	429e      	cmp	r6, r3
 800a370:	46ab      	mov	fp, r5
 800a372:	d918      	bls.n	800a3a6 <atan+0x46>
 800a374:	4bbd      	ldr	r3, [pc, #756]	@ (800a66c <atan+0x30c>)
 800a376:	429e      	cmp	r6, r3
 800a378:	d801      	bhi.n	800a37e <atan+0x1e>
 800a37a:	d109      	bne.n	800a390 <atan+0x30>
 800a37c:	b144      	cbz	r4, 800a390 <atan+0x30>
 800a37e:	4622      	mov	r2, r4
 800a380:	462b      	mov	r3, r5
 800a382:	4620      	mov	r0, r4
 800a384:	4629      	mov	r1, r5
 800a386:	f7f5 ff81 	bl	800028c <__adddf3>
 800a38a:	4604      	mov	r4, r0
 800a38c:	460d      	mov	r5, r1
 800a38e:	e006      	b.n	800a39e <atan+0x3e>
 800a390:	f1bb 0f00 	cmp.w	fp, #0
 800a394:	f340 812b 	ble.w	800a5ee <atan+0x28e>
 800a398:	a597      	add	r5, pc, #604	@ (adr r5, 800a5f8 <atan+0x298>)
 800a39a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a39e:	ec45 4b10 	vmov	d0, r4, r5
 800a3a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a6:	4bb2      	ldr	r3, [pc, #712]	@ (800a670 <atan+0x310>)
 800a3a8:	429e      	cmp	r6, r3
 800a3aa:	d813      	bhi.n	800a3d4 <atan+0x74>
 800a3ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a3b0:	429e      	cmp	r6, r3
 800a3b2:	d80c      	bhi.n	800a3ce <atan+0x6e>
 800a3b4:	a392      	add	r3, pc, #584	@ (adr r3, 800a600 <atan+0x2a0>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f5 ff65 	bl	800028c <__adddf3>
 800a3c2:	4bac      	ldr	r3, [pc, #688]	@ (800a674 <atan+0x314>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f7f6 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d1e7      	bne.n	800a39e <atan+0x3e>
 800a3ce:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d2:	e029      	b.n	800a428 <atan+0xc8>
 800a3d4:	f000 f95c 	bl	800a690 <fabs>
 800a3d8:	4ba7      	ldr	r3, [pc, #668]	@ (800a678 <atan+0x318>)
 800a3da:	429e      	cmp	r6, r3
 800a3dc:	ec55 4b10 	vmov	r4, r5, d0
 800a3e0:	f200 80bc 	bhi.w	800a55c <atan+0x1fc>
 800a3e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a3e8:	429e      	cmp	r6, r3
 800a3ea:	f200 809e 	bhi.w	800a52a <atan+0x1ca>
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7f5 ff49 	bl	800028c <__adddf3>
 800a3fa:	4b9e      	ldr	r3, [pc, #632]	@ (800a674 <atan+0x314>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f7f5 ff43 	bl	8000288 <__aeabi_dsub>
 800a402:	2200      	movs	r2, #0
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a40c:	4620      	mov	r0, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	f7f5 ff3c 	bl	800028c <__adddf3>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4630      	mov	r0, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	f7f6 fa16 	bl	800084c <__aeabi_ddiv>
 800a420:	f04f 0a00 	mov.w	sl, #0
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	4622      	mov	r2, r4
 800a42a:	462b      	mov	r3, r5
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4680      	mov	r8, r0
 800a43a:	4689      	mov	r9, r1
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	a371      	add	r3, pc, #452	@ (adr r3, 800a608 <atan+0x2a8>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	4606      	mov	r6, r0
 800a448:	460f      	mov	r7, r1
 800a44a:	f7f6 f8d5 	bl	80005f8 <__aeabi_dmul>
 800a44e:	a370      	add	r3, pc, #448	@ (adr r3, 800a610 <atan+0x2b0>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f5 ff1a 	bl	800028c <__adddf3>
 800a458:	4632      	mov	r2, r6
 800a45a:	463b      	mov	r3, r7
 800a45c:	f7f6 f8cc 	bl	80005f8 <__aeabi_dmul>
 800a460:	a36d      	add	r3, pc, #436	@ (adr r3, 800a618 <atan+0x2b8>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f5 ff11 	bl	800028c <__adddf3>
 800a46a:	4632      	mov	r2, r6
 800a46c:	463b      	mov	r3, r7
 800a46e:	f7f6 f8c3 	bl	80005f8 <__aeabi_dmul>
 800a472:	a36b      	add	r3, pc, #428	@ (adr r3, 800a620 <atan+0x2c0>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f7f5 ff08 	bl	800028c <__adddf3>
 800a47c:	4632      	mov	r2, r6
 800a47e:	463b      	mov	r3, r7
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	a368      	add	r3, pc, #416	@ (adr r3, 800a628 <atan+0x2c8>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f7f5 feff 	bl	800028c <__adddf3>
 800a48e:	4632      	mov	r2, r6
 800a490:	463b      	mov	r3, r7
 800a492:	f7f6 f8b1 	bl	80005f8 <__aeabi_dmul>
 800a496:	a366      	add	r3, pc, #408	@ (adr r3, 800a630 <atan+0x2d0>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	f7f5 fef6 	bl	800028c <__adddf3>
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	f7f6 f8a8 	bl	80005f8 <__aeabi_dmul>
 800a4a8:	a363      	add	r3, pc, #396	@ (adr r3, 800a638 <atan+0x2d8>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	4689      	mov	r9, r1
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 f89f 	bl	80005f8 <__aeabi_dmul>
 800a4ba:	a361      	add	r3, pc, #388	@ (adr r3, 800a640 <atan+0x2e0>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	f7f5 fee2 	bl	8000288 <__aeabi_dsub>
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	a35e      	add	r3, pc, #376	@ (adr r3, 800a648 <atan+0x2e8>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f5 fed9 	bl	8000288 <__aeabi_dsub>
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	463b      	mov	r3, r7
 800a4da:	f7f6 f88d 	bl	80005f8 <__aeabi_dmul>
 800a4de:	a35c      	add	r3, pc, #368	@ (adr r3, 800a650 <atan+0x2f0>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f7f5 fed0 	bl	8000288 <__aeabi_dsub>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	f7f6 f884 	bl	80005f8 <__aeabi_dmul>
 800a4f0:	a359      	add	r3, pc, #356	@ (adr r3, 800a658 <atan+0x2f8>)
 800a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f6:	f7f5 fec7 	bl	8000288 <__aeabi_dsub>
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	f7f6 f87b 	bl	80005f8 <__aeabi_dmul>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f5 febf 	bl	800028c <__adddf3>
 800a50e:	4622      	mov	r2, r4
 800a510:	462b      	mov	r3, r5
 800a512:	f7f6 f871 	bl	80005f8 <__aeabi_dmul>
 800a516:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	d148      	bne.n	800a5b2 <atan+0x252>
 800a520:	4620      	mov	r0, r4
 800a522:	4629      	mov	r1, r5
 800a524:	f7f5 feb0 	bl	8000288 <__aeabi_dsub>
 800a528:	e72f      	b.n	800a38a <atan+0x2a>
 800a52a:	4b52      	ldr	r3, [pc, #328]	@ (800a674 <atan+0x314>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	4620      	mov	r0, r4
 800a530:	4629      	mov	r1, r5
 800a532:	f7f5 fea9 	bl	8000288 <__aeabi_dsub>
 800a536:	4b4f      	ldr	r3, [pc, #316]	@ (800a674 <atan+0x314>)
 800a538:	4606      	mov	r6, r0
 800a53a:	460f      	mov	r7, r1
 800a53c:	2200      	movs	r2, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f5 fea3 	bl	800028c <__adddf3>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 f97d 	bl	800084c <__aeabi_ddiv>
 800a552:	f04f 0a01 	mov.w	sl, #1
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	e765      	b.n	800a428 <atan+0xc8>
 800a55c:	4b47      	ldr	r3, [pc, #284]	@ (800a67c <atan+0x31c>)
 800a55e:	429e      	cmp	r6, r3
 800a560:	d21c      	bcs.n	800a59c <atan+0x23c>
 800a562:	4b47      	ldr	r3, [pc, #284]	@ (800a680 <atan+0x320>)
 800a564:	2200      	movs	r2, #0
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe8d 	bl	8000288 <__aeabi_dsub>
 800a56e:	4b44      	ldr	r3, [pc, #272]	@ (800a680 <atan+0x320>)
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	2200      	movs	r2, #0
 800a576:	4620      	mov	r0, r4
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	4b3d      	ldr	r3, [pc, #244]	@ (800a674 <atan+0x314>)
 800a580:	2200      	movs	r2, #0
 800a582:	f7f5 fe83 	bl	800028c <__adddf3>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f6 f95d 	bl	800084c <__aeabi_ddiv>
 800a592:	f04f 0a02 	mov.w	sl, #2
 800a596:	4604      	mov	r4, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	e745      	b.n	800a428 <atan+0xc8>
 800a59c:	4622      	mov	r2, r4
 800a59e:	462b      	mov	r3, r5
 800a5a0:	4938      	ldr	r1, [pc, #224]	@ (800a684 <atan+0x324>)
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	f7f6 f952 	bl	800084c <__aeabi_ddiv>
 800a5a8:	f04f 0a03 	mov.w	sl, #3
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	460d      	mov	r5, r1
 800a5b0:	e73a      	b.n	800a428 <atan+0xc8>
 800a5b2:	4b35      	ldr	r3, [pc, #212]	@ (800a688 <atan+0x328>)
 800a5b4:	4e35      	ldr	r6, [pc, #212]	@ (800a68c <atan+0x32c>)
 800a5b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f5 fe63 	bl	8000288 <__aeabi_dsub>
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	462b      	mov	r3, r5
 800a5c6:	f7f5 fe5f 	bl	8000288 <__aeabi_dsub>
 800a5ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a5d6:	f7f5 fe57 	bl	8000288 <__aeabi_dsub>
 800a5da:	f1bb 0f00 	cmp.w	fp, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	f6bf aedc 	bge.w	800a39e <atan+0x3e>
 800a5e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5ea:	461d      	mov	r5, r3
 800a5ec:	e6d7      	b.n	800a39e <atan+0x3e>
 800a5ee:	a51c      	add	r5, pc, #112	@ (adr r5, 800a660 <atan+0x300>)
 800a5f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a5f4:	e6d3      	b.n	800a39e <atan+0x3e>
 800a5f6:	bf00      	nop
 800a5f8:	54442d18 	.word	0x54442d18
 800a5fc:	3ff921fb 	.word	0x3ff921fb
 800a600:	8800759c 	.word	0x8800759c
 800a604:	7e37e43c 	.word	0x7e37e43c
 800a608:	e322da11 	.word	0xe322da11
 800a60c:	3f90ad3a 	.word	0x3f90ad3a
 800a610:	24760deb 	.word	0x24760deb
 800a614:	3fa97b4b 	.word	0x3fa97b4b
 800a618:	a0d03d51 	.word	0xa0d03d51
 800a61c:	3fb10d66 	.word	0x3fb10d66
 800a620:	c54c206e 	.word	0xc54c206e
 800a624:	3fb745cd 	.word	0x3fb745cd
 800a628:	920083ff 	.word	0x920083ff
 800a62c:	3fc24924 	.word	0x3fc24924
 800a630:	5555550d 	.word	0x5555550d
 800a634:	3fd55555 	.word	0x3fd55555
 800a638:	2c6a6c2f 	.word	0x2c6a6c2f
 800a63c:	bfa2b444 	.word	0xbfa2b444
 800a640:	52defd9a 	.word	0x52defd9a
 800a644:	3fadde2d 	.word	0x3fadde2d
 800a648:	af749a6d 	.word	0xaf749a6d
 800a64c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a650:	fe231671 	.word	0xfe231671
 800a654:	3fbc71c6 	.word	0x3fbc71c6
 800a658:	9998ebc4 	.word	0x9998ebc4
 800a65c:	3fc99999 	.word	0x3fc99999
 800a660:	54442d18 	.word	0x54442d18
 800a664:	bff921fb 	.word	0xbff921fb
 800a668:	440fffff 	.word	0x440fffff
 800a66c:	7ff00000 	.word	0x7ff00000
 800a670:	3fdbffff 	.word	0x3fdbffff
 800a674:	3ff00000 	.word	0x3ff00000
 800a678:	3ff2ffff 	.word	0x3ff2ffff
 800a67c:	40038000 	.word	0x40038000
 800a680:	3ff80000 	.word	0x3ff80000
 800a684:	bff00000 	.word	0xbff00000
 800a688:	0800c690 	.word	0x0800c690
 800a68c:	0800c6b0 	.word	0x0800c6b0

0800a690 <fabs>:
 800a690:	ec51 0b10 	vmov	r0, r1, d0
 800a694:	4602      	mov	r2, r0
 800a696:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a69a:	ec43 2b10 	vmov	d0, r2, r3
 800a69e:	4770      	bx	lr

0800a6a0 <scalbn>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	ec55 4b10 	vmov	r4, r5, d0
 800a6a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	462b      	mov	r3, r5
 800a6ae:	b991      	cbnz	r1, 800a6d6 <scalbn+0x36>
 800a6b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a6b4:	4323      	orrs	r3, r4
 800a6b6:	d03d      	beq.n	800a734 <scalbn+0x94>
 800a6b8:	4b35      	ldr	r3, [pc, #212]	@ (800a790 <scalbn+0xf0>)
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	4629      	mov	r1, r5
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f7f5 ff9a 	bl	80005f8 <__aeabi_dmul>
 800a6c4:	4b33      	ldr	r3, [pc, #204]	@ (800a794 <scalbn+0xf4>)
 800a6c6:	429e      	cmp	r6, r3
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	da0f      	bge.n	800a6ee <scalbn+0x4e>
 800a6ce:	a328      	add	r3, pc, #160	@ (adr r3, 800a770 <scalbn+0xd0>)
 800a6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d4:	e01e      	b.n	800a714 <scalbn+0x74>
 800a6d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a6da:	4291      	cmp	r1, r2
 800a6dc:	d10b      	bne.n	800a6f6 <scalbn+0x56>
 800a6de:	4622      	mov	r2, r4
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	f7f5 fdd2 	bl	800028c <__adddf3>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	e022      	b.n	800a734 <scalbn+0x94>
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a6f4:	3936      	subs	r1, #54	@ 0x36
 800a6f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a6fa:	4296      	cmp	r6, r2
 800a6fc:	dd0d      	ble.n	800a71a <scalbn+0x7a>
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	a11d      	add	r1, pc, #116	@ (adr r1, 800a778 <scalbn+0xd8>)
 800a702:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a706:	da02      	bge.n	800a70e <scalbn+0x6e>
 800a708:	a11d      	add	r1, pc, #116	@ (adr r1, 800a780 <scalbn+0xe0>)
 800a70a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a778 <scalbn+0xd8>)
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f5 ff70 	bl	80005f8 <__aeabi_dmul>
 800a718:	e7e6      	b.n	800a6e8 <scalbn+0x48>
 800a71a:	1872      	adds	r2, r6, r1
 800a71c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a720:	428a      	cmp	r2, r1
 800a722:	dcec      	bgt.n	800a6fe <scalbn+0x5e>
 800a724:	2a00      	cmp	r2, #0
 800a726:	dd08      	ble.n	800a73a <scalbn+0x9a>
 800a728:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a72c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a730:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a734:	ec45 4b10 	vmov	d0, r4, r5
 800a738:	bd70      	pop	{r4, r5, r6, pc}
 800a73a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a73e:	da08      	bge.n	800a752 <scalbn+0xb2>
 800a740:	2d00      	cmp	r5, #0
 800a742:	a10b      	add	r1, pc, #44	@ (adr r1, 800a770 <scalbn+0xd0>)
 800a744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a748:	dac1      	bge.n	800a6ce <scalbn+0x2e>
 800a74a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a788 <scalbn+0xe8>)
 800a74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a750:	e7bd      	b.n	800a6ce <scalbn+0x2e>
 800a752:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a756:	3236      	adds	r2, #54	@ 0x36
 800a758:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a75c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a760:	4620      	mov	r0, r4
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <scalbn+0xf8>)
 800a764:	4629      	mov	r1, r5
 800a766:	2200      	movs	r2, #0
 800a768:	e7d4      	b.n	800a714 <scalbn+0x74>
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w
 800a770:	c2f8f359 	.word	0xc2f8f359
 800a774:	01a56e1f 	.word	0x01a56e1f
 800a778:	8800759c 	.word	0x8800759c
 800a77c:	7e37e43c 	.word	0x7e37e43c
 800a780:	8800759c 	.word	0x8800759c
 800a784:	fe37e43c 	.word	0xfe37e43c
 800a788:	c2f8f359 	.word	0xc2f8f359
 800a78c:	81a56e1f 	.word	0x81a56e1f
 800a790:	43500000 	.word	0x43500000
 800a794:	ffff3cb0 	.word	0xffff3cb0
 800a798:	3c900000 	.word	0x3c900000

0800a79c <with_errno>:
 800a79c:	b510      	push	{r4, lr}
 800a79e:	ed2d 8b02 	vpush	{d8}
 800a7a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a7a6:	eef0 8a60 	vmov.f32	s17, s1
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f7fc fe66 	bl	800747c <__errno>
 800a7b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a7b4:	eef0 0a68 	vmov.f32	s1, s17
 800a7b8:	ecbd 8b02 	vpop	{d8}
 800a7bc:	6004      	str	r4, [r0, #0]
 800a7be:	bd10      	pop	{r4, pc}

0800a7c0 <xflow>:
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	b507      	push	{r0, r1, r2, lr}
 800a7c4:	ec51 0b10 	vmov	r0, r1, d0
 800a7c8:	b183      	cbz	r3, 800a7ec <xflow+0x2c>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7d0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	ec41 0b10 	vmov	d0, r0, r1
 800a7e0:	2022      	movs	r0, #34	@ 0x22
 800a7e2:	b003      	add	sp, #12
 800a7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e8:	f7ff bfd8 	b.w	800a79c <with_errno>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	e7ee      	b.n	800a7d0 <xflow+0x10>
 800a7f2:	0000      	movs	r0, r0
 800a7f4:	0000      	movs	r0, r0
	...

0800a7f8 <__math_uflow>:
 800a7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a800 <__math_uflow+0x8>
 800a7fc:	f7ff bfe0 	b.w	800a7c0 <xflow>
 800a800:	00000000 	.word	0x00000000
 800a804:	10000000 	.word	0x10000000

0800a808 <__math_oflow>:
 800a808:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a810 <__math_oflow+0x8>
 800a80c:	f7ff bfd8 	b.w	800a7c0 <xflow>
 800a810:	00000000 	.word	0x00000000
 800a814:	70000000 	.word	0x70000000

0800a818 <_kill>:
 800a818:	4b02      	ldr	r3, [pc, #8]	@ (800a824 <_kill+0xc>)
 800a81a:	2258      	movs	r2, #88	@ 0x58
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	f04f 30ff 	mov.w	r0, #4294967295
 800a822:	4770      	bx	lr
 800a824:	20000780 	.word	0x20000780

0800a828 <_exit>:
 800a828:	e7fe      	b.n	800a828 <_exit>
	...

0800a82c <_init>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr

0800a838 <_fini>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	bf00      	nop
 800a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83e:	bc08      	pop	{r3}
 800a840:	469e      	mov	lr, r3
 800a842:	4770      	bx	lr
